[
    {
        "question": "Schedule a meeting with Elli and her manager 's boss tomorrow morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "create work drinks after meeting with boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" work drinks \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a brainstorming session with Dan Schoffel 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" brainstorming session \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Jim and his manager for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I must go to a meeting with Chidi and his supervisor tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chidi \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chidi \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Create meeting with boss for Monday at 2 pm to 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Also on Wednesday , include a Brunch with Office Staff from 11 am to 12 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" Brunch \" ) ) ) ) ) )"
    },
    {
        "question": "I need a different meeting with my team tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "My meeting with my team takes place on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with my team tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Add on a happy hour with Megan 's team after the sales pitch coming up .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Megan \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" sales pitch \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" happy hour \" ) ) ) ) ) )"
    },
    {
        "question": "Create meeting with Mark 's manager and set it for 1 PM tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mark \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please schedule Tuesday morning meeting with my team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "I need to set up a new event with Chelsea 's manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chelsea \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Let 's start over . Add a meeting with boss tomorrow at 1 : 30 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a luncheon with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" luncheon \" ) ) ) ) ) )"
    },
    {
        "question": "make table tennis match with Elli , Jesse and both of their bosses .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" table tennis match \" ) ) ) ) ) )"
    },
    {
        "question": "Let 's meet with Kim 's team after the luncheon tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( Tomorrow ) :event ( Constraint[Event] :subject ( ?~= # ( String \" luncheon \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Kim 's reports .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "put meeting with ben 's manager at aug 24",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" ben \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 24 ) :month # ( Month \" AUGUST \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Great ! Also schedule a meeting with Andre 's Manager tomorrow at 10 : 45 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Andre \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinuteAm :hours # ( Number 10.0 ) :minutes # ( Number 45 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule the finance meeting with Johnny 's team and Eric .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Johnny \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Eric \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" finance meeting \" ) ) ) ) ) )"
    },
    {
        "question": "i need to meet with Elli , her boss , her bosses boss and kim",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient x0 ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient x0 ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add an event to meet with Kim and her team next Friday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule the talk with Kant 's Manager at 4 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kant \" ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" talk \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a working lunch tomorrow , with my team but exclude Abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" working lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Invite Kristin 's team to a meeting after the conference",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kristin \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" conference \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event for meeting with Abby and her boss tomorrow morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "I want to meet with Rob 's boss at 8 pm today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rob \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "After the lunch meeting , invite Mary 's team to plan the budget .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" lunch meeting \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" plan the budget \" ) ) ) ) ) )"
    },
    {
        "question": "Make a lunch meeting with Kim and her reports .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Please update another event for tomorrow . I have a meeting with my supervisor .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meet with heather and her boss at 3 p .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" heather \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" heather \" ) ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add mike , his supervisor and nina and her supervisor to our team meeting on tuesday afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" mike \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" mike \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" nina \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" nina \" ) ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I wanna meet Mike 's boss at today 8 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mike \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make me a meeting with Kim Possible , her manager , Elli , and her manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Meeting with Tessa 's boss at 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tessa \" ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a finance meeting with Marty and his boss for Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Marty \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Marty \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" finance meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to see Abby and her boss tomorrow at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with my supervisor at 1 : 30 tomorrow . Thanks",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a from 1 : 00 pm to 2 : 00 pm with Jane 's manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberPM :number # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Jake and her boss tomorrow at 2 pm in Berlin",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Berlin \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hi , I need a meeting with Abby , Bob and both of their managers as well called company board meeting starting at 1 today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bob \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bob \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" company board meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need a room in Bellevue with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" Bellevue \" ) ) ( roomRequest ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Danielle 's manager tomorrow morning at 9 a.m ..",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Danielle \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "team meeting with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Can I have a meeting setup with Thomas 's manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Thomas \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Ok plan a time with Jake Cobb and his team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake Cobb \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake Cobb \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "At 4 pm create a new meeting with My boss and his boss to go over the sales report",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" go over the sales report \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with the surbodinates earlier tomorrow morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( EarlyTimeRange :timeRange ( Morning ) ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Set a meeting with Kim and her reports on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a conference with Jesse Rosenfeld and team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" conference \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a dinner with Mark and his supervisor on Friday at 6 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mark \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mark \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Find 30 minutes tomorrow to meet with Matt and his boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matt \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matt \" ) ) ) ) ) ) ) ) :duration ( ?= ( toMinutes # ( Number 30.0 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Set up Manager 's Chat with Jessa 's manager for Tuesday at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jessa \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Manager's Chat \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with David Lax 's reports on Tuesday at 3 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting room with Chris and his team tomorrow morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chris \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chris \" ) ) ) ) ) ) ) ) :location ( roomRequest ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Add meeting at 14 : 30 with the boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( NextTime :time ( HourMinuteMilitary :hours # ( Number 14 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "ok please add event with abby gonano and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby gonano \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby gonano \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to set up a meeting with Tom and his supervisor for Monday after 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) ) :start ( OnDateAfterTime :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) )"
    },
    {
        "question": "have my whole team meet me tonight",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with John 's manager today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add a dinner event with my direct reports ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Great . I also need to schedule time with Bruce Wayne and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bruce Wayne \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bruce Wayne \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Now put a lunch with Lisa and her team for negotiations",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lisa \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lisa \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "put interview meet with office boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" interview meet \" ) ) ) ) ) )"
    },
    {
        "question": "I need a budget review scheduled with Andy 's skip",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Andy \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" budget review \" ) ) ) ) ) )"
    },
    {
        "question": "Does Dan and his team have availability tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with my team for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Abby 's boss today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Make an all day meeting with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :isAllDay ( ?= # ( Boolean true ) ) ) ) ) )"
    },
    {
        "question": "put meet with team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to see Aiden 's team after my dinner this Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Aiden \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" dinner \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a lunch with Abby 's bosses boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I want to meet with Brenda 's manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brenda \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "And schedule a casino night for the team some time this month",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( FullMonthofMonth :month ( :month ( Today ) ) ) ) :subject ( ?= # ( String \" casino night \" ) ) ) ) ) )"
    },
    {
        "question": "Great . I want to make a new conference call with Amanda and her manager this week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amanda \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amanda \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeek ) ) :subject ( ?= # ( String \" conference call \" ) ) ) ) ) )"
    },
    {
        "question": "Also set up a call with David Lax 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" call \" ) ) ) ) ) )"
    },
    {
        "question": "I also need a meeting with ken 's manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" ken \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hmm then lets make a meeting with my Team then for this Friday around noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( TimeAround :time ( Noon ) ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting with Erin and her boss on Tuesday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Erin \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Erin \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule lunch with Janet 's supervisor for next Friday at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janet \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a dinner date with Meghan 's team next Monday , but do n't include Harry .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Meghan \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Harry \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" dinner date \" ) ) ) ) ) )"
    },
    {
        "question": "Make an appointment with my manager please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up the weekly review with Abby 's team and add Rufus",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rufus \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" weekly review \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Jake and his boss tomorrow at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Jake and his boss are meeting on Tuesday with me and my boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting with Dan Marton 's skip .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule 15 minutes with Toby 's manager this morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Toby \" ) ) ) ) ) ) ) :duration ( ?= ( toMinutes # ( Number 15 ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Dan Schoffel and his reports for next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting for next Friday from 2 pm to 3 pm and it should include my whole team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Enter another meeting after the luncheon on Monday and invite Tom 's team members .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" luncheon \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "create meeting on tuesday with supervisor",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with kim and her skip tomorrow morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Mondo 's boss at his office on Tuesday at 9 : 00 .a.m .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mondo \" ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" his office \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "create work thing with boss on monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" work thing \" ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with Jesse and their skip this week sometime .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeek ) ) ) ) ) )"
    },
    {
        "question": "put the meeting with ben 's manager on aug 11",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" ben \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 11 ) :month # ( Month \" AUGUST \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Setup a lunch meeting with my manager for tomorrow at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule drinks with coworkers tomorrow at 6 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" drinks \" ) ) ) ) ) )"
    },
    {
        "question": "I am seeing Jake and his boss for Crop Whispering tomorrow at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" Crop Whispering \" ) ) ) ) ) )"
    },
    {
        "question": "I have a finance meeting with Abby and his Boss on Tuesday afternoon at 3 : 00 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" finance meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to add a review meeting with Emily 's manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Emily \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" review meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to eat some cakes tomorrow with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" eat some cakes \" ) ) ) ) ) )"
    },
    {
        "question": "Create a lunch meeting with my manager this Saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with Kim and her skip manager tomorrow at 5 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Great , now after the training session on the 24 th , add a review session with Tom and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( nextDayOfMonth ( Today ) # ( Number 24 ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" training session \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" review session \" ) ) ) ) ) )"
    },
    {
        "question": "After the company party , schedule a meeting with Ronaldo 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ronaldo \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" company party \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a Lunch with Elli and her skip manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Lunch \" ) ) ) ) ) )"
    },
    {
        "question": "After my dinner meeting , put a meeting with Brian and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brian \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brian \" ) ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" dinner meeting \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a funky brunch meet with Jane and her manager on Thrusday at 11 : 00 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" funky brunch meet \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a dinner meeting with Bob and his team please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bob \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bob \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner meeting \" ) ) ) ) ) )"
    },
    {
        "question": "put meet with my boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Could you put a meeting with Fritz and her boss for next week sometime ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fritz \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fritz \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "i will be busy during 12 pm 1 am with lunch with boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I will be with my team for 3 days from the 7 th to the 10 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( nextDayOfMonth ( Today ) # ( Number 7 ) ) :date2 ( nextDayOfMonth ( nextDayOfMonth ( Today ) # ( Number 7 ) ) # ( Number 10.0 ) ) ) :event ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "add a working lunch with meg and her supervisor",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" meg \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" meg \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" working lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Please add a meeting with my team for Thursday at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event for 3 hours from now with Jack and his manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) ) ) :start ( ?= ( adjustByPeriodDuration ( Now ) ( PeriodDuration :duration ( toHours # ( Number 3 ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "check for lisa 's supervisor availability",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" lisa \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a dinner meeting with the office staff for Friday night .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "put meeting with Jesse 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Could you make a bootcamp event with Abby 's skip ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Abby 's team tomorrow please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Dave 's manager tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dave \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I need you to book an all - day meeting with my team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :isAllDay ( ?= # ( Boolean true ) ) ) ) ) )"
    },
    {
        "question": "create work meeting with my co workers at the break room",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" break room \" ) ) :subject ( ?= # ( String \" work meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with John and his supervisior for Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to have lunch with Abby and his Boss this coming Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to Seafair with Jake and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Seafair \" ) ) ) ) ) )"
    },
    {
        "question": "make a dinner and wine party at my house tuesday around 8 , I want my team members to be there",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" my house \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" dinner and wine party \" ) ) ) ) ) )"
    },
    {
        "question": "I had lunch with my manager on Monday last week , add that please .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( DowOfWeekNew :dow # ( DayOfWeek \" MONDAY \" ) :week ( LastWeekNew ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "please schedule a meeting with Tracy 's skip and Tracy",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tracy \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tracy \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event with Kim and her reports",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "After the breakfast meeting , invite Sarah 's team to a presentation .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" breakfast meeting \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" presentation \" ) ) ) ) ) )"
    },
    {
        "question": "and schedule lunch with Max 's boss today at 12 : 15 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Max \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinutePm :hours # ( Number 12 ) :minutes # ( Number 15 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Invite Jack and his boss to the kickoff meeting",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" kickoff meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my team tomorrow at 9 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want Tom and his manager to meet with me on Wednesday , and Jim plus his boss too .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Book a meeting with Joe 's manager this week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joe \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeek ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a suit fitting with my team after my afternoon sales call on Thursday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) :subject ( ?~= # ( String \" sales call \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting with Toga 's manager on Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Toga \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Abby and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to make an appointment Emily 's boss at 10 am next Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Emily \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "add a date for a session with Kerry and her manager for this afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kerry \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kerry \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) :subject ( ?= # ( String \" date for a session \" ) ) ) ) ) )"
    },
    {
        "question": "I need to be with my whole team for this weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeekend ) ) ) ) ) )"
    },
    {
        "question": "I am meeting with kim and her manager tomorrow in Cleveland",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Cleveland \" ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with James and Mary 's managers .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "My pay raise meeting is on Friday with Dan Chenlo and his manager in meeting room 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Chenlo \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Chenlo \" ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" meeting room 3 \" ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" pay raise meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Sarah and her boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Invite my boss and his team to a party tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" party \" ) ) ) ) ) )"
    },
    {
        "question": "Please create lunch with boss tomorrow at 11 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Jesse Rosenfeld and his team next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Dan Schoffel 's reports",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Lunch date with co - workers at City Center Park tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" City Center Park \" ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" Lunch date \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting next Monday with Louise and her manager around 10 AM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Louise \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Louise \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "put business meeting on monday with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" business meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Please create lunch with boss tomorrow at 11 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "ok , now can I set a team meeting with Terry 's manager on tuesday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Terry \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Jake , Elli , and both of their managers for this Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule me a meeting with Lax 's team , but exclude Jake",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lax \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule meeting with Marta 's boss this Monday at 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Marta \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Kim 's direct reports too .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a lunch with James and Mary and ensure you invite both their bosses",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Now make an appointment with Dan Morton and team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Morton \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Morton \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Slot in an appointment with my team tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I need to make a meeting with Kim , her boss , David Crim , and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a meeting with Tony 's manager on Wednesday in the afternoon , preferably after 3 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tony \" ) ) ) ) ) ) ) :start ( OnDateAfterTime :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) )"
    },
    {
        "question": "can you schedule the meeting with Violet 's manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Violet \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a lunch with Jake Cobb 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake Cobb \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Hello , can you schedule my dentist appointment to be for next Tuesday at 3 : 00 PM with Jake , his manager , Elli and her manager please ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Book an hour long meeting with Jill and her supervisor .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jill \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jill \" ) ) ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) ) ) ) )"
    },
    {
        "question": "Add a movie event with my team for Thursday night at 8 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" movie \" ) ) ) ) ) )"
    },
    {
        "question": "Set a meeting with Jake and his team members for tomorrow at 12 : 00 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 12 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you also note that I met with my Supervisor last Wednesday at 3 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( previousDayOfWeek ( Today ) # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Lets make a meal with my team tonight but do not invite Abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) :subject ( ?= # ( String \" meal \" ) ) ) ) ) )"
    },
    {
        "question": "schedule with my team a meeting for today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting at 10 AM with Lisa and her supervisor ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lisa \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lisa \" ) ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "put manners learning with my boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" manners learning \" ) ) ) ) ) )"
    },
    {
        "question": "Hi , I need you to schedule a meeting for tomorrow with my manager and Elli 's manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Put together a meeting with the team tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm meeting with Kim Possible and her team on tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I will be with Jake and his boss tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "make a meeting with Kim 's reports then",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule Museum Tour with Joe and his boss for this coming Tuesday at 1 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joe \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joe \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Museum Tour \" ) ) ) ) ) )"
    },
    {
        "question": "Please create an even with Hillary and her manager for next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Hillary \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Hillary \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "My meeting with my team is tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Need to make an emergency meeting with Patricia and her boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Patricia \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Patricia \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" emergency meeting \" ) ) ) ) ) )"
    },
    {
        "question": "When Monday 's meeting concludes I have an an appointment with Stacey 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Stacey \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :event ( Constraint[Event] ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Tomorrow morning I will be eating Carrots with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" eating Carrots \" ) ) ) ) ) )"
    },
    {
        "question": "I want you to set up a meeting with Jane , her boss , Jennifer and her manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a dinner with my team but do not include Marton please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Marton \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "fixing with my team members in tour .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" tour \" ) ) ) ) ) )"
    },
    {
        "question": "Make another event for breakfast with Pearson 's boss tomorrow between 9 - 11 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Pearson \" ) ) ) ) ) ) ) :start ( DateTimeAndConstraint :dateTime1 ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) :dateTime2 ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" breakfast \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with karen 's manager Tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" karen \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Kim Possible 's skip manager for 11 am tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Who is my supervisor . Create meeting with Dan",
        "target": "( do ( Yield :output ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks , also make a budget meeting with Ricky and his supervisor in two weeks .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ricky \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ricky \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( adjustByPeriod ( Today ) ( toWeeks # ( Number 2 ) ) ) ) ) :subject ( ?= # ( String \" budget meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a business proposal meeting for tomorrow at 9 am with Monica , her manager , Elli and her boss ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Monica \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Monica \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" business proposal meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Jackson 's manager monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jackson \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "meeting with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make another event for tomorrow at 3 pm with my team but remove Jesse",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please add brunch with Kim and her manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" brunch \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Bill 's manager tomorrow afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Will you schedule a meeting with kim and her boss as well as brad and their boss ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" brad \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" brad \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need an event named \" tailgate \" with my team on Saturday at 9 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" tailgate \" ) ) ) ) ) )"
    },
    {
        "question": "have a meeting on wednesday with Bill and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with my manager Wednesday at 11 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Good , set meeting with Priya 's manager for 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Priya \" ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting with Credence and his boss to watch Fantastic Beasts and Where to Find Them ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Credence \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Credence \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" watch Fantastic Beasts and Where to Find Them \" ) ) ) ) ) )"
    },
    {
        "question": "Put secret planning meeting on my calendar and add Sam and his boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" secret planning meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my team on Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting scheduled with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with the team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add dinner with Will 's maanager for tomorrow at 8 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Will \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "create observation on monday with manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" observation \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule time with Kim Possible 's team on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a business anniversary lunch with my team on Monday at 12 : 00 to 1 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" business anniversary lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Arrange for me to meet with my team later this morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Please create an event with Kim and her skip tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I need another meeting with Kim 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "today night meet my team members",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Abby 's team but not Jesse",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Abby 's skip tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting on Wednesday morning with Ashley and her boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ashley \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ashley \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Carla 's manager today at 3 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carla \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up an event with my team for Sunday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Arrange a meeting with all members for later next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( LateDateRange :dateRange ( NextWeekList ) ) ) ) ) ) )"
    },
    {
        "question": "Make a dinner appointment with Brenda and Amanda plus their bosses on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brenda \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brenda \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amanda \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amanda \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" dinner appointment \" ) ) ) ) ) )"
    },
    {
        "question": "make meeting kim 's team tomorrow at 12 . 30 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 12 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a new event for Dinner with Boss at Olive Garden tomorrow from 7 : 00 to 8 : 00 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 7 ) ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Olive Garden \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" Dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Can I meet up with the team at all on Friday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a dental checkup this weekend with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeekend ) ) :subject ( ?= # ( String \" dental checkup \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting on Tuesday for 2 pm with the whole work group .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a Farewell lunch with Jennifer and her team and Elli and her team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Farewell lunch \" ) ) ) ) ) )"
    },
    {
        "question": "What is the best time next week for me to go meet with my advisor ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "have my entire team attending a coding camp for this entire week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( ThisWeek ) :event ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" coding camp \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a time for me to meet with Amy 's boss ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amy \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a Zoo Event with Jesse Rosenfeld and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Zoo Event \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule another meeting this coming Monday with Abby 's team just right after the staff meeting .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" staff meeting \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with bob 's manager today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" bob \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with the whole team at 430 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( NextTime :time ( HourMinutePm :hours # ( Number 4 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Let 's get something going with My team , without Dan Marton , for the end of the week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( LateDateRange :dateRange ( ThisWeek ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with the team for tomorrow morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Kim 's reports tomorrow at 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "i need a coffee meeting with my team at noon that is not on the weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeFromDowConstraint :dowConstraint ( negate ( Weekend ) ) :time ( Noon ) ) :subject ( ?= # ( String \" coffee meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with my team for next Thursday at 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to have a review with John 's manager at 4 today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" review \" ) ) ) ) ) )"
    },
    {
        "question": "I want to schedule Plan Sarah 's Birthday Party with my manager for tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" Plan Sarah's Birthday Party \" ) ) ) ) ) )"
    },
    {
        "question": "setup up a sales meeting with Sam and his manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" sales meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Rebecca 's manager today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rebecca \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Add dinner with Manuel 's boss for this Friday at 8 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Manuel \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Hello , I need to add a Pizza Party with Kim 's team , including Elli",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" Pizza Party \" ) ) ) ) ) )"
    },
    {
        "question": "After the new hires event , I want to attend a sales meeting with Ann 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ann \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" new hires \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" sales meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I have a lunch meeting with my boss on thursday at 1 pm , at the chili 's",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" chili's \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with bob 's manager between 1 - 5 pm for 20 minutes on thursday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" bob \" ) ) ) ) ) ) ) :duration ( ?= ( toMinutes # ( Number 20.0 ) ) ) :start ( DateTimeAndConstraint :dateTime1 ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :dateTime2 ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Book a meeting with Cornelia 's team for the 6 th at 5 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cornelia \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 6 ) ) :time ( NumberAM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Once my lunch meeting ends , I 'm going to see Carl 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carl \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" lunch meeting \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "i have to lunch in my team members .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "schedule an appointment with my manager tomorrow at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hello i need to make a meeting with Maya and her team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Maya \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Maya \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a staff meeting with Tim , Tom and Tom 's Boss tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" staff meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I would like a meeting with the team this coming Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a lunch meeting with Marton and his skip manager ? Let 's do it for tomorrow at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Marton \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Marton \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Lets go to Dinner with my Team and Crim tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Crim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" Dinner \" ) ) ) ) ) )"
    },
    {
        "question": "schedule time with Kim 's team on Saturday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Alicia and her manager on Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alicia \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alicia \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set another meeting with my team tomorrow afternoon and include Bill Jeffcoat .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill Jeffcoat \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Add conference call with my team to my schedule for this afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) :subject ( ?= # ( String \" conference call \" ) ) ) ) ) )"
    },
    {
        "question": "Right after lunch schedule a meeting with tim 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" tim \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" lunch \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "put meet with rogers team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" rogers \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" meet \" ) ) ) ) ) )"
    },
    {
        "question": "Make an event with Belinda 's boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Belinda \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a project meeting with Bob and his boss tomorrow at 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bob \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bob \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" project meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with jason and his boss about marketing .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jason \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jason \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" marketing \" ) ) ) ) ) )"
    },
    {
        "question": "Can you set up an event with Schoffel 's reports for Monday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Schoffel \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put on schedule workout with boss on Friday at 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" workout \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a communications meeting with Abby and her boss on Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" communications meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Book a meeting with Sarah and her supervisors this Monday at 12 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Abby and her skip",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Rob 's boss tomorrow at 1 : 45",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rob \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 45 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Now make a party and invite my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" party \" ) ) ) ) ) )"
    },
    {
        "question": "Thanks , now I need to set up a year end review with Ellen and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ellen \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ellen \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" year end review \" ) ) ) ) ) )"
    },
    {
        "question": "Create an event called \" Memo \" and add my reports",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" Memo \" ) ) ) ) ) )"
    },
    {
        "question": "After my meeting with the team on Friday , I need to attend another meeting with Steve 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Steve \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :event ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Who is my manager ? Let 's make a meeting with my manager and his team",
        "target": "( do ( Yield :output ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want a meeting with Karen and her boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karen \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karen \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have to see Arthur and his boss on the 18 th around 4 pm if possible .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Arthur \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Arthur \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 18 ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with the whole team at 4 : 30 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( NextTime :time ( HourMinutePm :hours # ( Number 4 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I also want a tea break with my skip early on the 26 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Early ) :date ( nextDayOfMonth ( Today ) # ( Number 26 ) ) ) :subject ( ?= # ( String \" tea break \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add an event with John 's manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please create a meeting with Matthew and his managers at 3 p today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matthew \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matthew \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks , also I need a brunch at 1100 hours on Friday with the boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinuteMilitary :hours # ( Number 11 ) :minutes # ( Number 0 ) ) ) ) :subject ( ?= # ( String \" brunch \" ) ) ) ) ) )"
    },
    {
        "question": "Make me a dinner with my Team but exclude Thanos",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Thanos \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "My team is requesting that we have a meeting on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "With my team , I 'll have a meeting today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "can you add a meeting with Amy and Pam with their bosses on the 14 th ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amy \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Pam \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amy \" ) ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Pam \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 14 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a party with Abby 's team and Crim",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Crim \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" party \" ) ) ) ) ) )"
    },
    {
        "question": "i wanna meet Lian 's manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lian \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a code meeting with sarah and her manager in this week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" sarah \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" sarah \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeek ) ) :subject ( ?= # ( String \" code meeting \" ) ) ) ) ) )"
    },
    {
        "question": "create a lunch after shopping with John and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" shopping \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "can you add an appointment with Henny 's boss at 10 am on Tuesday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Henny \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Ok , can you schedule a football game with Dan and his team ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" football game \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a finance meeting with Ted and his team on Thursday afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ted \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ted \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) :subject ( ?= # ( String \" finance meeting \" ) ) ) ) ) )"
    },
    {
        "question": "i need meeting with Jennifer , her boss , Elli and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "make dinner with manager tomorrow 8 . 00 to 8 . 30 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) :time ( HourMinutePm :hours # ( Number 8 ) :minutes # ( Number 30.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Make an appointment with Terry and his supervisor",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Terry \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Terry \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with David Crim and team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set a meeting with David Crim and his team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "set up a meeting with the team for Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Joanne and her skip tomorrow morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joanne \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joanne \" ) ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Put a birthday party on my calendar with my boss and my coworkers amanda , noelle and rob .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" amanda \" ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" noelle \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" rob \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" birthday party \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with Amy 's manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amy \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Elli 's skip this afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Ok . Instead add meeting with Riles and her boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Riles \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Riles \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Carol ; please put a meeting with her manager on my calendar tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carol \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Do I have any time I can see my team next week ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "meeting with Jake and his supervisor .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks . Can you add a meeting with Sharon 's manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sharon \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule drinks with the team for Friday evening .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Evening ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) :subject ( ?= # ( String \" drinks \" ) ) ) ) ) )"
    },
    {
        "question": "Please set up a meeting with the team on Monday at breakfast",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( Breakfast ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a Brainstorming Meeting with my boss for Thursday at 11 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" Brainstorming Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "At 2 tomorrow set a one - on - one with Isca 's manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Isca \" ) ) ) ) ) ) ) :isOneOnOne ( ?= # ( Boolean true ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a lunch event with Jake 's Boss 's Boss for Friday at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Create on Tuesday afternoon a meeting with my team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Pam 's boss Wednesday at 3",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Pam \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I will be with my team in Kansas tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Kansas \" ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with my team but without Abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add to calendar a pitch meeting with Ross and his manager on Thursday at 10 : 30 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ross \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ross \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 10.0 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" pitch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to create an event for lunch with Luis ' manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Luis \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Make me an event with Jake and his boss at the survey site .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" the survey site \" ) ) ) ) ) )"
    },
    {
        "question": "make a holiday party with Dan Schoffel and his team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" holiday party \" ) ) ) ) ) )"
    },
    {
        "question": "Create a time slot for a meeting with my team tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a round table with David Crim and David Lax and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" round table \" ) ) ) ) ) )"
    },
    {
        "question": "I 'll be meeting Angela and her manager 9 : 30 Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Angela \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Angela \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 9 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make me a meeting with Kim , her manager , Elli , and her manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "add an appointment with my boss on Monday at 11 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need an appointment with Steven and his boss for tomorrow night .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Steven \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Steven \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Elli and her team on Wednesday afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you set a meeting with my managers manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks , schedule a new hire planning session on Friday at 2 : 00 pm . with Abby and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" new hire planning session \" ) ) ) ) ) )"
    },
    {
        "question": "I need to be with my team tomorrow for 918 days",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :nonEmptyBase ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] ) :period ( toDays # ( Number 918 ) ) :startDate ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Who is Kevin 's skip ? I need a meeting with both of them before the end of the week .",
        "target": "( do ( Yield :output ( FindManager :recipient ( FindManager :recipient x0 ) ) ) ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kevin \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient x0 ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeek ) ) ) ) ) ) )"
    },
    {
        "question": "Add an appointment with my team for Thursday at 5 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thursday I have a lunch with boss at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a call with my manager Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" call \" ) ) ) ) ) )"
    },
    {
        "question": "ask all the staff members to come to starbucks for lunch",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" starbucks \" ) ) ) ) ) )"
    },
    {
        "question": "create meeting with my boss on monday at 1",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting with Jana and her manager next Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jana \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jana \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put on my calendar meeting with my manager on Thursday at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "The team and I will meet on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a finance meeting with Lous and his team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lous \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lous \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" finance meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Give me a meeting on Tuesday with Loraine and Jimmy and I want their supervisors there as well .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Loraine \" ) ) ) ) ) ) ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jimmy \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Loraine \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jimmy \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Dan Schoffel 's reports",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "My date with my team is on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" date \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Jake 's skip .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to spend the weekend with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeekend ) ) ) ) ) )"
    },
    {
        "question": "Organize a meeting for me and Sally 's manager at 10 am . Call it tea break and put it at The Ruby Slipper on Canal Street .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sally \" ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" The Ruby Slipper on Canal Street \" ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" tea break \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule conference with the team for next Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" conference \" ) ) ) ) ) )"
    },
    {
        "question": "Thanks , please schedule a meet - and - greet with Abby and her team for Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" meet-and-greet \" ) ) ) ) ) )"
    },
    {
        "question": "Add meeting with boss to tomorrow at 2 : 15 pm for 30 minutes .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :duration ( ?= ( toMinutes # ( Number 30.0 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 15 ) ) ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with Jacob 's manager Wednesday afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jacob \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Yes , please create a meeting with Paula and her supervisor , on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paula \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paula \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "create meeting with my manager tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I want to meet with Jake and his supervisor on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "add a meeting with Amanda 's boss tomorrow at 2 pm calling it catch up",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amanda \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" catch up \" ) ) ) ) ) )"
    },
    {
        "question": "I must put together a meeting with my team this afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "TOMORROW SET SCHEDULE TO MEET Cindy 's MANAGER AT 10 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cindy \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Great , I want to put a conference with Lenny and his supervisor on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lenny \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lenny \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" conference \" ) ) ) ) ) )"
    },
    {
        "question": "I want a meeting scheduled on Monday with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "i have to dinner my team members",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with Crim 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Crim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting with Hunter 's boss on December 15 , 2019 sometime between 9 am and noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Hunter \" ) ) ) ) ) ) ) :start ( DateTimeAndConstraint :dateTime1 ( DateAtTimeWithDefaults :date ( MDY :day # ( Number 15 ) :month # ( Month \" DECEMBER \" ) :year # ( Number 2019 ) ) :time ( NumberAM :number # ( Number 9 ) ) ) :dateTime2 ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( MDY :day # ( Number 15 ) :month # ( Month \" DECEMBER \" ) :year # ( Number 2019 ) ) :time ( NumberAM :number # ( Number 9 ) ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "I want to meet with Marge 's manager Tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Marge \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting room in Seattle with my team tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" Seattle \" ) ) ( roomRequest ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Find 45 minutes on Friday for a meeting with Ham and his supervisor",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ham \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ham \" ) ) ) ) ) ) ) ) :duration ( ?= ( toMinutes # ( Number 45 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "i 'd also like to have a team meetings with all team members next Tuesday morning at 9 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" team meetings \" ) ) ) ) ) )"
    },
    {
        "question": "I 'd like to put a meeting on my calendar for coffee with my boss at Macrina Bakery on Wednesday at their Belltown location .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Macrina Bakery \" ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) :subject ( ?= # ( String \" coffee \" ) ) ) ) ) )"
    },
    {
        "question": "I need a dinner date with Kim Possible and her skip tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" dinner date \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make an appointment tomorrow with tom 's manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" tom \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Please create lunch with boss tomorrow at 11 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Meeting with Abby and her Supervisor ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "create a meeting with rory 's boss next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rory \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "make a lunch event with my boss at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule Apple Picking with my boss for tomorrow at 10 am ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" Apple Picking \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Kim 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "schedula a meeting with John 's manager today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting between Nancy , James and their two bosses ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Nancy \" ) ) ) ) ) ) ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Nancy \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting with my boss two Tuesdays from today at 3 : 00 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( nextDayOfWeek ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a dinner with Simone , his boss , Janet and her boss at the cafeteria",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Simone \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Simone \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janet \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janet \" ) ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" cafeteria \" ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I want a meeting with my team and dan schoffel 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" dan schoffel \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting with Tara and her manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tara \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tara \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you please set up a meeting for me with Sara and Max and their managers tomorrow afternoon around 1 ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sara \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sara \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Max \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Max \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make me an event for 3 pm tomorrow with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a review meeting with David Lax and his team on Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) :subject ( ?= # ( String \" review meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Hey lets make a meeting with my team tomorrow from 1 till end of work day .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a luncheon dance party with Dan Schoffel and his team on October 31 st at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 31 ) :month # ( Month \" OCTOBER \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" luncheon dance party \" ) ) ) ) ) )"
    },
    {
        "question": "After the comedy special I need to set something up with Lloyd 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lloyd \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" comedy special \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Book a meeting with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule lunch with Jennifer Watts ' team on the 11 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer Watts \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I would like to meet with my manager earlier than monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?< ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "make an appointment with my Rachel 's boss at today 6 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rachel \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting this Friday with Kyle and his manager at 1 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kyle \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kyle \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Abby Gonano and her team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby Gonano \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby Gonano \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "add a meeting with all team members tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I also need a team meeting with everyone on my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Thursday I have a lunch with boss at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Please make an appointment with the boss for 3 pm tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up an event with Greg and his boss Friday at 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Greg \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Greg \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with Jake and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "create a meeting with Elli , kim and their managers for thursday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an appointment with my team for next Monday at 9 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule the appointment with the boss for Monday at 2 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Next Monday I have meeting at 10 am with Ella 's boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ella \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to have brunch with Emily and her manager this weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Emily \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Emily \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeekend ) ) :subject ( ?= # ( String \" brunch \" ) ) ) ) ) )"
    },
    {
        "question": "Help in making an appointment with the staff tomorrow at 11 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Drinking coffee with boss at 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" Drinking coffee \" ) ) ) ) ) )"
    },
    {
        "question": "i need a meeting with kim , crim , and their bosses",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" crim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" crim \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Show event list for this week . Add meeting with my team and jennifer .",
        "target": "( do ( Yield :output ( FindEventWrapperWithDefaults :constraint ( EventDuringRange :event ( Constraint[Event] ) :range ( ThisWeek ) ) ) ) ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jennifer \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have to see my team on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "set up meeting with Scott 's boss for monday at 12",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Scott \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule an appointment with Randy 's team after I finish my manicure .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Randy \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" manicure \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please put a meeting with Lous and his manager tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lous \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lous \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Invite Sam , Denice and their respective supervisors to tomorrow 's morning meeting",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Denice \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Denice \" ) ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "I have a Dinner Meeting with Paul and his boss at 7 pm on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paul \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paul \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" Dinner Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule Intervention with Boss and invite Frodo for tomorrow at 1 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Frodo \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Intervention \" ) ) ) ) ) )"
    },
    {
        "question": "please make meet with kim possible team on tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim possible \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Add to calendar a evaluation hearing with John and his boss on Tuesday at 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" evaluation hearing \" ) ) ) ) ) )"
    },
    {
        "question": "Also , book a meeting with Sala 's manager next Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sala \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make an event for Fred and his supervisor for golf on Friday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fred \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fred \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" golf \" ) ) ) ) ) )"
    },
    {
        "question": "I need an event for tomorrow with Lax 's team but with Abby too",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lax \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Hello ! I need to you to plan a meeting with Jake and his boss and David Lax and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "schedule dinner with the team after the game",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" game \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Let 's start over . Add a meeting with boss tomorrow at 1 : 30 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with my boss to talk about company goals tomorrow at 2 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" talk about company goals \" ) ) ) ) ) )"
    },
    {
        "question": "Okay , add a one - on - one with my supervisor this afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :isOneOnOne ( ?= # ( Boolean true ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Set up a training with Fred and his manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fred \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fred \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" training \" ) ) ) ) ) )"
    },
    {
        "question": "Please make a conference call with Abby and her skip",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" conference call \" ) ) ) ) ) )"
    },
    {
        "question": "Now schedule a follow - up party , with my team but exclude Jesse .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" follow-up party \" ) ) ) ) ) )"
    },
    {
        "question": "i need a meet with berlin 's boss tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" berlin \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Can you set a meeting with Kim 's skip tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule meeting with the Supervisor on monday at 10 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up lunch tomorrow with Jake and his boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I want to be with my team tomorrow in Bellevue",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Bellevue \" ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I am meeting with my team tomorrow at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Nelly , Tony and their respective bosses to be conducted tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Nelly \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tony \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Nelly \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tony \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Create meeting with Cole 's boss for Monday at 2 pm to 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cole \" ) ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a event for Ben with team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ben \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ben \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with John and his manager today at 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can I get a meeting with my team on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with myself and Tyreek 's supervisor tomorrow at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tyreek \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "CHECK FOR THE AVAILABILITY OF SUSIE 'S SUPERVISOR",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" SUSIE \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a Graphic Design Seminar at 1 pm on Friday with Casey and her manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Casey \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Casey \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Graphic Design Seminar \" ) ) ) ) ) )"
    },
    {
        "question": "Yes . Create a project follow up with Brenda and her boss tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brenda \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brenda \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" project follow up \" ) ) ) ) ) )"
    },
    {
        "question": "I need an appointment to update memos with John and his manager , preferably tomorrow at 5 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" update memos \" ) ) ) ) ) )"
    },
    {
        "question": "Hello i need to make a meeting with Maya and her team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Maya \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Maya \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with Abby , Elli and their managers",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a morning bagel run , with my team but do n't include Dan Marton .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" morning bagel run \" ) ) ) ) ) )"
    },
    {
        "question": "I need to make an appointment with my boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule lunch at lunch on Friday with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Lunch ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "book a meeting with sam and his manager today before noon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" sam \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" sam \" ) ) ) ) ) ) ) ) :start ( OnDateBeforeTime :date ( Today ) :time ( Noon ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Tammy 's managers tomorrow morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tammy \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Make me an event with my team for tomorrow at 3 : 57 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinuteAm :hours # ( Number 3 ) :minutes # ( Number 57 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule meeting with Carl and his boss at 2 : 30 today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carl \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carl \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule something with my manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule Art Lesson with Martha and her boss for 1 pm on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Martha \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Martha \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Art Lesson \" ) ) ) ) ) )"
    },
    {
        "question": "book a meeting with Ken and his manager tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ken \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ken \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I want to have coffee with James , May and their respective supervisors at the cafeteria this afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" May \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" May \" ) ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" cafeteria \" ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) :subject ( ?= # ( String \" coffee \" ) ) ) ) ) )"
    },
    {
        "question": "The is going to be a Surprise Party for Lucy and Boss for July 25 th at 1 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lucy \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lucy \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 25 ) :month # ( Month \" JULY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Surprise Party \" ) ) ) ) ) )"
    },
    {
        "question": "I will be in Seattle tomorrow with my team . Can you get us a room ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" Seattle \" ) ) ( roomRequest ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Friday I have a meeting with coworkers at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule an open - bar party for my team but exclude Abby .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" open-bar party \" ) ) ) ) ) )"
    },
    {
        "question": "Please put a date to meet with Shirley and boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Shirley \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Shirley \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" date \" ) ) ) ) ) )"
    },
    {
        "question": "put dinner meeting with yulella 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" yulella \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to see Jill and her whole team today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jill \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jill \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with my boss on Thursday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with my boss tomorrow before 11 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( OnDateBeforeTime :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) )"
    },
    {
        "question": "put meeting with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put me in a meeting with David Lax 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event called lunch with James , Mary and their bosses",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "create work conference and invite supervisor",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" work conference \" ) ) ) ) ) )"
    },
    {
        "question": "create work thing on tuesday with my boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) :subject ( ?= # ( String \" work thing \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Kim 's report on Friday at 3 : 00 pm to talk about contracts .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" talk about contracts \" ) ) ) ) ) )"
    },
    {
        "question": "i want to meet alice 's manager tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" alice \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "create a meeting with my team on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "oh ok make a meeting with my boos",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "From the 4 th to the 23 rd I will be with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :nonEmptyBase ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( nextDayOfMonth ( Today ) # ( Number 4 ) ) :date2 ( nextDayOfMonth ( nextDayOfMonth ( Today ) # ( Number 4 ) ) # ( Number 23 ) ) ) :event ( Constraint[Event] ) ) ) ) ) )"
    },
    {
        "question": "create meeting with Sam 's boss on tuesday night",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a conference with Kim Possible and her team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" conference \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a meeting with Michael , Elli and both of their managers for noon tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Michael \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Michael \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Meghan , James and their supervisors this week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Meghan \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Meghan \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeek ) ) ) ) ) )"
    },
    {
        "question": "Add meeting with boss to tomorrow at 2 : 15 pm for 30 minutes .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :duration ( ?= ( toMinutes # ( Number 30.0 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 15 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I will need to schedule a meeting with Craig and his immediate supervisor for next Monday at 9 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Craig \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Craig \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please make an event and invite my manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Josh and his boss are coming to town tomorrow and I need to pick them up from the airport at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Josh \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Josh \" ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" airport \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with those who report to me for Thursday afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "have the team meet on Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "meeting with Abby and her manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "create work thing on saturday with boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" work thing \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting David Crim 's team on Monday at 4 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hey . Make an event with Kim 's team but make sure Jesse is n't there",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "please make a meet with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to have a meeting with my team September 3 rd at 11 : 00 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 3 ) :month # ( Month \" SEPTEMBER \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need and event with Frank and his boss for Tuesday at 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Frank \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Frank \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set a meeting with the team for Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "i wanna meet Marigold 's boss at today 3 pm to 6 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Marigold \" ) ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a lunch with Dante and his boss for two days from today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dante \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dante \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( adjustByPeriod ( Today ) ( toDays # ( Number 2 ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Please add meeting with June 's Manager on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" June \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a planning session with Bob and his boss at Chili 's on Thursday at 4 : 00 pm for 1 hour .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bob \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bob \" ) ) ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :location ( ?= # ( LocationKeyphrase \" Chili's \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" planning session \" ) ) ) ) ) )"
    },
    {
        "question": "put on \" appointment \" with manager tomorrow morning 9 . 00 to 9 . 00 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Let 's make a meeting called pay raise with Bonnie 's manager on friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bonnie \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" pay raise \" ) ) ) ) ) )"
    },
    {
        "question": "Make an event at 2 pm tomorrow my Abby 's team but without Jesse",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add dinner with Karina and her manager tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karina \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karina \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule an hour long meeting with Keith 's team directly after the morning meeting .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Keith \" ) ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDateWithTimeRange :event ( EventOnDate :date ( Today ) :event ( Constraint[Event] ) ) :timeRange ( Morning ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a picnic with David Crim and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" picnic \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Jake 's team for next friday please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting with Mr. Price , Ruby 's Manager , for Friday August 9 th at 10 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mr. Price \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ruby \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 9 ) :month # ( Month \" AUGUST \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "SET UP A MEETING WITH MY WORKERS AT NOON",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( NextTime :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "I need a end of day meeting today with my team before our presentation tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Add a team meeting with Jake , his boss , Elli and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule meeting with boss for Tuesday the 26 th at 1 : 00 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 26 ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Elli , her manager , Kim and her supervisor please for Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to create an event to meet with my boss tomorrow at 9 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a date with Marton and his skip Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Marton \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Marton \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" date \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a team meeting with my team on December 24 th at 8 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 24 ) :month # ( Month \" DECEMBER \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with Rokaru 's boss at 3 pm tomorrow about scheduling .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rokaru \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" about scheduling \" ) ) ) ) ) )"
    },
    {
        "question": "I had a one - on - one with my manager last monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :isOneOnOne ( ?= # ( Boolean true ) ) :start ( Constraint[DateTime] :date ( ?= ( previousDayOfWeek ( Today ) # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with David Crim and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to make an appointment with Terry and his supervisor and Brad and his manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Terry \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Terry \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brad \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brad \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "It is urgent that I meet with my team tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Book a meeting with the manager in a room in Cambridge tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" Cambridge \" ) ) ( roomRequest ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Can you invite my entire team to a staff meeting monday morning at 8 ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" staff meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Add an event with my team for tomorrow morning at 8 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add an event with David Crim and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to be with Abby and her boss tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I need another meeting with my team on Friday at 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make me a Press Conference with my team at around 7 tomorrow evening ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( AroundDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" Press Conference \" ) ) ) ) ) )"
    },
    {
        "question": "please make a meet with my manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can I meet with Jonathan 's manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jonathan \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hi ! Can you set up a meeting with Elli Parker 's team for this afternoon ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli Parker \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Get the team together for a meeting next Friday at 2 : 30 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with Dan Schoffel and his team on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "After lunch on Wedneday I would like to see Carl 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carl \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" lunch \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to meet with Wendy and her manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Wendy \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Wendy \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule Lunch with David Lax 's team right after the finance meeting",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" finance meeting \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Kevin and his boss for next Tuesday at 5 pm . We 'll need a conference room at City Center .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kevin \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kevin \" ) ) ) ) ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" City Center \" ) ) ( roomRequest ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set a meeting with Bob 's team right after lunch .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bob \" ) ) ) ) ) ) ) :start ( GreaterThanFromStructDateTime :dateTimeConstraint ( ?= ( NextTime :time ( Lunch ) ) ) ) ) ) ) )"
    },
    {
        "question": "How about a meeting with my team on Monday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "When the Science briefing ends I would like to see Gabriel and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Gabriel \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Gabriel \" ) ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" Science briefing \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule dinner at 6 tonight with my team but without Jesse",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Noelle and her manager ROb on Monday night",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Noelle \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Noelle \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add an event with Abby and her boss tomorrow at 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks , set up a dinner with Kim Possible and her team tomorrow at 5 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting with both Lisa and Kim 's manager for 9 AM tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lisa \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Plan a meeting with Haley , Gift and their bosses for Tuesday in my office .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Haley \" ) ) ) ) ) ) ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Gift \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Haley \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Gift \" ) ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" my office \" ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "when can fix a meeting with my staff",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule Road Trip on July 29 th at 8 am with Scott and his manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Scott \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Scott \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 29 ) :month # ( Month \" JULY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" Road Trip \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my department manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to meet with Jim 's manager next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Hey lets make a PR meeting with my team this Friday from 1 to end of work day .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" PR meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need a 1 hour Intervention with Dani and her boss on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dani \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dani \" ) ) ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" Intervention \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a dinner date with Jake and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner date \" ) ) ) ) ) )"
    },
    {
        "question": "Yes , schedule me for lunch with my boss Friday at 1 p.m. and show me as busy during that time .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Set a reminder for dinner with Tessa 's boss at 6 : 30 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tessa \" ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( HourMinutePm :hours # ( Number 6 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I have a budget meeting with Aaron and his manager tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Aaron \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Aaron \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" budget meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Now add a meeting with DAn and his manager please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" DAn \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" DAn \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hi , please invite Ron 's manager to dinner !",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ron \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner! \" ) ) ) ) ) )"
    },
    {
        "question": "I definitely need to have a meeting with the team Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "add Abby 's team to a meeting please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Meeting with the team , next Thursday 8 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to book 45 minutes with Jessica and her boss for tomorrow at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jessica \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jessica \" ) ) ) ) ) ) ) ) :duration ( ?= ( toMinutes # ( Number 45 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with my team on Monday at noon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "create meeting with Sean 's boss at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sean \" ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting with Sam and Sally tomorrow at 5 pm and their managers are coming too .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sally \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sally \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "schedule time with Gina and her boss on Thursday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Gina \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Gina \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "make an appointment with my boss in about 35 minutes",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( adjustByPeriodDuration ( Now ) ( PeriodDuration :duration ( toMinutes # ( Number 35 ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "After the budget meeting I need to see Mark and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mark \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mark \" ) ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" budget meeting \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need an appointment with the manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add a baseball event with my team for Tuesday night at 6 ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" baseball \" ) ) ) ) ) )"
    },
    {
        "question": "I want you to add my meeting with Dan Schoffel 's team that was scheduled right after dinner .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" dinner \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting tomorrow with the staff .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want a meeting with john and his boss for Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" john \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" john \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks . Can you also put that I will be hanging out with Jennifer , her manager , Jimmy and his boss this Saturday at 2 PM ?",
        "target": "( do ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jimmy \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jimmy \" ) ) ) ) ) ) ) ) ) ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" hanging out \" ) ) ) ) ) ) )"
    },
    {
        "question": "Hi - See if the team is available for an Outward Bound trip next Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) :subject ( ?= # ( String \" Outward Bound trip \" ) ) ) ) ) )"
    },
    {
        "question": "Put a meeting with Chuck 's team on my calendar right after I am done meeting with Tom .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chuck \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipientConstraint :recipientConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you set up a meeting with Sandy and the rest of the team this tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sandy \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sandy \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set me up a meeting with Carol 's boss for sometime after lunch today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carol \" ) ) ) ) ) ) ) :start ( OnDateAfterTime :date ( Today ) :time ( Lunch ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting on Thursday with my manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting with Abby and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up that meeting with Jon and his manager about the Excel spreadsheets",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jon \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jon \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Excel spreadsheets \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with Alan 's manager at 5 pm Tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alan \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a new Office Party Planning event for Monday at 1 with Jennifer , her boss , Elli and her manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Office Party Planning \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make a meeting with Dan Marton 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Now schedule a working lunch with my team and add Jenn and her team ,",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jenn \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jenn \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" working lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Thanks . Also need to meet with Lauren and her team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lauren \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lauren \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "set up a meeting with my Jake Farm 's manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake Farm \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a lunch with my boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Simon 's team ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Simon \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Ross 's team right after the meeting with Rachel .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ross \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipientConstraint :recipientConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rachel \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Also make a room in Seattle for my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" Seattle \" ) ) ( roomRequest ) ) ) ) ) )"
    },
    {
        "question": "Create an appointment with the team on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hi , I 'm well . looking to schedule a meeting with my manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add a meeting next week with Elli Parker and her team ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli Parker \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli Parker \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Set up meeting with coworkers at 8 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a lunch meeting with Carolyn 's manager Thursday at 12 : 30 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carolyn \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( HourMinutePm :hours # ( Number 12 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule an event called \" lunch meeting with the team \" include jack and james and jack 's manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jack \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" james \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jack \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch meeting with the team \" ) ) ) ) ) )"
    },
    {
        "question": "Please add a Sales Team meeting tomorrow with Alayna and her Supervisor at 3 : 15 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alayna \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alayna \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 15 ) ) ) ) :subject ( ?= # ( String \" Sales Team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "After the conference I would like to set something up with Wendy and her team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Wendy \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Wendy \" ) ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" conference \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "thank you , please also schedule a meeting with David Lax and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a dentist appointment with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Sandra and her boss tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sandra \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sandra \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Okay , set up a meeting with David Lax and his team on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an Event with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to get together with my boss for a meeting today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "I need to add an appointment with Katie and her boss Friday at 11 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Katie \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Katie \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Kyle 's boss tomorrow at 12 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kyle \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 12 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Need to meet to talk about code with Amy and her supervisor",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amy \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amy \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" talk about code \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with Kim and her skip on Monday",
        "target": "( do # ( PersonName \" Kim \" ) ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a brunch date with Dan Marton 's skip for friday morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) :subject ( ?= # ( String \" brunch date \" ) ) ) ) ) )"
    },
    {
        "question": "I need a suit session with tony stark and the team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" tony stark \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" tony stark \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" suit session \" ) ) ) ) ) )"
    },
    {
        "question": "Find 1 hour on Wednesday to meet with Karl and his supervisor .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karl \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karl \" ) ) ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a Staff Gathering at 1 pm tomorrow with Colleen and her manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Colleen \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Colleen \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Staff Gathering \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Kim and her boss 's boss tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting at Stanford University with my boss at 5 PM today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Stanford University \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "schedule dinner with Sue 's boss to one hour",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sue \" ) ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Set a meeting with Jim and his supervisor in the main conference room tomorrow morning at 8 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" main conference room \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Pencil in a meeting with Jennifer and her boss as well as Crim and his boss please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Crim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Crim \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a lunch with Elli 's skip ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I want to meet with my team at the end of day tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( EndOfWorkDay ) ) ) ) ) ) )"
    },
    {
        "question": "Please set up a meeting with David Crim and his supervisor , and have Jake and his supervisor there as well .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a Golf Trip with Crim 's team and Jesse",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Crim \" ) ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Crim \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Golf Trip \" ) ) ) ) ) )"
    },
    {
        "question": "Can you also schedule a meeting for tomorrow morning with rob and his boss , i 'm not sure what his name ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" rob \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" rob \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "add lunch with noelle and her superviosr tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" noelle \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" noelle \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm seeing RIck and his boss for lunch tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" RIck \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" RIck \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting with Carla and her manager Saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carla \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carla \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need you to invite James , Bill and their boss to a meeting on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with julie 's manager for Friday after lunch",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" julie \" ) ) ) ) ) ) ) :start ( OnDateAfterTime :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Lunch ) ) ) ) ) )"
    },
    {
        "question": "Can you set up a meeting with Jane , her supervisor , Simone and her supervisor ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Simone \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Simone \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "add team building with both Noelle and Rob and their bosses",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Noelle \" ) ) ) ) ) ) ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rob \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Noelle \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rob \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" team building \" ) ) ) ) ) )"
    },
    {
        "question": "I am meeting with Abby and her manager later today in Seattle",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Seattle \" ) ) :start ( DateTimeConstraint :constraint ( Late ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Confirm meeting with Jake and his manager with Elli and his manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Abby and her boss for tomorrow at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "i need an event with Jake , Elli , and their bosses",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my boss tonight",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "I 'd like a meeting with my team for Monday at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I wanna meet with my manager at today 7 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 7 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an appointment was Sam 's manager on my next free weekday slot .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add meeting with boss to tomorrow at 2 : 15 pm for 30 minutes .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :duration ( ?= ( toMinutes # ( Number 30.0 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 15 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add meeting with boss at 9 : 00 for next friday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I will be with my team for the 3 rd through the 7 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :nonEmptyBase ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( nextDayOfMonth ( Today ) # ( Number 3 ) ) :date2 ( nextDayOfMonth ( nextDayOfMonth ( Today ) # ( Number 3 ) ) # ( Number 7 ) ) ) :event ( Constraint[Event] ) ) ) ) ) )"
    },
    {
        "question": "I want to add a meeting with tommy 's boss next Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" tommy \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting for Friday with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I also need to meet with David Lax and her reports on the 14 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 14 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a birthday party with Abby 's team without Jesse",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" birthday party \" ) ) ) ) ) )"
    },
    {
        "question": "make an event with my manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Great , thanks ! I am going to need a meeting with Karen , Jim , and Pam tomorrow before noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karen \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Pam \" ) ) ) ) ) ) ) :start ( OnDateBeforeTime :date ( Tomorrow ) :time ( Noon ) ) ) ) ) )"
    },
    {
        "question": "Create doctors appointment tomorrow before noon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( ?< ( Noon ) ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a book club meeting tomorrow at 11 : 30 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinuteAm :hours # ( Number 11 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" book club meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Create an event \" getting ready \" from 5 pm to 6 pm on friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" getting ready \" ) ) ) ) ) )"
    },
    {
        "question": "I need to add a meeting with Janet for next Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janet \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a new event - lunch with James tomorrow at 1",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Hi , can you reschedule me a meeting with Ruth on Monday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :event ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ruth \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want a 2 hour hike at 7 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" hike \" ) ) ) ) ) )"
    },
    {
        "question": "Can you also add an event with Barry ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barry \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a 1 - 1 Sunday with Jackson",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jackson \" ) ) ) ) ) ) :isOneOnOne ( ?= # ( Boolean true ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to meet with jessy at morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jessy \" ) ) ) ) ) ) :start ( Constraint[DateTime] :time ( Morning ) ) ) ) ) )"
    },
    {
        "question": "Schedule a team meeting for 8 : 45 AM on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 8 ) :minutes # ( Number 45 ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add a dentist appointment on March 22 at 2 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 22 ) :month # ( Month \" MARCH \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "please set up lunch at applebee 's Saturday at 1 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" applebee's \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule get pizzas for John 's Birthday at 5 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" get pizzas for John's Birthday \" ) ) ) ) ) )"
    },
    {
        "question": "I need 2 hours on monday to check email .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" check email \" ) ) ) ) ) )"
    },
    {
        "question": "add drinks on friday at 5 : 01 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 5 ) :minutes # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" drinks \" ) ) ) ) ) )"
    },
    {
        "question": "Make a tennis match with Abby Kim and Jake",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" tennis match \" ) ) ) ) ) )"
    },
    {
        "question": "could you set up dentist appointment for tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I am going to be lifting weights to 7 am and at 7 : 30 I am going to have a power breakfast .",
        "target": "( do ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" lifting weights \" ) ) ) ) ) ) ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( HourMinuteAm :hours # ( Number 7 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" power breakfast \" ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule Save Groot for next Tuesday at 8 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" Save Groot \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a dentist appointment before brunch",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( LessThanFromStructDateTime :dateTimeConstraint ( ?= ( NextTime :time ( Brunch ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to eat some dinner in a bit",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" eat some dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Add trivia and drinks with Ryan and Chad on Wednesday at 8 : 30 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ryan \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chad \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( HourMinutePm :hours # ( Number 8 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" trivia and drinks \" ) ) ) ) ) )"
    },
    {
        "question": "Mark all day friday as busy .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :nonEmptyBase ( EventAllDayOnDate :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :event ( Constraint[Event] ) ) :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting at the South tower office on Tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" the South tower office \" ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule Short Run for tomorrow afternoon with Lance .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lance \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" Short Run \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule yoga at 8 : 00 AM to 8 : 45 AM on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) :time ( HourMinuteAm :hours # ( Number 8 ) :minutes # ( Number 45 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" yoga \" ) ) ) ) ) )"
    },
    {
        "question": "Who is Darren 's manager ?",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Darren \" ) ) ) ) ) ) )"
    },
    {
        "question": "Please put my doctor 's appointment for Monday at 2 pm on the calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" doctor's appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I 've got a team meeting from Tuesday through Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :date2 ( nextDayOfWeek ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) # ( DayOfWeek \" FRIDAY \" ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you also add my face lift ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" face lift \" ) ) ) ) ) )"
    },
    {
        "question": "I want to make an appointment with Paige ASHWORTH",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paige ASHWORTH \" ) ) ) ) ) ) :subject ( ?= # ( String \" appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Please , add a visit to the historic Savannah in Georgia .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Savannah in Georgia \" ) ) :subject ( ?= # ( String \" visit \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting today that ends at 4 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting in the afternoon on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Create Doctors Appointment monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" Doctors Appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I need to drop my niece off at school tomorrow at 8 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" school \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" drop my niece off \" ) ) ) ) ) )"
    },
    {
        "question": "babysitter today at 5 pm for 3 hours",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 3 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" babysitter \" ) ) ) ) ) )"
    },
    {
        "question": "add appointment Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "My court date is tomorrow at 1,10 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" court date \" ) ) ) ) ) )"
    },
    {
        "question": "create a new event for saturday at 6 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Sunday I need to schedule an event Presentation review at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Presentation review \" ) ) ) ) ) )"
    },
    {
        "question": "please make meeting with john tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" john \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Appointment 2 is tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" Appointment 2 \" ) ) ) ) ) )"
    },
    {
        "question": "Create an event titled surprise wedding announcement next week Tuesday at 8 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( DowOfWeekNew :dow # ( DayOfWeek \" TUESDAY \" ) :week ( NextWeekList ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" surprise wedding announcement \" ) ) ) ) ) )"
    },
    {
        "question": "Put \" swimming with manatees \" on my calendar for April 4 at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 4 ) :month # ( Month \" APRIL \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" swimming with manatees \" ) ) ) ) ) )"
    },
    {
        "question": "What 's my boss 's name and contact info ?",
        "target": "( Yield :output ( PersonFromRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) )"
    },
    {
        "question": "Take a rest this afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) :subject ( ?= # ( String \" Take a rest \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule dinner at 5 pm tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Brad tomorrow afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brad \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "set a meeting with Elli for Friday at 4 pm through end of day and call it headed to the spa",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" headed to the spa \" ) ) ) ) ) )"
    },
    {
        "question": "add learn Wonders game for tonight at 7 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" learn Wonders game \" ) ) ) ) ) )"
    },
    {
        "question": "kids pickup at 3",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" kids pickup \" ) ) ) ) ) )"
    },
    {
        "question": "I want you to put Outback on my calendar for tonight at 7 pm please .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" Outback \" ) ) ) ) ) )"
    },
    {
        "question": "Hello , I want to find a movie to see tonight .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) :subject ( ?= # ( String \" find a movie to see \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule meeting with Karl and Jerri tomorrow at 9 AM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karl \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jerri \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "can you schedule dog walking Sunday please ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) :subject ( ?= # ( String \" dog walking \" ) ) ) ) ) )"
    },
    {
        "question": "add swim time in the week not the weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( Constraint[Date] :dayOfWeek ( negate ( Weekend ) ) ) ) :subject ( ?= # ( String \" swim time \" ) ) ) ) ) )"
    },
    {
        "question": "Okay , and can you also add that I need to pick up my medical records for that appointment on Thursday the 7 th ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) :subject ( ?= # ( String \" pick up my medical records \" ) ) ) ) ) )"
    },
    {
        "question": "I 'll be having a meeting with Jennifer on the 30 th of this month .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 30.0 ) :month ( :month ( Today ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a two hour meeting with Elaine beginning at 9 a.m. to my schedule tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elaine \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a strategy meeting first thing Monday morning with Derrick , Dave , Donald and Deborah .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Derrick \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dave \" ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Donald \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Deborah \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) :subject ( ?= # ( String \" strategy meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to block out 5 pm to 8 pm tomorrow on my calendar",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Yes , can you also schedule dinner with roger , mike and allen ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" roger \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" mike \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" allen \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Add dinner after my last meeting today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( :end ( FindLastEvent :constraint ( EventOnDate :date ( Today ) :event ( Constraint[Event] ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Put visit central park on the 7 th at 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 7 ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" visit central park \" ) ) ) ) ) )"
    },
    {
        "question": "Please set a time for reading from 6 pm to 8 pm tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" reading \" ) ) ) ) ) )"
    },
    {
        "question": "After my last scheduled Training Session on Tuesday , schedule a Protein Shake .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( :end ( FindLastEvent :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" Training Session \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" Protein Shake \" ) ) ) ) ) )"
    },
    {
        "question": "Need a room in city center next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( andConstraint ( ?= # ( LocationKeyphrase \" city center \" ) ) ( roomRequest ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Add to calendar doctor 's appointment on Tuesday , December 18 @ 2 pm . Mark as out of the office for 2 hours",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 18 ) :month # ( Month \" DECEMBER \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" doctor's appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I need a new meeting for next thursday at 6 pm called dinner",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Please create an event titled \" Nap \" Starting at 3 pm todayfor two hours , and show my status as Out of office .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" Nap \" ) ) ) ) ) )"
    },
    {
        "question": "Make a appointment for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Cool , I need salon added",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" salon \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting for 1 hour at 9 am on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you create an appointment for today ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "I need to put Band Practice on Wednesday at 5 : 45 pm for 3 hours .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 3 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( HourMinutePm :hours # ( Number 5 ) :minutes # ( Number 45 ) ) ) ) :subject ( ?= # ( String \" Band Practice \" ) ) ) ) ) )"
    },
    {
        "question": "schedule reserve hotel for three pm today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" reserve hotel \" ) ) ) ) ) )"
    },
    {
        "question": "Make an all day event tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( Tomorrow ) :event ( Constraint[Event] ) ) ) ) )"
    },
    {
        "question": "Who is on Kim 's team ?",
        "target": "( Yield :output ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) )"
    },
    {
        "question": "Also I have a dinner tomorrow at Julie 's at 7 : 30 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Julie's \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 7 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "There 's going to be a Mortal Kombat Tournament on Saturday from 10 AM to 6 PM at The Center",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" The Center \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" Mortal Kombat Tournament \" ) ) ) ) ) )"
    },
    {
        "question": "Mark that I 'll be in Miami from Friday through Sunday starting next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( DowOfWeekNew :dow # ( DayOfWeek \" FRIDAY \" ) :week ( NextWeekList ) ) :date2 ( nextDayOfWeek ( DowOfWeekNew :dow # ( DayOfWeek \" FRIDAY \" ) :week ( NextWeekList ) ) # ( DayOfWeek \" SUNDAY \" ) ) ) :event ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Miami \" ) ) ) ) ) ) )"
    },
    {
        "question": "I need an appointment",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] ) ) ) )"
    },
    {
        "question": "I have anothe rmeeting at 4 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" anothe rmeeting \" ) ) ) ) ) )"
    },
    {
        "question": "next meeting on 6 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "put dinner meet with emily",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" emily \" ) ) ) ) ) ) :subject ( ?= # ( String \" dinner meet \" ) ) ) ) ) )"
    },
    {
        "question": "Mark and Ashley will be going fishing with me this weekend at 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mark \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ashley \" ) ) ) ) ) ) ) :start ( andConstraint ( Constraint[DateTime] :date ( ThisWeekend ) ) ( Constraint[DateTime] :time ( ?= ( NumberPM :number # ( Number 3 ) ) ) ) ) :subject ( ?= # ( String \" fishing \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule my meeting with Mathew George and Sally the day after tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mathew George \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sally \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( adjustByPeriod ( Tomorrow ) ( toDays # ( Number 1 ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can I see Dan 's manager ?",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan \" ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks , add grocery shopping from 5 pm to 7 pm on Friday 's calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" grocery shopping \" ) ) ) ) ) )"
    },
    {
        "question": "Add project meeting with damon ellery",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" damon ellery \" ) ) ) ) ) ) :subject ( ?= # ( String \" project meeting \" ) ) ) ) ) )"
    },
    {
        "question": "can you arrange with 12 : 00 AM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 12 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a training meeting for Sunday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) :subject ( ?= # ( String \" training meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Create event on calendar Raquetball game with Jill on Friday at 5 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jill \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" Raquetball game \" ) ) ) ) ) )"
    },
    {
        "question": "Let 's meet Brian at 4 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brian \" ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting event with Jon starting now .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jon \" ) ) ) ) ) ) :start ( ?= ( Now ) ) ) ) ) )"
    },
    {
        "question": "Make an event to finish BL3",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" finish BL3 \" ) ) ) ) ) )"
    },
    {
        "question": "I need to set up a dinner with Melody Francis and Beth",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Melody \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Francis \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Beth \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule time to meet with Don ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Don \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm going for a run at 6",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" run \" ) ) ) ) ) )"
    },
    {
        "question": "create arm wrestling on tuesday at 7",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" arm wrestling \" ) ) ) ) ) )"
    },
    {
        "question": "Please set up a meeting with Janice next Thursday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janice \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a meeting at 9 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "put the meeting with rocky",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" rocky \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "add a doctors appointment that is n't on the weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( Constraint[Date] :dayOfWeek ( negate ( Weekend ) ) ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I need to create an event , Joes Birthday Party for December 29 th at 7 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 29 ) :month # ( Month \" DECEMBER \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" Joes Birthday Party \" ) ) ) ) ) )"
    },
    {
        "question": "My karate competition starts on Monday and goes to Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :date2 ( nextDayOfWeek ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) # ( DayOfWeek \" THURSDAY \" ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" karate competition \" ) ) ) ) ) ) )"
    },
    {
        "question": "I need a dinner for next week starting at 6 pm with end at 7 : 30",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( DowOfWeekNew :dow ( :dayOfWeek ( Execute :intension ( refer ( extensionConstraint ( Constraint[Date] ) ) ) ) ) :week ( NextWeekList ) ) :time ( NumberPM :number # ( Number 6 ) ) ) :time ( HourMinutePm :hours # ( Number 7 ) :minutes # ( Number 30.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( DowOfWeekNew :dow ( :dayOfWeek ( Execute :intension ( refer ( extensionConstraint ( Constraint[Date] ) ) ) ) ) :week ( NextWeekList ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "On June 6 do I have time to go to the nail sallon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 6 ) :month # ( Month \" JUNE \" ) ) ) ) :subject ( ?= # ( String \" go to the nail sallon \" ) ) ) ) ) )"
    },
    {
        "question": "i have a realtor 's convention Saturday afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) :subject ( ?= # ( String \" realtor's convention \" ) ) ) ) ) )"
    },
    {
        "question": "I need to have a lunch with Jake , Abby , and Kim",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Thank you . Could you please add an Out Of Office status for October 6 through the 15 th ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( MD :day # ( Number 6 ) :month # ( Month \" OCTOBER \" ) ) :date2 ( nextDayOfMonth ( MD :day # ( Number 6 ) :month # ( Month \" OCTOBER \" ) ) # ( Number 15 ) ) ) :event ( Constraint[Event] :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) ) ) ) ) )"
    },
    {
        "question": "Who does Abby report to ?",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule lunch with Nick tomorrow at noon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Nick \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Let 's put Baseball game an hour after volleyball .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( adjustByPeriodDuration ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" volleyball \" ) ) ) ) ) ) ) ( PeriodDuration :duration ( toHours # ( Number 1 ) ) ) ) ) :subject ( ?= # ( String \" Baseball game \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Amy on Friday at 10 : 30 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amy \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 10.0 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event for Sarah 's birthday dinner on April 12 , 2019 at 8 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MDY :day # ( Number 12 ) :month # ( Month \" APRIL \" ) :year # ( Number 2019 ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" Sarah's birthday dinner \" ) ) ) ) ) )"
    },
    {
        "question": "basketball game 8 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" basketball game \" ) ) ) ) ) )"
    },
    {
        "question": "There 's going to be a brunch buffet for the team at Joule on Sunday starting at 10 : 45 am for probably ... 1 . 5 hours",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1.5 ) ) ) :location ( ?= # ( LocationKeyphrase \" Joule \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 10.0 ) :minutes # ( Number 45 ) ) ) ) :subject ( ?= # ( String \" brunch buffet for the team \" ) ) ) ) ) )"
    },
    {
        "question": "can you add a meeting for date night 7 - 8 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberPM :number # ( Number 7 ) ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" date night \" ) ) ) ) ) )"
    },
    {
        "question": "Hi . I need to make a doctors appointment for Wednesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Book a meeting at 3 am tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add photo editing for a week from tomorrow at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( adjustByPeriod ( Tomorrow ) ( toWeeks # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" photo editing \" ) ) ) ) ) )"
    },
    {
        "question": "I would like you to add family vacation to my events from the 2 nd to the 10 th .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( nextDayOfMonth ( Today ) # ( Number 2 ) ) :date2 ( nextDayOfMonth ( nextDayOfMonth ( Today ) # ( Number 2 ) ) # ( Number 10.0 ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" family vacation \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule the meeting with John Peter on Next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John Peter \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Sandra is visiting all weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( ThisWeekend ) :event ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sandra \" ) ) ) ) ) ) :subject ( ?= # ( String \" visiting \" ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule planning committee meeting at 4 pm Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" planning committee meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I want to go to a movie . It 'll have to be an evening .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :time ( Evening ) ) :subject ( ?= # ( String \" go to a movie \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add \" optometrist appointment \" to my schedule for next Saturday at 10 am ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" optometrist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Please put final exam next Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" final exam \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule meeting about schedule Monday at 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" meeting about schedule \" ) ) ) ) ) )"
    },
    {
        "question": "create meeting with john on April 5",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" john \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 5 ) :month # ( Month \" APRIL \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add mellow time for Friday afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) :subject ( ?= # ( String \" mellow time \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule exercise on Saturday at 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" exersize \" ) ) ) ) ) )"
    },
    {
        "question": "Does Damon Straeter report to anyone ?",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Damon Straeter \" ) ) ) ) ) ) )"
    },
    {
        "question": "Create event Doctor Appointment on March 27 th at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 27 ) :month # ( Month \" MARCH \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" Doctor Appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Add coffee with Rachel next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rachel \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) :subject ( ?= # ( String \" coffee \" ) ) ) ) ) )"
    },
    {
        "question": "Yes , I 'll be out of office from Tuesday through Thursday next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( DowOfWeekNew :dow # ( DayOfWeek \" TUESDAY \" ) :week ( NextWeekList ) ) :date2 ( DowOfWeekNew :dow # ( DayOfWeek \" THURSDAY \" ) :week ( NextWeekList ) ) ) :event ( Constraint[Event] :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) ) ) ) ) )"
    },
    {
        "question": "Alright , pencil in \" Driving Range \" at 730 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( HourMinuteAm :hours # ( Number 7 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Driving Range \" ) ) ) ) ) )"
    },
    {
        "question": "now put Family Fun Time on Sunday starting at 2 pm lasting 3 hours and mark me as being in Unknown status",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 3 ) ) ) :showAs ( ?= # ( ShowAsStatus \" Unknown \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" Family Fun Time \" ) ) ) ) ) )"
    },
    {
        "question": "Set event after project meeting Thursday , 1 hour , prep time",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( :time ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" project meeting \" ) ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" prep time \" ) ) ) ) ) )"
    },
    {
        "question": "Make an event with Jake , Kim and Abby next month called planning meeting",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( FullMonthofMonth :month ( NextMonth ) ) ) :subject ( ?= # ( String \" planning meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Ok , now add a family dinner on friday at 5 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" family dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I need to add Disney on Ice the Thrill of the hunt for tomorrow at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" Disney on Ice the Thrill of the hunt \" ) ) ) ) ) )"
    },
    {
        "question": "Add an appointment for 11 am tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "create 1 hour reading time tonight",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) :subject ( ?= # ( String \" reading time \" ) ) ) ) ) )"
    },
    {
        "question": "Make an item called Team Meeting on Monday starting at 9 : 30 am and lasting one hour",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 9 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Team Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting at 3 : 00 pm tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set a call at 4 pm with Susan",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Susan \" ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" call \" ) ) ) ) ) )"
    },
    {
        "question": "put Whale Watching on my calendar on Sunday starting at 1 pm and lasting 3 hours",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 3 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Whale Watching \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a discipline meeting with Mary tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" discipline meeting \" ) ) ) ) ) )"
    },
    {
        "question": "doctor 's appointment at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" doctor's appointment \" ) ) ) ) ) )"
    },
    {
        "question": "appointment with john next week monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" john \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( DowOfWeekNew :dow # ( DayOfWeek \" MONDAY \" ) :week ( NextWeekList ) ) ) ) ) ) ) )"
    },
    {
        "question": "hi , can you schedule a meeting for tomorrow at 8 am ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a Subway Ride 45 minutes from now .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( adjustByPeriodDuration ( Now ) ( PeriodDuration :duration ( toMinutes # ( Number 45 ) ) ) ) ) :subject ( ?= # ( String \" Subway Ride \" ) ) ) ) ) )"
    },
    {
        "question": "Okay go ahead and book go to Judy 's house .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" go to Judy's house \" ) ) ) ) ) )"
    },
    {
        "question": "My mother is Linda in my address book . Set up a meeting with her tomorrow at 1 Pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Linda \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need an event for next week with Kim and Elli",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "I 'm going shopping at Town Center at 2 pm on Sunday . Add it to my calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Town Center \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" shopping \" ) ) ) ) ) )"
    },
    {
        "question": "I need to make a sales meeting for friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" sales meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to fly to Turkey .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" fly to Turkey \" ) ) ) ) ) )"
    },
    {
        "question": "I 'll be in Indiana the 17 th-24 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Indiana \" ) ) :nonEmptyBase ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( nextDayOfMonth ( Today ) # ( Number 17 ) ) :date2 ( nextDayOfMonth ( nextDayOfMonth ( Today ) # ( Number 17 ) ) # ( Number 24 ) ) ) :event ( Constraint[Event] ) ) ) ) ) )"
    },
    {
        "question": "Thanks . Please schedule meeting with Julia tomorrow at 5 PM at Starbucks .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Julia \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Starbucks \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Basketball Practice at 8 Sunday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" Basketball Practice \" ) ) ) ) ) )"
    },
    {
        "question": "I need you to schedule a dentist appoint for me tomorrow at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" dentist appoint \" ) ) ) ) ) )"
    },
    {
        "question": "Add softball on Friday from 6 : 15 PM until 8 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 6 ) :minutes # ( Number 15 ) ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 6 ) :minutes # ( Number 15 ) ) ) ) :subject ( ?= # ( String \" softball \" ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting in the afternoon on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Add a sales meeting on Monday with Kim , Jake , and Gerald",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Gerald \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" sales meeting \" ) ) ) ) ) )"
    },
    {
        "question": "put on my appointment tomorrow before 7 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( OnDateBeforeTime :date ( Tomorrow ) :time ( NumberPM :number # ( Number 7 ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a team meeting with chery roydon and scot hanson",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" chery roydon \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" scot hanson \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "My name is Damon Straeter . I need to know who my manager is .",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Damon Straeter \" ) ) ) ) ) ) )"
    },
    {
        "question": "That 's fine . Please put an event for dinner with Rose , Susan , and Surinder at 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rose \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Susan \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Surinder \" ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Make me a meeting with Abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Do I have any openings in my schedule next Tuesday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :event ( Constraint[Event] ) ) ) ) )"
    },
    {
        "question": "put meeting with mary ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" mary \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a doctors appointment on Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I would like to add an event .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] ) ) ) )"
    },
    {
        "question": "Set up a early morning meeting at 0400 with Ashley Straeter .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ashley Straeter \" ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event for a fundraiser in September 2020 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( FullMonthofMonth :month # ( Month \" SEPTEMBER \" ) :year # ( Number 2020.0 ) ) ) :subject ( ?= # ( String \" fundraiser \" ) ) ) ) ) )"
    },
    {
        "question": "Make an event for me for Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "BOOK 1 HOUR FOR LUNCH TODAY AFTERNOON",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) :subject ( ?= # ( String \" LUNCH \" ) ) ) ) ) )"
    },
    {
        "question": "Add \" Full Staff Meeting \" to my calendar for Friday right after lunch .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( OnDateAfterTime :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Lunch ) ) :subject ( ?= # ( String \" Full Staff Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Set an appointment for my nails on thursday at 1500",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( HourMinuteMilitary :hours # ( Number 15 ) :minutes # ( Number 0 ) ) ) ) :subject ( ?= # ( String \" appointment for my nails \" ) ) ) ) ) )"
    },
    {
        "question": "work meeting friday night",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Night ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) :subject ( ?= # ( String \" work meeting \" ) ) ) ) ) )"
    },
    {
        "question": "create golf meeting after this practice",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" practice \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" golf meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule gym time with Mary tomorrow at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) :subject ( ?= # ( String \" gym time \" ) ) ) ) ) )"
    },
    {
        "question": "please save the date of coming sunday is holiday in my calendar",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) :subject ( ?= # ( String \" holiday \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a co - worker sync with Jerri Skinner and Cecelia Waller .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jerri Skinner \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cecelia Waller \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" co-worker sync \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule Save the Planet with Steve and Tony tomorrow at 9 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Steve \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tony \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" Save the Planet \" ) ) ) ) ) )"
    },
    {
        "question": "I need to pick strawberries at 5\"30 tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 5 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" pick strawberries \" ) ) ) ) ) )"
    },
    {
        "question": "add meeting with Janice on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janice \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule an event for tomorrow and call it football game ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" football game \" ) ) ) ) ) )"
    },
    {
        "question": "create a picnic for me please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" picnic \" ) ) ) ) ) )"
    },
    {
        "question": "Add to the calendar a party planning meeting with Jan tomorrow evening .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jan \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Evening ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" party planning \" ) ) ) ) ) )"
    },
    {
        "question": "Can you put \" Trip to Berkeley \" for this coming Saturday at 2 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" Trip to Berkeley \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting to my calendar for 2 : 30 pm on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put down return zip car at 4 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" return zip car \" ) ) ) ) ) )"
    },
    {
        "question": "I want to get a room at Bellevue to work on production presentation at 3 tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( andConstraint ( ?= # ( LocationKeyphrase \" Bellevue \" ) ) ( roomRequest ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" work on production presentation \" ) ) ) ) ) )"
    },
    {
        "question": "Set me up for Thursday , June 6 th .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 6 ) :month # ( Month \" JUNE \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Tom from accounting for 2 pm , tomorrow after lunch .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Appointment is for 2 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Peter , Paul and Mary Saturday to play D&D.",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Peter \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paul \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" play D&D \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add breakfast with Jamie tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jamie \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" breakfast \" ) ) ) ) ) )"
    },
    {
        "question": "I need to add a meeting at ten AM tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Who is Jane 's manager ?",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting with Deckard today called story time from 4 : 25 pm until 5 : 25 pm today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Deckard \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinutePm :hours # ( Number 4 ) :minutes # ( Number 25 ) ) ) :time ( HourMinutePm :hours # ( Number 5 ) :minutes # ( Number 25 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinutePm :hours # ( Number 4 ) :minutes # ( Number 25 ) ) ) ) :subject ( ?= # ( String \" story time \" ) ) ) ) ) )"
    },
    {
        "question": "Put something on my schedule for tomorrow night .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Night ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "I need lunch with Tommy for Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tommy \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Make an event for 1 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a pedicure for 40 minutes between 4 and 7 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 40.0 ) ) ) :start ( DateTimeAndConstraint :dateTime1 ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) :dateTime2 ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" pedicure \" ) ) ) ) ) )"
    },
    {
        "question": "make a apportionment for today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventOnDate :date ( Today ) :event ( Constraint[Event] :subject ( ?= # ( String \" apportionment \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add lunch instead for 1330 ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( HourMinuteMilitary :hours # ( Number 13 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "what time is my new job appointment going to be tomorrow am or 8 thirty am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" job appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Tell me who James Potter 's manager is .",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James Potter \" ) ) ) ) ) ) )"
    },
    {
        "question": "Lunch with max at today 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" max \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" Lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a team meeting with John and Mark today at 3 PM in the boardroom",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mark \" ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" the boardroom \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I have to add a dentist appointment for Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add the football tournament out of town for 3 days on November 1 ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" football tournament out of town \" ) ) ) :period ( toDays # ( Number 3 ) ) :startDate ( MD :day # ( Number 1 ) :month # ( Month \" NOVEMBER \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a party for 5 : 00 for Kevin , Joe , and Kim ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kevin \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joe \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" party \" ) ) ) ) ) )"
    },
    {
        "question": "Make a Halloween party with Tina , Miko , Uzu and Suzi ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tina \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Miko \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Uzu \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Suzi \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" Halloween party \" ) ) ) ) ) )"
    },
    {
        "question": "july 5 through july 10 add vacation",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :nonEmptyBase ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( MD :day # ( Number 5 ) :month # ( Month \" JULY \" ) ) :date2 ( MD :day # ( Number 10.0 ) :month # ( Month \" JULY \" ) ) ) :event ( Constraint[Event] ) ) :subject ( ?= # ( String \" vacation \" ) ) ) ) ) )"
    },
    {
        "question": "Find two hours on Saturday for basketball practice with Sam .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" basketball practice \" ) ) ) ) ) )"
    },
    {
        "question": "Add date night for next friday at 7 for 2 hours",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" date night \" ) ) ) ) ) )"
    },
    {
        "question": "Create new appointment for tomorrow at noon with Paige Ashworth .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paige Ashworth \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "martinis at 2 : 30 sharp",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :time ( ?= ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" martinis \" ) ) ) ) ) )"
    },
    {
        "question": "i need to plan \" 4 th of July Party \"",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" 4th of July Party \" ) ) ) ) ) )"
    },
    {
        "question": "I want to add dinner with Mary at 6 p.m. to my schedule tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "make an appointment for tomorrow at 9 am for me to see the dentist",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" see the dentist \" ) ) ) ) ) )"
    },
    {
        "question": "Add to calendar baseball game with Joey on Friday at 8 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joey \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" baseball game \" ) ) ) ) ) )"
    },
    {
        "question": "Do 5 pm to 6 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "can you set up an event at 10 : 30 AM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( HourMinuteAm :hours # ( Number 10.0 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Ok then schedule an appointment with Gia sometime after 3 tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Gia \" ) ) ) ) ) ) :start ( OnDateAfterTime :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) )"
    },
    {
        "question": "Create EPA compliance in 2021",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( FullYearofYear :year # ( Number 2021 ) ) ) :subject ( ?= # ( String \" EPA compliance \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a conference room in cc for me",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( andConstraint ( ?= # ( LocationKeyphrase \" cc for me \" ) ) ( roomRequest ) ) ) ) ) )"
    },
    {
        "question": "I have a workout tomorrow at 3 am with Abby , Elli , and Jennifer .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" workout \" ) ) ) ) ) )"
    },
    {
        "question": "Make an event for Monday at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule piano for John Monday at 5 PM for 1 hour .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" piano \" ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting in the afternoon on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you create an event for April 29 th at 8 : 45 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 29 ) :month # ( Month \" APRIL \" ) ) :time ( HourMinuteAm :hours # ( Number 8 ) :minutes # ( Number 45 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want a meeting around 10 next Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( AroundDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hi , I need to schedule picking up my son at the Amtrak on Saturday afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" the Amtrak \" ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) :subject ( ?= # ( String \" picking up my son \" ) ) ) ) ) )"
    },
    {
        "question": "Tuesday at 3 pm , make a meeting called \" Budget \" .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" Budget \" ) ) ) ) ) )"
    },
    {
        "question": "Can you create new doctors appointment",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "ok make a meeting on monday noon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "Can you set up a dance - off with Jerri Skinner next Thursday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jerri Skinner \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) :subject ( ?= # ( String \" dance-off \" ) ) ) ) ) )"
    },
    {
        "question": "kindly set up the dinner event at Cambridge . We need a room",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( andConstraint ( ?= # ( LocationKeyphrase \" Cambridge \" ) ) ( roomRequest ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule me an event on Sunday at 10 called salvation ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" salvation \" ) ) ) ) ) )"
    },
    {
        "question": "Mark me as busy 10 - 12 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have an upcoming meeting . please book conference room in Cambridge",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( andConstraint ( ?= # ( LocationKeyphrase \" Cambridge \" ) ) ( roomRequest ) ) ) ) ) )"
    },
    {
        "question": "I need to add a doctor 's followup for one week from today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( adjustByPeriod ( Today ) ( toWeeks # ( Number 1 ) ) ) ) ) :subject ( ?= # ( String \" doctor's followup \" ) ) ) ) ) )"
    },
    {
        "question": "tomorrow choosing the lunch time 6 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" choosing the lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Add skiing on February 22 at 9 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 22 ) :month # ( Month \" FEBRUARY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" skiing \" ) ) ) ) ) )"
    },
    {
        "question": "Set a meeting on the first for Rob",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rob \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( ClosestDay :date ( Today ) :day # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "out of the office friday at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make an appointment today ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "no dinner in the fall",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( SeasonFall ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "What 's my supervisors name ?",
        "target": "( Yield :output ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) )"
    },
    {
        "question": "Hi , can you schedule an appointment for the 25 th ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 25 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to add an appointment at 1 pm tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "meeting next Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add a business hike on Tuesday at 8 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" business hike \" ) ) ) ) ) )"
    },
    {
        "question": "create work softball game on monday at 6",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" work softball game \" ) ) ) ) ) )"
    },
    {
        "question": "I need you to schedule a winter meeting for the marketing department on December 12 th .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 12 ) :month # ( Month \" DECEMBER \" ) ) ) ) :subject ( ?= # ( String \" winter meeting for the marketing department \" ) ) ) ) ) )"
    },
    {
        "question": "I want to go back to see world on Monday from 9 AM til 3 : 35 PM . Will it be raining ?",
        "target": "( do ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 35 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" go back to see world \" ) ) ) ) ) ) ( Yield :output ( WillRain :table ( WeatherQueryApi :place ( AtPlace :place ( Here ) ) :time ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up on my calendar a mid month results meeting today at 2 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" mid month results meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a Meeting with Alex on March 5 th at 3 : 30 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alex \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 5 ) :month # ( Month \" MARCH \" ) ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a trip to Disney this Spring",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( SeasonSpring ) ) :subject ( ?= # ( String \" trip to Disney \" ) ) ) ) ) )"
    },
    {
        "question": "cool . I 'm also going to need to put a dinner on the calendar on Friday at Benny 's Chop House from 7 pm to 9 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) :time ( NumberPM :number # ( Number 9 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Benny's Chop House \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Add to the calendar a party planning meeting with Jan tomorrow evening",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jan \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Evening ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" party planning meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting on Saturday at 9 : 00 am to discuss new phone contracts .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" discuss new phone contracts \" ) ) ) ) ) )"
    },
    {
        "question": "make meeting with tim friday morning 9 . 00 am - 9 . 30 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" tim \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) :time ( HourMinuteAm :hours # ( Number 9 ) :minutes # ( Number 30.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "can you schedule doctor appointment for me this friday 10 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" doctor appointment \" ) ) ) ) ) )"
    },
    {
        "question": "After my meeting with Francis I 'll be meeting with Katherine and Jen in office 303 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Katherine \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jen \" ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" office 303 \" ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipientConstraint :recipientConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Francis \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to add dinner with Mary at 6 p.m. to my schedule tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I need to visit my grandparents but it ca nt be this weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( Constraint[Date] :dayOfWeek ( negate ( Weekend ) ) ) ) :subject ( ?= # ( String \" visit my grandparents \" ) ) ) ) ) )"
    },
    {
        "question": "schedule employee reviews Monday between 8 am and 2 pm for 2 hours",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( DateTimeConstraint :constraint ( TimeToTime :time1 ( NumberAM :number # ( Number 8 ) ) :time2 ( NumberPM :number # ( Number 2 ) ) ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) :subject ( ?= # ( String \" employee reviews \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make a meeting for tommrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "And I have a recital at 6 pm at church",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" church \" ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" recital \" ) ) ) ) ) )"
    },
    {
        "question": "next meeting on 7 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :time ( ?= ( NumberAM :number # ( Number 7 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a new job for this fall ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( SeasonFall ) ) :subject ( ?= # ( String \" new job \" ) ) ) ) ) )"
    },
    {
        "question": "I need something tomorrow after 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( OnDateAfterTime :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) )"
    },
    {
        "question": "I have a dog owners meeting tomorrow evening",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Evening ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" dog owners meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Can you set up a meeting with Scot Hanson for Sunday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Scot Hanson \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule call mom at 2 pm tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" call mom \" ) ) ) ) ) )"
    },
    {
        "question": "I 'd like to visit Yellowstone National Park on the 17 th at 1 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Yellowstone National Park \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 17 ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" visit \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Sam on Friday from 1 pm to 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Yesterday I went to the movies with Abby at 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Yesterday ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" movies \" ) ) ) ) ) )"
    },
    {
        "question": "I 'd like to set an appointment for February 31 st",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 31 ) :month # ( Month \" FEBRUARY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create yoga December 29 th 10 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 29 ) :month # ( Month \" DECEMBER \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" yoga \" ) ) ) ) ) )"
    },
    {
        "question": "Set a meeting at brunch time next friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Brunch ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to need to add another one . I need to put down my flight to Mexico on March 6 th from 3 pm to 9 pm at Philadelphia airport .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( MD :day # ( Number 6 ) :month # ( Month \" MARCH \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) :time ( NumberPM :number # ( Number 9 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Philadelphia airport \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 6 ) :month # ( Month \" MARCH \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" flight to Mexico \" ) ) ) ) ) )"
    },
    {
        "question": "Add studying and burgers at 5 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" studying and burgers \" ) ) ) ) ) )"
    },
    {
        "question": "I need an appointment with Racael for 25 minutes after 2",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Racael \" ) ) ) ) ) ) :duration ( ?= ( toMinutes # ( Number 25 ) ) ) :start ( ?> ( NextTime :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Ok , add coffee tuesday at 9 for me",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" coffee \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a meeting with Jesse from 3 to end of the work day tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a appointment for On March 21 st at 1 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 21 ) :month # ( Month \" MARCH \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put me down to meet with Ashley from 3 to end of the day .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ashley \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Also , I 'd like to walk my dog tomorrow afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" walk my dog \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule band rehearsal on Monday at 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" band rehearsal \" ) ) ) ) ) )"
    },
    {
        "question": "Who is Abby 's manager ?",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) )"
    },
    {
        "question": "I need to catch the train on Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" catch the train \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a one hour meeting with Elaine at 4 PM tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elaine \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want a meeting with Jolanda on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jolanda \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please add a meeting for May 1",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 1 ) :month # ( Month \" MAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Kim for Friday around 6 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) :start ( AroundDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put Dr Roberts on the calendar for 3 pm on Tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" Dr Roberts \" ) ) ) ) ) )"
    },
    {
        "question": "at 11 am I have a lunch I am going to so put that on the calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Thanks . Put trip to Paris from Jan 1 st to 10 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( MD :day # ( Number 1 ) :month # ( Month \" JANUARY \" ) ) :date2 ( nextDayOfMonth ( MD :day # ( Number 1 ) :month # ( Month \" JANUARY \" ) ) # ( Number 10.0 ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" trip to Paris \" ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a dermatologist appointment with Jerri Skinner",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jerri Skinner \" ) ) ) ) ) ) :subject ( ?= # ( String \" dermatologist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "put dinner with snilaki",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" snilaki \" ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a lunch",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Also , can you add Pick up Kate from Soccer Practice at 6 : 30 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( HourMinutePm :hours # ( Number 6 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Pick up Kate from Soccer Practice \" ) ) ) ) ) )"
    },
    {
        "question": "Set up the team meeting on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Hi there , can you add clothes shopping for my son at the Arden mall for March 23 rd from 3 to 6 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( MD :day # ( Number 23 ) :month # ( Month \" MARCH \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" the Arden mall \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 23 ) :month # ( Month \" MARCH \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" clothes shopping for my son \" ) ) ) ) ) )"
    },
    {
        "question": "create diaper change on monday at 8",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" diaper change \" ) ) ) ) ) )"
    },
    {
        "question": "I need a. meeting with kim tomorrow from 1 : 30 until the end of work day .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 30.0 ) ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "create a schedule for football practoisde",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" football practoisde \" ) ) ) ) ) )"
    },
    {
        "question": "I need to do my laundry tomorrow morning at 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" laundry \" ) ) ) ) ) )"
    },
    {
        "question": "Add Lunch with Jerry .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jerry \" ) ) ) ) ) ) :subject ( ?= # ( String \" Lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Update the calendar that I had a dentist appointment last week at 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( andConstraint ( Constraint[DateTime] :date ( LastWeekNew ) ) ( Constraint[DateTime] :time ( ?= ( NumberPM :number # ( Number 3 ) ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Okay , add Round 18 of Phone Tag to tomorrow at 16 15",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinuteMilitary :hours # ( Number 16 ) :minutes # ( Number 15 ) ) ) ) :subject ( ?= # ( String \" Round 18 of Phone Tag \" ) ) ) ) ) )"
    },
    {
        "question": "Also Please create a meeting event with Damon Ellery & Janice Kang on July 18 th from 8 : 30 AM - 10 : 30 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Damon Ellery \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janice Kang \" ) ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( MD :day # ( Number 18 ) :month # ( Month \" JULY \" ) ) :time ( HourMinuteAm :hours # ( Number 8 ) :minutes # ( Number 30.0 ) ) ) :time ( HourMinuteAm :hours # ( Number 10.0 ) :minutes # ( Number 30.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 18 ) :month # ( Month \" JULY \" ) ) :time ( HourMinuteAm :hours # ( Number 8 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put Pre - Meeting Planning for Thursday at 2 PM with Miles on the calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Miles \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" Pre-Meeting Planning \" ) ) ) ) ) )"
    },
    {
        "question": "Can you set up a meeting with Katie and Katy on Monday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Katie \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Katy \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a 1 - 1 with Rosa next Wednesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rosa \" ) ) ) ) ) ) :isOneOnOne ( ?= # ( Boolean true ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you find a time for videos games on my calendar tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" videos games \" ) ) ) ) ) )"
    },
    {
        "question": "add an Appointment today at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule movie date with Jessica at the Regal Majestic in Silver Spring , MD .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jessica \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Regal Majestic in Silver Spring \" ) ) :subject ( ?= # ( String \" movie date \" ) ) ) ) ) )"
    },
    {
        "question": "Create car wash for Timmy , Roger , Wilco , and Charlie this Saturday at 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Timmy \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Roger \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Wilco \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Charlie \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" car wash \" ) ) ) ) ) )"
    },
    {
        "question": "Please add racquetball events for May 2222",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( FullMonthofMonth :month # ( Month \" MAY \" ) :year # ( Number 2222 ) ) ) :subject ( ?= # ( String \" racquetball \" ) ) ) ) ) )"
    },
    {
        "question": "Create event \" Jessica 's Baby Shower \" at 1 pm on December 21",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 21 ) :month # ( Month \" DECEMBER \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Jessica's Baby Shower \" ) ) ) ) ) )"
    },
    {
        "question": "I will be in Seattle for my Proctologist appointment tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Seattle \" ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" Proctologist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "What is my bosses email ?",
        "target": "( Yield :output ( :emailAddress ( PersonFromRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) )"
    },
    {
        "question": "This summer I want to go play Pokemon Sword and Shield",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( SeasonSummer ) ) :subject ( ?= # ( String \" go play Pokemon Sword and Shield \" ) ) ) ) ) )"
    },
    {
        "question": "Who is on Jesse 's team ?",
        "target": "( Yield :output ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) )"
    },
    {
        "question": "Who are the reports of Kim Possible ?",
        "target": "( Yield :output ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) )"
    },
    {
        "question": "Please add a meeting with Paul on Monday at 4 : 00 p.m. in my office .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paul \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" my office \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add exercise to my calendar tonight",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) :subject ( ?= # ( String \" exercise \" ) ) ) ) ) )"
    },
    {
        "question": "Lets create an event called meeting with Sasha .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sasha \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Now please add an event on Saturday from 3 : 00 to 3 : 30 , titled lunch date .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 30.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" lunch date \" ) ) ) ) ) )"
    },
    {
        "question": "Put a note on my calendar to buy socks .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" buy socks \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule an all day Gambling in Vegas Trip tomorrow at 2 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( Tomorrow ) :event ( Constraint[Event] :subject ( ?= # ( String \" Gambling in Vegas Trip \" ) ) ) ) ) ) )"
    },
    {
        "question": "Yeah can you set a meeting for Tuesday with Molly ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Molly \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put a trip on my calendar for 2 days to alaska starting next monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" alaska \" ) ) :nonEmptyBase ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" trip \" ) ) ) :period ( toDays # ( Number 2 ) ) :startDate ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Set up breakfast with Norma Wednesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Norma \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) :subject ( ?= # ( String \" breakfast \" ) ) ) ) ) )"
    },
    {
        "question": "Book dinner tomorrow for 1 hour at 5 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Justin at 2 : 25 pm next Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Justin \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 25 ) ) ) ) ) ) ) )"
    },
    {
        "question": "add get nails done tomorrow at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" get nails done \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule appointment at hair salon next Sunday at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" hair salon \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting tomorrow with Beth at noon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Beth \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "We 're going to Red Lion to fix the budget with Ben tonight .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ben \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Red Lion \" ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) :subject ( ?= # ( String \" fix the budget \" ) ) ) ) ) )"
    },
    {
        "question": "Put me down for a doctors appointment on the 28 th of December at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 28 ) :month # ( Month \" DECEMBER \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Meeting with Jim and his manager Michael on Thursday at noon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Michael \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Elli for early Thursday afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( EarlyTimeRange :timeRange ( Afternoon ) ) :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Yes can you please set an event starting tomorrow at 3 pm for my dentist appointment ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "also add a Charity Event in November 2020",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( FullMonthofMonth :month # ( Month \" NOVEMBER \" ) :year # ( Number 2020.0 ) ) ) :subject ( ?= # ( String \" Charity Event \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with Rex tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rex \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Create 1 hour for Deep Breathing on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" Deep Breathing \" ) ) ) ) ) )"
    },
    {
        "question": "Thanks now add a flight to new york at 3 pm on the 16 th of june",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 16 ) :month # ( Month \" JUNE \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" flight to new york \" ) ) ) ) ) )"
    },
    {
        "question": "I also need a meeting with Julie and Jody tomorrow afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Julie \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jody \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "now make another event from noon to 2 pm on Thursday , and show me as Out of Office during that time .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( Noon ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "I have a dr appointment next Thursday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) :subject ( ?= # ( String \" dr appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I have a mediation appointment at 11 am Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" mediation appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I need a conference before Tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( DateAndConstraint :date1 ( Today ) :date2 ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) :subject ( ?= # ( String \" conference \" ) ) ) ) ) )"
    },
    {
        "question": "Add an appointment Friday pleaae",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event with Abby on December 25 th .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 25 ) :month # ( Month \" DECEMBER \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you set up a 1 pm meeting at a city center conference room for Tuesday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( andConstraint ( ?= # ( LocationKeyphrase \" city center \" ) ) ( roomRequest ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a dentist appointment on Monday at 7 : 30 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 7 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Add lunch at Chewy 's with Maria next monday at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Maria \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Chewy's \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Doctors Appointment 9 am saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" Doctors Appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Set appointment with Mary on Tuesday at 4",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to pick up dry cleaning at 4 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" pick up dry cleaning \" ) ) ) ) ) )"
    },
    {
        "question": "Add birthday party to June 25 th at 7 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 25 ) :month # ( Month \" JUNE \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" birthday party \" ) ) ) ) ) )"
    },
    {
        "question": "Boys night out is June 22 nd at 8 : 00 PM . Probably 2 hour duration",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 22 ) :month # ( Month \" JUNE \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" Boys night out \" ) ) ) ) ) )"
    },
    {
        "question": "can you make a nail appointment but not on the weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( Constraint[Date] :dayOfWeek ( negate ( Weekend ) ) ) ) :subject ( ?= # ( String \" Nail appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Create a schedule for the booking hotel tomorrow 4 afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" booking hotel \" ) ) ) ) ) )"
    },
    {
        "question": "create football game on tuesday at 3",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" football game \" ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting from 1 PM to 2 PM with Wade",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Wade \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberPM :number # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Candace and I are going to Applebee 's for lunch .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Candace \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Applebee's \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( Lunch ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Put in an event on Tuesday at 3 PM for lunch with my coworker Paige Ashworth",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paige Ashworth \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I want to have lunch with Victoria , Nick , and Adam tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Victoria \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Nick \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Adam \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Great . Please add coffee with James tomorrow to discuss the party .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" coffee \" ) ) ) ) ) )"
    },
    {
        "question": "Create event with Francine tomorrow at 2 : 00 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Francine \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you put the Fiddler play on for March 15 th at 7 : 30 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 15 ) :month # ( Month \" MARCH \" ) ) :time ( HourMinutePm :hours # ( Number 7 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Fiddler play \" ) ) ) ) ) )"
    },
    {
        "question": "Add a lunch meeting with Nicole for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Nicole \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Set Saturday as Spa Day",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :nonEmptyBase ( EventAllDayOnDate :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :event ( Constraint[Event] ) ) :subject ( ?= # ( String \" Spa Day \" ) ) ) ) ) )"
    },
    {
        "question": "Add roller skating practice to my calendar on Tuesday at 7 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" roller skating practice \" ) ) ) ) ) )"
    },
    {
        "question": "Well add a meeting with Barack Obama at 1 : 00 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) :start ( Constraint[DateTime] :time ( ?= ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule golf with Tony on Sunday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tony \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) :subject ( ?= # ( String \" golf \" ) ) ) ) ) )"
    },
    {
        "question": "Make a dinner date for tomorrow evening .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Evening ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" dinner date \" ) ) ) ) ) )"
    },
    {
        "question": "Create a valentine 's party this winter .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( SeasonWinter ) ) :subject ( ?= # ( String \" valentine's party \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a consultation with Max and Ruby next Monday for 1 hour sometime between 8 am and 12 pm to discuss arrangements",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Max \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ruby \" ) ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( DateTimeAndConstraint :dateTime1 ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) :dateTime2 ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" discuss arrangements \" ) ) ) ) ) )"
    },
    {
        "question": "add business meeting",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" business meeting \" ) ) ) ) ) )"
    },
    {
        "question": "pleas set a dinner date for saturday from 9 pm to 11 : 59 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 9 ) ) ) :time ( HourMinutePm :hours # ( Number 11 ) :minutes # ( Number 59 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" dinner date \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a review meeting with Jon , Sally , and Curt Monday for 30 minutes at 9 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jon \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sally \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Curt \" ) ) ) ) ) ) ) :duration ( ?= ( toMinutes # ( Number 30.0 ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" review meeting \" ) ) ) ) ) )"
    },
    {
        "question": "At snacks for dessert at 9 pm on the 5 th .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 5 ) ) :time ( NumberPM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" snacks for dessert \" ) ) ) ) ) )"
    },
    {
        "question": "4 PM is my dentist appointment .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a coffee date at the L.A. Starbucks at 4 : 00 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" the L.A. Starbucks \" ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" coffee date \" ) ) ) ) ) )"
    },
    {
        "question": "Can you put dinner out tonight on my calendar ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) :subject ( ?= # ( String \" dinner out \" ) ) ) ) ) )"
    },
    {
        "question": "Make a hair appointment for Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" hair appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I need to block off 3 hours today to write drafts .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 3 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) :subject ( ?= # ( String \" write drafts \" ) ) ) ) ) )"
    },
    {
        "question": "set me a staff meeting for Monday 8 Am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" staff meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Put a meeting with Ben , Jill , and Parker in room 403 for 4 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ben \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jill \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Parker \" ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" room 403 \" ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "i need a 1 hour long with Dan Schoffel",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting tomorrow morning at 10 am , it will last an hour",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Kaylie , Josh , Brandon , Hunter , and I will be going to the Water Park on the 24 th at 11 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kaylie \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Josh \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brandon \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Hunter \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 24 ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" going to the Water Park \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule Slipknot concert for January 3 at 8 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 3 ) :month # ( Month \" JANUARY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" Slipknot concert \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make an all day event for April first ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( MD :day # ( Number 1 ) :month # ( Month \" APRIL \" ) ) :event ( Constraint[Event] ) ) ) ) )"
    },
    {
        "question": "I should put in a call to Jill around 12 tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( TimeAround :time ( NumberPM :number # ( Number 12 ) ) ) :date ( Today ) ) :subject ( ?= # ( String \" call to Jill \" ) ) ) ) ) )"
    },
    {
        "question": "I want to set up a meeting with Barack Obama and Fiona Mason",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fiona Mason \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add the Aerosmith concert on Wednesday January 31 st to my calendar with the location .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 31 ) :month # ( Month \" JANUARY \" ) ) ) ) :subject ( ?= # ( String \" Aerosmith concert \" ) ) ) ) ) )"
    },
    {
        "question": "put meeting with pund and dev",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" pund \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" dev \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Eric on Monday Morning at 9 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Eric \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you please create a meeting for Wednesday , December 11 at 2 : 00 p.m. for Kimberly Scharf , Michael Scharf , Jason Scharf , Sara Scharf , and me Damon Straeter .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kimberly Scharf \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Michael Scharf \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jason Scharf \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sara Scharf \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Damon Straeter \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 11 ) :month # ( Month \" DECEMBER \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make appointment to today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Set up breakfast for the 4 th at 8 am at Stacy 's Diner",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Stacy's Diner \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 4 ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" breakfast \" ) ) ) ) ) )"
    },
    {
        "question": "I 've got an event for March 1 at 5 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 1 ) :month # ( Month \" MARCH \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Brandon is coming in to check on his Taxes on Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brandon \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" check on his Taxes \" ) ) ) ) ) )"
    },
    {
        "question": "put meet my girl friend tomorrow 8 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" meet my girl friend \" ) ) ) ) ) )"
    },
    {
        "question": "Make an event called Breakfast with Jim .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) :subject ( ?= # ( String \" Breakfast \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my boss Greg at 5 : 30 pm on Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Greg \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( HourMinutePm :hours # ( Number 5 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "create an event for sunday afternoon and name it going out with the girls",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) :subject ( ?= # ( String \" going out with the girls \" ) ) ) ) ) )"
    },
    {
        "question": "Create an event for 6 AM tomorrow : \" Print flight tickets \"",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" Print flight tickets \" ) ) ) ) ) )"
    },
    {
        "question": "Set an event for 10 am tomorrow , \" Meet with tax guy \"",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" Meet with tax guy \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule Car Shop with Tammi , Tony , Tommy , and Tim on Thursday afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tammi \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tony \" ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tommy \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tim \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) :subject ( ?= # ( String \" Car Shop \" ) ) ) ) ) )"
    },
    {
        "question": "Jane 's coming to visit next week on Saturday and Sunday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) :nonEmptyBase ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( DowOfWeekNew :dow # ( DayOfWeek \" SATURDAY \" ) :week ( NextWeekList ) ) :date2 ( nextDayOfWeek ( DowOfWeekNew :dow # ( DayOfWeek \" SATURDAY \" ) :week ( NextWeekList ) ) # ( DayOfWeek \" SUNDAY \" ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" visit \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule gym time with Mary tomorrow at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) :subject ( ?= # ( String \" gym time \" ) ) ) ) ) )"
    },
    {
        "question": "Ok . Set a lunch meeting on Wednesday at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Put that I had a workout session last week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( LastWeekNew ) ) :subject ( ?= # ( String \" workout session \" ) ) ) ) ) )"
    },
    {
        "question": "please make a meeting with Francis next Tuesday at 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Francis \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hi can you add golfing on Thursday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) :subject ( ?= # ( String \" golfing \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule me an event at 10 am tomororw",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add breakfast before 9 tomorrow morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( OnDateBeforeTime :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) :subject ( ?= # ( String \" breakfast \" ) ) ) ) ) )"
    },
    {
        "question": "set the meeting for 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add a meeting at Ronald 's at 5 pm today ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Ronald's \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a work lunch with David Lax tomorrow at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) :subject ( ?= # ( String \" work lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Find 15 minutes tomorrow for Straightening Up Bedroom .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 15 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" Straightening Up Bedroom \" ) ) ) ) ) )"
    },
    {
        "question": "Can you book my spa appointment after my dentist appointment ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" dentist appointment \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" spa appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I 'll be calling Ron on Monday at 7 : 30 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ron \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 7 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an all day event for tomorrow for 19 days",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] ) :period ( toDays # ( Number 19 ) ) :startDate ( Tomorrow ) ) ) ) )"
    },
    {
        "question": "ok can you create a walking event at 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" walking \" ) ) ) ) ) )"
    },
    {
        "question": "make a appointment for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "The tournament will be held all day on the 3 rd .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( nextDayOfMonth ( Today ) # ( Number 3 ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" tournament \" ) ) ) ) ) ) )"
    },
    {
        "question": "create baseball game on monday at 8",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" baseball game \" ) ) ) ) ) )"
    },
    {
        "question": "Add trekking to my calendar on upcoming friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" trekking \" ) ) ) ) ) )"
    },
    {
        "question": "I was hoping to add a meeting called Brunch on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" Brunch \" ) ) ) ) ) )"
    },
    {
        "question": "James , Aaron 's supervisor will meet with me since Aaron will not longer attend the meeting .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add birthday party for Saturday at 1 pm . Please invite Rocky , Lola , and Rosco .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rocky \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lola \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rosco \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" birthday party \" ) ) ) ) ) )"
    },
    {
        "question": "create meeting on tuesday at 5",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Ok , let 's see what 's coming up . Block out Feb 1 from 2 pm to 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( MD :day # ( Number 1 ) :month # ( Month \" FEBRUARY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 1 ) :month # ( Month \" FEBRUARY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Mark my calendar as \" Out of Town \" during march .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( FullMonthofMonth :month # ( Month \" MARCH \" ) ) ) :subject ( ?= # ( String \" Out of Town \" ) ) ) ) ) )"
    },
    {
        "question": "I will be in Seattle with Jake tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Seattle \" ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I need a workout added to my calendar tomorrow around noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( TimeAround :time ( Noon ) ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" workout \" ) ) ) ) ) )"
    },
    {
        "question": "create ball game on tuesday at 2",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" ball game \" ) ) ) ) ) )"
    },
    {
        "question": "Book an appointment with the doctor at parkview medical for next week around 3 pm on Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" parkview medical \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( DowOfWeekNew :dow # ( DayOfWeek \" WEDNESDAY \" ) :week ( NextWeekList ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" appointment with the doctor \" ) ) ) ) ) )"
    },
    {
        "question": "Make the lunch date with Jay on Saturday noon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jay \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" lunch date \" ) ) ) ) ) )"
    },
    {
        "question": "Add bowling tournament on the 22 nd through the 25 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( nextDayOfMonth ( Today ) # ( Number 22 ) ) :date2 ( nextDayOfMonth ( nextDayOfMonth ( Today ) # ( Number 22 ) ) # ( Number 25 ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" bowling tournament \" ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a team meeting on Tuesday at 8 : 30 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 8 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Put on the schedule accounting meeting with Karen and Dan Schoffel for Monday at 1 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karen \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" accounting meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Who 's on Rosenfelds team",
        "target": "( Yield :output ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rosenfeld \" ) ) ) ) ) ) )"
    },
    {
        "question": "Create schedule for dinner plan at 4 pm tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" dinner plan \" ) ) ) ) ) )"
    },
    {
        "question": "Who is elli 's boss 's boss ?",
        "target": "( Yield :output ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" elli \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "ok and then schedule a meeting to discuss the RBA decision on wednesday at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" discuss the RBA decision \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a brunch meeting with Jen on Wednesday at 11 : 00 am for 1 hour .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jen \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" brunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Add met workout goal to the current day .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) :subject ( ?= # ( String \" met workout goal \" ) ) ) ) ) )"
    },
    {
        "question": "Colonic Monday April 8",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 8 ) :month # ( Month \" APRIL \" ) ) ) ) :subject ( ?= # ( String \" Colonic \" ) ) ) ) ) )"
    },
    {
        "question": "Can you fire side sing along Saturday at 6 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" fire side sing along \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting with Abby and Jesse on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to make a meeting called Update with Jim at noon on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" Update \" ) ) ) ) ) )"
    },
    {
        "question": "Create a Sales Team Meeting tomorrow at 10 : 45 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinuteAm :hours # ( Number 10.0 ) :minutes # ( Number 45 ) ) ) ) :subject ( ?= # ( String \" Sales Team Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "create a lunch appointment at 12 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" lunch appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Barack Obama on my calender",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I wanna have a picnic at the Gorge park tomorrow at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Gorge park \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" picnic \" ) ) ) ) ) )"
    },
    {
        "question": "Hi , can you mark down a visit to the hospital with Shannon to see her new nephew on Saturday at 1 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Shannon \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" visit to the hospital \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a dinner meeting on Friday evening with Bill Door . Give us two hours and put the location down for Commander 's Palace .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill Door \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 2 ) ) ) :location ( ?= # ( LocationKeyphrase \" Commander's Palace \" ) ) :start ( DateTimeConstraint :constraint ( Evening ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) :subject ( ?= # ( String \" dinner meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I have a swim meet on Saturday , November 7 th at 6 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 7 ) :month # ( Month \" NOVEMBER \" ) ) :time ( NumberAM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" swim meet \" ) ) ) ) ) )"
    },
    {
        "question": "I need the basketball practice I had on October 15 at 3 pm on my calendar !",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( previousMonthDay ( Today ) # ( Month \" OCTOBER \" ) # ( Number 15 ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" basketball practice \" ) ) ) ) ) )"
    },
    {
        "question": "I have a dentist appointment with Dr. Takacs at 4 pm today ; can you fill in the location data for that ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dr. Takacs \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Can you create and event with Paige Ashworth and Cecelia Waller tomorrow at 4 : 30 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paige Ashworth \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cecelia Waller \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 4 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule lunch after the jog .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" jog \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I also need a promotional meeting with Nichole , Candace , and Thad on Monday at 11 : 00 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Nichole \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Candace \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Thad \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" promotional meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Please add dinner at 7 pm to my schedule on friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "make meeting on 3 : 00 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Find a 2 hour time period on Thursday to Visit the Park .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) :subject ( ?= # ( String \" Visit the Park \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting tomorrow afternoon with Maynard .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Maynard \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Please set up a meeting with Janice next Thursday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janice \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I meant lunch with George on Saturday at 1 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" George \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I have a business meeting with Kim on Monday at 4 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" business meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Paige ashworth has a birthday on the 22 nd",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 22 ) ) ) ) :subject ( ?= # ( String \" Paige ashworth has a birthday \" ) ) ) ) ) )"
    },
    {
        "question": "Create an event for today 8 : pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" event \" ) ) ) ) ) )"
    },
    {
        "question": "Appreciate it . Make me a 3 day event starting tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] ) :period ( toDays # ( Number 3 ) ) :startDate ( Tomorrow ) ) ) ) )"
    },
    {
        "question": "I had a doctors appointment on january 5 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( previousMonthDay ( Today ) # ( Month \" JANUARY \" ) # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Add draw up chart for monday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) :subject ( ?= # ( String \" draw up chart \" ) ) ) ) ) )"
    },
    {
        "question": "Put a meeting with Sam on my schedule for tomorrow at 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a Summon to be on the 27 th and ending on the 3 rd .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( nextDayOfMonth ( Today ) # ( Number 27 ) ) # ( Number 3 ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 27 ) ) ) ) :subject ( ?= # ( String \" Summon \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a workshop meeting sometime after 2 today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( ?> ( NumberPM :number # ( Number 2 ) ) ) :date ( Today ) ) :subject ( ?= # ( String \" workshop meeting \" ) ) ) ) ) )"
    },
    {
        "question": "add meeting with Tom at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a note that I had a Dermatologist appointment last Friday at 7 : 45 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( previousDayOfWeek ( Today ) # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 7 ) :minutes # ( Number 45 ) ) ) ) :subject ( ?= # ( String \" Dermatologist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Add hiking in Grand Canyon from 8 AM to 5 PM on Sunday 's schedule .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Grand Canyon \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" hiking \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a themepark trip for next Sunday at Morgan \u2019s Wonderland .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Morgan\\u2019s Wonderland \" ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) :subject ( ?= # ( String \" themepark trip \" ) ) ) ) ) )"
    },
    {
        "question": "Can we plan a Summer Camp for next summer ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( SeasonSummer ) ) :subject ( ?= # ( String \" Summer Camp \" ) ) ) ) ) )"
    },
    {
        "question": "I need to set up a meeting with Dave around 1 PM tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dave \" ) ) ) ) ) ) :start ( AroundDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want an event after brunch called Big Nap",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( GreaterThanFromStructDateTime :dateTimeConstraint ( ?= ( NextTime :time ( Brunch ) ) ) ) :subject ( ?= # ( String \" Big Nap \" ) ) ) ) ) )"
    },
    {
        "question": "put meeting with Abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a Doctor Appointment to my calendar for any time but this weekend .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( Constraint[Date] :dayOfWeek ( negate ( Weekend ) ) ) ) :subject ( ?= # ( String \" Doctor Appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to the statue of liberty with Derek on Tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Derek \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" statue of liberty \" ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "can we make something earlier than 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( OnDateBeforeTime :date ( Execute :intension ( refer ( extensionConstraint ( Constraint[Date] ) ) ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) )"
    },
    {
        "question": "make a appointment today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Can you please add an event to Friday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event for next monday at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "make something called New Appointment starting Thursday from 10 am to 11 am , and show me as Tentative",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" Tentative \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" New Appointment \" ) ) ) ) ) )"
    },
    {
        "question": "create chess meet on thursday at 10",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" chess meet \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a picnic on Father 's Day of next year ? It should start at 12 pm and last a couple of hours .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours ( Acouple ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( HolidayYear :holiday # ( Holiday \" FathersDay \" ) :year ( NextYear ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" picnic \" ) ) ) ) ) )"
    },
    {
        "question": "Set timing for hair appointment to evening .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :time ( Evening ) ) :subject ( ?= # ( String \" hair appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I am I have a soccer game I need to schedule from 5 to 6 pm next tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" soccer game \" ) ) ) ) ) )"
    },
    {
        "question": "Can you book a Leg workout on Tuesday at 9 : 30 am ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 9 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Leg workout \" ) ) ) ) ) )"
    },
    {
        "question": "Can you setup a doctor 's appointment for May 23 rd at 10 AM ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 23 ) :month # ( Month \" MAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" doctor's appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Create a date with Jimmy on Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jimmy \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" date \" ) ) ) ) ) )"
    },
    {
        "question": "I want to add an event titled \" Nicole \" on Friday , May 3 rd , from 3 : 30 pm to 4 : 30 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( MD :day # ( Number 3 ) :month # ( Month \" MAY \" ) ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 30.0 ) ) ) :time ( HourMinutePm :hours # ( Number 4 ) :minutes # ( Number 30.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 3 ) :month # ( Month \" MAY \" ) ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Nicole \" ) ) ) ) ) )"
    },
    {
        "question": "i need a new meeting scheduled in bellevue at 6 tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" bellevue \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event on April 30 th at 3 : 00 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 30.0 ) :month # ( Month \" APRIL \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "please add on the calender meeting with paul",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" paul \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Let 's mark me as away from 7 - 9 pm on the 25 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 25 ) ) :time ( NumberPM :number # ( Number 7 ) ) ) :time ( NumberPM :number # ( Number 9 ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 25 ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Cher Roydon , Jerri Skinner , Fiona Mason",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cher Roydon \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jerri Skinner \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fiona Mason \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add a lunch meeting tomorrow at 1 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Add Painting with a Twist on my calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" Painting with a Twist \" ) ) ) ) ) )"
    },
    {
        "question": "I need a night meeting on Friday with Allen .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Allen \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Please add I need to bring soccer shoes to tomorrow Calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" bring soccer shoes \" ) ) ) ) ) )"
    },
    {
        "question": "I had an event on January 27 last year ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( DowOfWeekNew :dow ( :dayOfWeek ( MD :day # ( Number 27 ) :month # ( Month \" JANUARY \" ) ) ) :week ( FullYearofYear :year ( LastYear ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule Tennis practice with Tia next Tuesday at 8 : 30 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tia \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 8 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Tennis practice \" ) ) ) ) ) )"
    },
    {
        "question": "Thanks ! Set up an event with Matthew next Tuesday at 11 : 30 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matthew \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinutePm :hours # ( Number 11 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a meeting called \" IT 'S JAYDEN IRFDAY \"",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" IT'S JAYDEN IRFDAY \" ) ) ) ) ) )"
    },
    {
        "question": "Add vacation with Abby for 5 days starting November 1 st .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) :nonEmptyBase ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" vacation \" ) ) ) :period ( toDays # ( Number 5 ) ) :startDate ( MD :day # ( Number 1 ) :month # ( Month \" NOVEMBER \" ) ) ) ) ) ) )"
    },
    {
        "question": "add diablo to my schedule this afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) :subject ( ?= # ( String \" diablo \" ) ) ) ) ) )"
    },
    {
        "question": "4 - 6 PM tonight is my book club",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" book club \" ) ) ) ) ) )"
    },
    {
        "question": "can i be free the whole day Thursday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :event ( Constraint[Event] :showAs ( ?= # ( ShowAsStatus \" Free \" ) ) ) ) ) ) )"
    },
    {
        "question": "please remind me to pick the groceries at 5 pm tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" pick the groceries \" ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting on Thursday at 10 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please schedule dinner with Fiona at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fiona \" ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule an event ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] ) ) ) )"
    },
    {
        "question": "Thanks . Can you add order takeout 2 hours before the play ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( PeriodDurationBeforeDateTime :dateTime ( :start ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" play \" ) ) ) ) ) ) ) :periodDuration ( PeriodDuration :duration ( toHours # ( Number 2 ) ) ) ) ) :subject ( ?= # ( String \" order takeout \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule golf for 10 : 00 AM on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" golf \" ) ) ) ) ) )"
    },
    {
        "question": "I am going to gym on sunday at 8 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" gym \" ) ) ) ) ) )"
    },
    {
        "question": "Who 's on Elli 's team now ?",
        "target": "( Yield :output ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) )"
    },
    {
        "question": "What 's my manager 's name ?",
        "target": "( Yield :output ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) )"
    },
    {
        "question": "Can you set up a meeting for Friday with Jake for 3 pm through the end today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "wait , ok . Add dinner with Jim on the 23 rd at 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 23 ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Please put going fishing 9 : 00 AM to 1 : 00 PM instead .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberAM :number # ( Number 9 ) ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" going fishing \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a Fajita Eating Session tonight at 6 : 30 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinutePm :hours # ( Number 6 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Fajita Eating Session \" ) ) ) ) ) )"
    },
    {
        "question": "add an event for party at lake on July 4 th at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" lake \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 4 ) :month # ( Month \" JULY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" party \" ) ) ) ) ) )"
    },
    {
        "question": "Book 2 hours tomorrow for doctor",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" doctor \" ) ) ) ) ) )"
    },
    {
        "question": "After the last movie showing on Saturday , schedule an ice cream party .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( :end ( FindLastEvent :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" movie showing \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" ice cream party \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule my doctors appointment for 2 : 00 pm to 2 : 30 pm tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 30.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "On May 4 th , can you add an event called \" Movie \" at 7 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 4 ) :month # ( Month \" MAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" Movie \" ) ) ) ) ) )"
    },
    {
        "question": "Add a trip to Norway for comingsummer .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Norway \" ) ) :start ( Constraint[DateTime] :date ( SeasonSummer ) ) :subject ( ?= # ( String \" trip \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Abby tomorrow at 3",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "add a meeting with mrs ashford for Monday at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" mrs ashford \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Also put meeting with Jane for workout challenge at 12 : 00 pm next Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" workout challenge \" ) ) ) ) ) )"
    },
    {
        "question": "Throw a lunch meeting on my calendar for tomorrow please .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Thanks , remain me on Saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" remain \" ) ) ) ) ) )"
    },
    {
        "question": "Please create a meeting for 3 pm through the end of the day",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a dentist appointment in the fall .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( SeasonFall ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Plan an event",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] ) ) ) )"
    },
    {
        "question": "Show me as busy for 30 minutes after the conference .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 30.0 ) ) ) :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" conference \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add paddleboarding tomorrow at 2 PM ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" paddleboarding \" ) ) ) ) ) )"
    },
    {
        "question": "Can you set up a Publicity meeting for early Tuesday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Early ) :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) :subject ( ?= # ( String \" Publicity meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to spend tomorrow in Bellevue for 3 days",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Bellevue \" ) ) ) :period ( toDays # ( Number 3 ) ) :startDate ( Tomorrow ) ) ) ) )"
    },
    {
        "question": "Set up a 1 pm Dog Bathing on Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Dog Bathing \" ) ) ) ) ) )"
    },
    {
        "question": "Add an event late in the morning on tuesday . Set it for 2 hours and mark me as busy .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) :start ( DateTimeConstraint :constraint ( LateMorning ) :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Please add a meeting with Brenda at 2 PM tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brenda \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Mike for tomorrow night .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mike \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Set up coffee with Kate for tomorrow at 3 : 15 PM at Starbucks .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kate \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Starbucks \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 15 ) ) ) ) :subject ( ?= # ( String \" coffee \" ) ) ) ) ) )"
    },
    {
        "question": "Start the lawn party at 4 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" lawn party \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule the one at 10 : 00 AN",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Cam you show status as busy from 8 to 11 am tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a run around WVU coliseum for 1 hour on Friday at 7 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :location ( ?= # ( LocationKeyphrase \" WVU coliseum \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" run \" ) ) ) ) ) )"
    },
    {
        "question": "I want to add dinner with Mary at 6 p.m. to my schedule tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add to the calendar meeting with Brenda Raggin on Friday at 3 : 00 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brenda Raggin \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add music competition for the whole upcoming weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( ThisWeekend ) :event ( Constraint[Event] :subject ( ?= # ( String \" music competition \" ) ) ) ) ) ) )"
    },
    {
        "question": "Please create event interviews from 10 th to 12 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( nextDayOfMonth ( Today ) # ( Number 10.0 ) ) :date2 ( nextDayOfMonth ( nextDayOfMonth ( Today ) # ( Number 10.0 ) ) # ( Number 12 ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" interviews \" ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event in Zion national Park on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Zion national Park \" ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "An appointment tomorrow for 5 minutes between 3 and 5",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 5 ) ) ) :start ( DateTimeAndConstraint :dateTime1 ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) :dateTime2 ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "put on the workout in gym session at 06 . 00 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" workout in gym session \" ) ) ) ) ) )"
    },
    {
        "question": "Okay , that 's a good thing because I 'd like to add \" Pick Up Zip Car for So Cal Trip \" to Wednesday at 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" Pick Up Zip Car for So Cal Trip \" ) ) ) ) ) )"
    },
    {
        "question": "Go ahead and add a two hour block from 2 - 4 next Friday for a long overdue haircut and pedicure .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" long overdue haircut and pedicure \" ) ) ) ) ) )"
    },
    {
        "question": "sitting on the dock by the bay at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" dock by the bay \" ) ) ) ) ) )"
    },
    {
        "question": "Can you save a meeting with Damon Ellery Wenesday at 10 am ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Damon Ellery \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you book a meeting for then at 11 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put on the schedule that I have a code writing session today at 11 : 20 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinuteAm :hours # ( Number 11 ) :minutes # ( Number 20.0 ) ) ) ) :subject ( ?= # ( String \" code writing session \" ) ) ) ) ) )"
    },
    {
        "question": "5 th of April will be the new meeting",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 5 ) :month # ( Month \" APRIL \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add event \" Post debrief evaluation \" with Karl Boon at 11 : 30 am on June 7",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karl Boon \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 7 ) :month # ( Month \" JUNE \" ) ) :time ( HourMinuteAm :hours # ( Number 11 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Post debrief evaluation \" ) ) ) ) ) )"
    },
    {
        "question": "Please add a new event to my calander : Lunch with Barak on Wednesday at 12 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barak \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" Lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Awesome . Could you set up a meeting at 5 on Thursday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Who is Sally Jones reporting to ?",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sally Jones \" ) ) ) ) ) ) )"
    },
    {
        "question": "I need the shopping spree I had last Friday into my calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( previousDayOfWeek ( Today ) # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" shopping spree \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a business meeting with Mr Rogers tomorrow at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mr Rogers \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" business meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule Call Parents for Sunday at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" Call Parents \" ) ) ) ) ) )"
    },
    {
        "question": "Add meet with Luna for sales discussion at 3 p m.",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Luna \" ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" sales discussion \" ) ) ) ) ) )"
    },
    {
        "question": "Can you put me down for an appointment April 15 th at 8 am ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 15 ) :month # ( Month \" APRIL \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add dinner with Justin at 6 : 30 pm tonight .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Justin \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinutePm :hours # ( Number 6 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I need to plan my daughter 's party for Saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" daughter's party \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a appointment with chief tl gary today evening",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" chief tl gary \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Evening ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Create an event called Nashville vacation from tomorrow and lasting a week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" Nashville vacation \" ) ) ) :period ( toWeeks # ( Number 1 ) ) :startDate ( Tomorrow ) ) ) ) )"
    },
    {
        "question": "make a meeting with pattinson on tomorrow 4 . 00 - 4 . 30 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" pattinson \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 4 ) ) ) :time ( HourMinutePm :hours # ( Number 4 ) :minutes # ( Number 30.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "i want to meeting with kristen on next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kristen \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Hi . Party is at 7 : 30 on the 29 th . Should run 2 hours .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 29 ) ) :time ( HourMinutePm :hours # ( Number 7 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Party \" ) ) ) ) ) )"
    },
    {
        "question": "Ok , than lets schedule Batman for 2 : PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" Batman \" ) ) ) ) ) )"
    },
    {
        "question": "Meeting with Accountant James Sunday morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Accountant James \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "add a meeting with barack obama today on 1130 in the morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" barack obama \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinuteAm :hours # ( Number 11 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put the birthday party at Kai Sushi on my calendar for Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Kai Sushi \" ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" birthday party \" ) ) ) ) ) )"
    },
    {
        "question": "Add a doctor appointment to my schedule on Saturday at 5 pm for 3 hours",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 3 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" doctor appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add reading by the downstairs cafe ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" reading by the downstairs cafe \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule 1 hour for Eating Rice Chips on Sunday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) :subject ( ?= # ( String \" Eating Rice Chips \" ) ) ) ) ) )"
    },
    {
        "question": "basketball game 7 pm saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" basketball game \" ) ) ) ) ) )"
    },
    {
        "question": "Create another meeting for monday at dinner as well",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( Dinner ) ) ) :subject ( ?= # ( String \" meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Add a doctors appointment tomorrow morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "When am I free for lunch next week ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( NextWeekList ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting Feb 21 of next year",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MDY :day # ( Number 21 ) :month # ( Month \" FEBRUARY \" ) :year ( NextYear ) ) ) ) ) ) ) )"
    },
    {
        "question": "Great ! Add an appointment at the end of the day on June 6 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 6 ) :month # ( Month \" JUNE \" ) ) :time ( EndOfWorkDay ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a \" Doctor 's Appointment \" at 4 pm this Thursday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" Doctor's Appointment \" ) ) ) ) ) )"
    },
    {
        "question": "okay and create a wine tour for all weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( ThisWeekend ) :event ( Constraint[Event] :subject ( ?= # ( String \" wine tour \" ) ) ) ) ) ) )"
    },
    {
        "question": "put a presentation at sep 12",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 12 ) :month # ( Month \" SEPTEMBER \" ) ) ) ) :subject ( ?= # ( String \" presentation \" ) ) ) ) ) )"
    },
    {
        "question": "Monday April 8 back to work",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 8 ) :month # ( Month \" APRIL \" ) ) ) ) :subject ( ?= # ( String \" back to work \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a hike through the Rocky Mountains tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" the Rocky Mountains \" ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" hike \" ) ) ) ) ) )"
    },
    {
        "question": "could you please set me an event date ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" date \" ) ) ) ) ) )"
    },
    {
        "question": "Add a co - worker sync with Cecelia Waller for 1 hour after the Lunch date .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cecelia Waller \" ) ) ) ) ) ) :start ( ?= ( adjustByPeriodDuration ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" Lunch date \" ) ) ) ) ) ) ) ( PeriodDuration :duration ( toHours # ( Number 1 ) ) ) ) ) :subject ( ?= # ( String \" co-worker sync \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule dogsitter next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( NextWeekList ) ) :subject ( ?= # ( String \" dogsitter \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a vet appointment for my cat for Friday from 2 pm to 4 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" vet appointment for my cat \" ) ) ) ) ) )"
    },
    {
        "question": "Busy all Wednesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :event ( Constraint[Event] :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) ) ) ) ) )"
    },
    {
        "question": "how many members in my team ?",
        "target": "( Yield :output ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) )"
    },
    {
        "question": "put on meet with smith and john",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" smith \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" john \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Show my status as tentative for the rest of the week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :nonEmptyBase ( EventDuringRange :event ( Constraint[Event] ) :range ( ThisWeek ) ) :showAs ( ?= # ( ShowAsStatus \" Tentative \" ) ) ) ) ) )"
    },
    {
        "question": "Trying to get a meeting together ... just me , Wade and Janice",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Wade \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janice \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I also need a dental appointment tomorrow afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" dental appointment \" ) ) ) ) ) )"
    },
    {
        "question": "can you please put on my calendar that i have a movie date tomorrow starting at 7 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" movie date \" ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting in the afternoon on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add Annual Company Picnic at Central Park on Saturday at 11 : 15 am ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Central Park \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 11 ) :minutes # ( Number 15 ) ) ) ) :subject ( ?= # ( String \" Annual Company Picnic \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule my soccer appointment at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" soccer appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Make an all day event starting the 19 th called partytime",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( nextDayOfMonth ( Today ) # ( Number 19 ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" partytime \" ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event called relaxing me time from 8 AM to noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberAM :number # ( Number 8 ) ) ) :time ( Noon ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" relaxing me time \" ) ) ) ) ) )"
    },
    {
        "question": "I also need to call my accountant 9 days before tax day to check on my taxes and that will be at noon and will probably last about 45 minutes and I need to be shown as busy",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 45 ) ) ) :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( PeriodBeforeDate :date ( NextHolidayFromToday :holiday # ( Holiday \" TaxDay \" ) ) :period ( toDays # ( Number 9 ) ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" call my accountant \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm attending a Math Conference in Washington D.C. tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Washington D.C. \" ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" Math Conference \" ) ) ) ) ) )"
    },
    {
        "question": "create a staff meeting headed by damon straeter and add dan schoffel",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" damon straeter \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" dan schoffel \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" staff meeting \" ) ) ) ) ) )"
    },
    {
        "question": "ok put meeting on jul 26",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 26 ) :month # ( Month \" JULY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add dinner at 6 to 8 pm on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to be at Fort Myers Beach tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Fort Myers Beach \" ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "make a appointment with jacob tomorrow 9 . 00 am - 9 . 30 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jacob \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) :time ( HourMinuteAm :hours # ( Number 9 ) :minutes # ( Number 30.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Do I have time to schedule a meditation session this afternoon ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) :subject ( ?= # ( String \" meditation session \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting for tomorrow at 8 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting in 15 minutes with bill",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" bill \" ) ) ) ) ) ) :start ( ?= ( adjustByPeriodDuration ( Now ) ( PeriodDuration :duration ( toMinutes # ( Number 15 ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Going on holiday to India for 5 days",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" holiday to India \" ) ) ) :period ( toDays # ( Number 5 ) ) :startDate ( Execute :intension ( refer ( extensionConstraint ( Constraint[Date] ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hi , can you add a meeting with Hailey at lunch and ending at the end of the day on Friday please ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Hailey \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Lunch ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Lunch ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Scot for Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Scot \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule pack for trip to Disney Land on Friday 2 pm for 2 hours .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" pack for trip to Disney Land \" ) ) ) ) ) )"
    },
    {
        "question": "Make me an event next friday at 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Yes , I will take a day off Monday October 21 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( MD :day # ( Number 21 ) :month # ( Month \" OCTOBER \" ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" take a day off \" ) ) ) ) ) ) )"
    },
    {
        "question": "can you add lunch with Mia sometime between 10 am and 12 pm please .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mia \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Who are my reports",
        "target": "( Yield :output ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) )"
    },
    {
        "question": "Please schedule a meeting with the pope tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" pope \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event for Monday at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    }
]