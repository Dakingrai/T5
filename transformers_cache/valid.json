[
    {
        "question": "Make me a meeting with my team . We need a room",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( roomRequest ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with jake and his team for next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jake \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jake \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Schedule party time after happy hour with Brett , and add Joe 's team to the fun .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joe \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipientConstraint :recipientConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brett \" ) ) ) :subject ( ?~= # ( String \" happy hour \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" party time \" ) ) ) ) ) )"
    },
    {
        "question": "I will be in Seattle tomorrow for 89 days with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :nonEmptyBase ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Seattle \" ) ) ) :period ( toDays # ( Number 89 ) ) :startDate ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a meeting with Chan 's boss at 10 am on Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chan \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a call with Matt and his manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matt \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matt \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" call \" ) ) ) ) ) )"
    },
    {
        "question": "Now I 've got to set a get together with Meg and her supervisor for tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Meg \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Meg \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" get together \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my boss for this Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you set up a presentation with Elli and her Team tomorrow at 3 ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" presentation \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Jake and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add me a room for my Team at NERD please , for thursday afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" NERD \" ) ) ( roomRequest ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Please add to the calendar meeting with team on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to have a conference with Janet and her supervisor on Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janet \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janet \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" conference \" ) ) ) ) ) )"
    },
    {
        "question": "create meeting with coworkers at 8 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting called reviews with Cheyenne 's manager on friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cheyenne \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" reviews \" ) ) ) ) ) )"
    },
    {
        "question": "That looks good Now please schedule a meeting with manager in 2020",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( FullYearofYear :year # ( Number 2020.0 ) ) ) ) ) ) )"
    },
    {
        "question": "Make me an event tomorrow with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Great , I want a meeting with Kim Possible 's team . Can you schedule that for me please ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting with Dan Schoffel and his bosses boss on Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a breakfast meeting with Elli and her skip on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" breakfast meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add a meeting with Sue 's manager next week ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sue \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "make dinner with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a dinner with my boss about our future business partners .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "When the morning meeting ends I need to see Harriet 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Harriet \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" morning meeting \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "create meeting with boss on tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please make a meeting with Jesse and his skip tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "make an event for next tuesday with Elli , her boss , Jake and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule Yearbook Club First Meeting with Shannon and her supervisor on August 16 th at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Shannon \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Shannon \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 16 ) :month # ( Month \" AUGUST \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Yearbook Club First Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I want to meet with Gregory 's manager tomorrow around noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Gregory \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Jake , his manager , Elli and her manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add drinks with the team on Friday at 8 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" drinks \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Ryan and his boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ryan \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ryan \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please create a lunch with Sam , his boss , Nelly her boss to discuss the new contract .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Nelly \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Nelly \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with bobs team after the lunch on Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" bobs \" ) ) ) ) ) ) ) :start ( OnDateAfterTime :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( Lunch ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with my boss tomorrow at 5 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a coffee day with my boss ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" coffee day \" ) ) ) ) ) )"
    },
    {
        "question": "I have Medical Decision Discussion planned for tomorrow at 1 with Janice and her supervisor .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janice \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janice \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Medical Decision Discussion \" ) ) ) ) ) )"
    },
    {
        "question": "make a dinner event with my coworkers",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Create a budget meeting to discuss the kingdom expenses on Friday with Qyburn and his boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Qyburn \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Qyburn \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" budget meeting to discuss the kingdom expenses \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting with Tom 's boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "put dinner meeting with manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" dinner meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule breakfast meeting with boss this Tuesday at 8 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" breakfast meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Right after the orientation , set up a brunch and invite Scotty 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Scotty \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" orientation \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" brunch \" ) ) ) ) ) )"
    },
    {
        "question": "Set a date for a group meeting with Maria and her manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Maria \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Maria \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" group meeting \" ) ) ) ) ) )"
    },
    {
        "question": "My team needs a room in Berkeley .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" Berkeley \" ) ) ( roomRequest ) ) ) ) ) )"
    },
    {
        "question": "create work conference with boss on friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" work conference \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event for hanging out with co - workers from 6 - 8 pm tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" hanging out \" ) ) ) ) ) )"
    },
    {
        "question": "I am going to see Abby and her boss tomorrow for Subjective Things",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" Subjective Things \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with Elli and her team next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Can you make a meeting with Kim her boss with Abby and her Boss for next week ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Thanks , now schedule another meeting with Grace and her boss for next thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Grace \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Grace \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with David Crim and his team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my boss tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "lunch meeting with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Hey lets make a meeting for next week with Jake and his manager with Elli and his manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Have rehearsal with the team this Friday at 2 pm to 6 pm .",
        "target": "( do ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" rehearsal \" ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event for tomorrow at 8 AM . John and his supervisor will attend the meeting .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Alright , now let 's find a time to meet Janet and her team on Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janet \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janet \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Abby and her team for tomorrow night",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting tomorrow with Ryan and his manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ryan \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ryan \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Can you set me up a meeting with Jen and her boss ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jen \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jen \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to set up a Brainstorming Meeting with Tyler and his manager for tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tyler \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tyler \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" Brainstorming Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I am going to be with Abby and her boss tomorrow from 3 to 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "put appointment my new boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Abby and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I NEED TO MEET JOEL 'S MANAGER",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" JOEL \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Will I be having dinner with Hans , his boss , Fenny and her boss anytime this week ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Hans \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Hans \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fenny \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fenny \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeek ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Help in making an appointment with the staff tomorrow at 11 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to see Jack and their manager for a budget meeting this week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeek ) ) :subject ( ?= # ( String \" budget meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Can you set up a lunch meeting with my boss tomorrow at noon ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a call with my team Friday at 2",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" call \" ) ) ) ) ) )"
    },
    {
        "question": "Can you create a new meeting with my manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "ARRANGE MEETING WITH BOSS ON FRIDAY",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a meeting with my direct reports on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule dinner with the team at 5 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Book a time to meet , one on one , with my manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :isOneOnOne ( ?= # ( Boolean true ) ) ) ) ) )"
    },
    {
        "question": "Schedule a sales meeting with Jake 's Manager 's Manager tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" sales meeting \" ) ) ) ) ) )"
    },
    {
        "question": "i will be with abby and her skip tomorrow at 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a review meeting with Sue and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sue \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sue \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" review meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Make a lunch with Kim Possible , Elli and their respective bosses this Week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Kim and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event for Tuesday at 3 pm with my manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add Jennifer and her skip to a coffee meeting at 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" coffee meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to set up something with my manager tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with supervisor on thursday at 10 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Great . Make a team building event with Dan Morton 's team this weekend .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Morton \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeekend ) ) :subject ( ?= # ( String \" team building \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a time with Elli Parker and her team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli Parker \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli Parker \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make me a meeting with Kim , her manager , Elli , and her manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Fit in a meeting with Sam and his supervisor today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "I will be in Spain with my team all weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Spain \" ) ) :nonEmptyBase ( EventAllDayForDateRange :dateRange ( ThisWeekend ) :event ( Constraint[Event] ) ) ) ) ) )"
    },
    {
        "question": "set up a meeting for friday with Jennifer and Elli and their bosses",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Invite Daniel 's team to dinner after the presentation .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Daniel \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" presentation \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Make me a dinner with my team but do not include Thanos",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Thanos \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with the whole team next week sometime in the evening .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( andConstraint ( Constraint[DateTime] :date ( NextWeekList ) ) ( Constraint[DateTime] :time ( Evening ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Lee 's boss called Salary Negotiation tomorrow at 9 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lee \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" Salary Negotiation \" ) ) ) ) ) )"
    },
    {
        "question": "Add a dinner event with David Lax and his reports for tomorrow night at 6 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner event \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a lunch with my boss around noon today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( AroundDateTime :dateTime ( DateAtTimeWithDefaults :date ( Today ) :time ( Noon ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Abby and her skip Friday morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Create a new meeting with Ben and Brad and their bosses .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ben \" ) ) ) ) ) ) ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brad \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ben \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brad \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make an appointment with my boss ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add Build Legos with Elli , her boss , Jake and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Build Legos \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Kim 's team and remove Watts",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Watts \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "make an appointment with John 's boss at today 7 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 7 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please make another meeting with Abby and her skip next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Add to schedule hiring presentation with Joe and his boss on Friday at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joe \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joe \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" hiring presentation \" ) ) ) ) ) )"
    },
    {
        "question": "Hey there - I need to take my manager to lunch next Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add a meeting with David and his report Thursday at noon ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "Great . After the happy hour , I need to see Jim 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" happy hour \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I will be with my team for 3 days starting tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :nonEmptyBase ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] ) :period ( toDays # ( Number 3 ) ) :startDate ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting on Thursday with my manager , gon na be all day",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :nonEmptyBase ( EventAllDayOnDate :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :event ( Constraint[Event] ) ) ) ) ) )"
    },
    {
        "question": "I need to meet my team in a room at NERD for Sat at 11 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" NERD \" ) ) ( roomRequest ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to be with my team tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting to talk about the performance appraisal process with my boss at 8 am on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" performance appraisal process \" ) ) ) ) ) )"
    },
    {
        "question": "I want to set up a meeting this Friday at 11 AM with Julie and her manager Dan",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Julie \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Julie \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "create work conference on saturday at 3 and invite my manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" work conference \" ) ) ) ) ) )"
    },
    {
        "question": "Add dinner with team to my calendar tomorrow at 6 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Make a dinner with my team and make sure Abby is not there",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Watts team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Watts \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "When I return from golfing I need to see Kadence and her team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kadence \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kadence \" ) ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" golfing \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks , now set a training session with Jesse Rosenfeld 's team on the 21 st",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 21 ) ) ) ) :subject ( ?= # ( String \" training session \" ) ) ) ) ) )"
    },
    {
        "question": "Also schedule a meeting with Jeri 's manager at 3 : 00 Tuesday as well .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jeri \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a new meeting with Catalina and her manager at 1 : 15 pm on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Catalina \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Catalina \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 15 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Good , now add brunch with Paula and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paula \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paula \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" brunch \" ) ) ) ) ) )"
    },
    {
        "question": "I need to have a lunch date with my boss tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" lunch date \" ) ) ) ) ) )"
    },
    {
        "question": "Also setup up a lunch meeting for Friday with Kim Possible and her team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a co - worker sync next monday with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" co-worker sync \" ) ) ) ) ) )"
    },
    {
        "question": "Let 's add a meeting at 3 PM with my manager for today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule my meeting with Sarumon and his boss next Wednesday at Orthanc ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarumon \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarumon \" ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Orthanc \" ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an Event with the reports of David Lax",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I will be meeting Dan Marton , Cain , and their respective bosses this Tuesday . Please set it up and invite them .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cain \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cain \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with my manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Kim and her reports for Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a prep with JR and megan at noon today and make sure their bosses are on it",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" JR \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" megan \" ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" JR \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" megan \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" prep \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meal with just Abby and all of Kim 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" meal \" ) ) ) ) ) )"
    },
    {
        "question": "Set a meeting with Kim 's reports tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Create Brainstorming Plan with Jaina and her boss for July 18 th at 5 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jaina \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jaina \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 18 ) :month # ( Month \" JULY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" Brainstorming Plan \" ) ) ) ) ) )"
    },
    {
        "question": "Can you set up a lunch with David Lax and his team for next week ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Cool . Can you put a catch up meeting with Abby and Abby 's boss for an hour tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" catch up meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Please set a meeting with Boza 's boss tomorrow at 6 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Boza \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Yes , schedule me for lunch with my boss Friday at 1 p.m. and show me as busy during that time .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting with the reports tomorrow at 2 ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'll be seeing my supervisor at 4 today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please try again . Schedule a meeting with the boss 's boss of Dan Schoffel .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my team for Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Meeting with Abby Gonano and her team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby Gonano \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby Gonano \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a race with Abby Gonano and team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby Gonano \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby Gonano \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" race \" ) ) ) ) ) )"
    },
    {
        "question": "I 'd like to meet with Dan Schoffel 's reports tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Robert and his manager will be here for a meeting at 3 pm tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Robert \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Robert \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I will be with my team for the next 100 days to celebrate REno starting tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :nonEmptyBase ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" celebrate REno \" ) ) ) :period ( toDays # ( Number 100.0 ) ) :startDate ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with my team but do nt invite abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Kim Possible and her manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting in the afternoon on Monday with Kim Possible 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with boss at 5",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please book a meeting for tomorrow with Sarah 's manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I need to have a meeting with Joe and his manager monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joe \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joe \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Kim 's reports for next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Thanks , now can you set up a meeting with Jenny 's manager at 10 am ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jenny \" ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a woodworking workshop with Woody and his boss tomorrow at 4 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Woody \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Woody \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" woodworking workshop \" ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Tyler and his boss for tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tyler \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tyler \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "create meeting with my boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Book a meeting with Jackie and her manager this weekend .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jackie \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jackie \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeekend ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my manager at 1300 tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinuteMilitary :hours # ( Number 13 ) :minutes # ( Number 0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Abby and her team on Wednesday at 3 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event on my calendar and invite Samson , his boss , Samuel and his boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Samson \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Samson \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Samuel \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Samuel \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a one hour meeting with my manager as soon as possible .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( Now ) ) ) ) ) )"
    },
    {
        "question": "Please make a meeting with my team tomorrow at noon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "I actually need to meet with Annabelle 's boss at 10 on friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Annabelle \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with my manager Wednesday at 11 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Could you make me a meeting with Abby , Kim , and Kim 's manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please create a meeting for tomorrow with Lindsay 's manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lindsay \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Can you book lunch with Rachelle 's boss after my appointment ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rachelle \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" appointment \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Can you tell my staff to come to a meeting tomorrow at noon for one hour ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) :subject ( ?= # ( String \" staff \" ) ) ) ) ) )"
    },
    {
        "question": "I need a lunch meeting with my reports Sunday at 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Make me a meeting with Jennifer , her boss , David Lax , and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "please make me a team bonding event around 8 pm with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :time ( TimeAround :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" team bonding \" ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with james 's manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" james \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Kim 's boss 's boss next Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule breakfast meeting with boss this Tuesday at 8 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" breakfast meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Make a lunch with Abby and Crim 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Thanks , now I also need a meeting on the 1 st with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make me an appointment with the team for Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "create an event with sherin 's supervisor",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" sherin \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with my manager tomorrow around 2 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Hannah and her boss for July 24 th at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Hannah \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Hannah \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 24 ) :month # ( Month \" JULY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a new meeting with Jesse and their team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Have a private meeting with my supervisor for this week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeek ) ) :subject ( ?= # ( String \" private meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Create a lunch appointment with Kim 's team and include Elli as well",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch appointment \" ) ) ) ) ) )"
    },
    {
        "question": "make a lunch with Tom and his manager for friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Liz , Kim and Kim 's skip tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Liz \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "set up a meeting with both of David Crim 's reports today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "I need to check up with Jacob 's team after the staff meeting .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jacob \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" staff meeting \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" check up \" ) ) ) ) ) )"
    },
    {
        "question": "Please scheudle a meeting with David Lax , his boss , Paul and his supervisor",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paul \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paul \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an appointment with Eugene and Eugene 's team on Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Eugene \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Eugene \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add lunch with Lisa 2 hours before before the meeting with my boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lisa \" ) ) ) ) ) ) :start ( ?= ( PeriodDurationBeforeDateTime :dateTime ( :start ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) ) ) :periodDuration ( PeriodDuration :duration ( toHours # ( Number 2 ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a coffee date at 10 : 00 a.m. with David Lax and his manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" coffee date \" ) ) ) ) ) )"
    },
    {
        "question": "I need time with my team on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "arrange a meeting with Mike and his manager for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mike \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mike \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "put meeting with my manager at 10 . 00 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a team building experience and add everyone on Kim 's team , except Jennifer",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" team building experience \" ) ) ) ) ) )"
    },
    {
        "question": "My team and I have a company retreat starting on sunday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) :subject ( ?= # ( String \" company retreat \" ) ) ) ) ) )"
    },
    {
        "question": "Ok , great , now make an appointment with Dennis and his boss for next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dennis \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dennis \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to the mall with the boss and his team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) :subject ( ?= # ( String \" going to mall \" ) ) ) ) ) )"
    },
    {
        "question": "please make a meeting with abby and team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "i want to meet Hokage 's manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Hokage \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to meet with Kelly and her supervisor tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kelly \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kelly \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks , I want to add lunch with Jason and his supervisor on the 22 nd",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jason \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jason \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 22 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "How about we schedule something with Jim 's team after the lunch on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" lunch \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you book my check - in with Liara 's boss on Wednesday at 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Liara \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule Jennifer and her team for a volleyball match",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" volleyball match \" ) ) ) ) ) )"
    },
    {
        "question": "I would like to see Stephanie and her team after the big conference on Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Stephanie \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Stephanie \" ) ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" big conference \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please create a meeting with Julie and her manager at 10 am tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Julie \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Julie \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a coffee break with Chelsea 's manager tomorrow at 11 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chelsea \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" coffee break \" ) ) ) ) ) )"
    },
    {
        "question": "I need to make a meeting with my boss later today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Late ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Can put my team on a meeting but do nt include abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting for Friday at 3 : 25 pm with Kare and add her supervisor to the event .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kare \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kare \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 25 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Okay , set up a meeting with Tom 's manager for 10 am on Thursday please.e",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with all Team members next year",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( FullYearofYear :year ( NextYear ) ) ) ) ) ) )"
    },
    {
        "question": "Meeting for dinner tomorrow with my boss , create an event .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Add meeting with Tiffany 's manager on Thursday at 3 : 30 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tiffany \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a new meeting with Jacob and his manager this Friday at 6 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jacob \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jacob \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my boss , for my next pay raise .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" my next pay raise \" ) ) ) ) ) )"
    },
    {
        "question": "Make an event with Kim possible 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim possible \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make another meeting with Elli and her skip on 10 November",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 10.0 ) :month # ( Month \" NOVEMBER \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'd like to book a meeting with Maxwell and his manager on April 30 at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Maxwell \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Maxwell \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 30.0 ) :month # ( Month \" APRIL \" ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Jill and her manager and reserve a conference room",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jill \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jill \" ) ) ) ) ) ) ) ) :location ( roomRequest ) ) ) ) )"
    },
    {
        "question": "On Friday schedule a phone conference with Sam and his supervisor in the evening .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Evening ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) :subject ( ?= # ( String \" phone conference \" ) ) ) ) ) )"
    },
    {
        "question": "I am meeting with Jane 's manager at 12 pm Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule an appointment with Sarah 's team after the awards gala on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" awards gala \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to schedule a meeting with the team on early April 25 th .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Early ) :date ( MD :day # ( Number 25 ) :month # ( Month \" APRIL \" ) ) ) ) ) ) )"
    },
    {
        "question": "Put a new appointment with Julissa and John with their supervisors at Mac 's on Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Julissa \" ) ) ) ) ) ) ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Julissa \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Mac's \" ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "add meeting for whole group",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting tomorrow with Tom 's boss , it 's from 9 am to 9 : 25 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) :time ( HourMinuteAm :hours # ( Number 9 ) :minutes # ( Number 25 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule weekly catchup on tuesday morning with My whole team and brian .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" brian \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) :subject ( ?= # ( String \" weekly catchup \" ) ) ) ) ) )"
    },
    {
        "question": "I have a lunch meeting with team at 12 pm tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "add meeting with Jim 's manager to calendar from yesterday at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Yesterday ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting to review emails with Mike and Mike 's Manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mike \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mike \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" review emails \" ) ) ) ) ) )"
    },
    {
        "question": "Can I see Mark 's manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mark \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I also need to meet with June 's manager tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" June \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I have a Team Marathon Meeting with Savannah and her manager at 1 pm on Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Savannah \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Savannah \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Team Marathon Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with co - workers this Wednesday afternoon at the Globe Life park .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Globe Life park \" ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Meeting with Jesse Rosenfeld 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "After the management meeting , make a meeting with Sarah and her team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" management meeting \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please create an event for lunch tomorrow with Savannah . Who is her supervisor ?",
        "target": "( do ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Savannah \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) ) ( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Savannah \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you get set a breakfast meeting with my manager for early next Friday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Early ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) :subject ( ?= # ( String \" breakfast meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Abby and her team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "i need a meeting with my team and add kim",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting today at 3 with my team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you create a new meeting with the team tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Please set up an appointment with my team for Sunday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with my boss on friday morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "put a meeting with ben 's manager tomorrow at 8 . 00 am until the end of the day",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" ben \" ) ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "i need Jesse Rosenfeld and his team for dinner tomorrow around 7 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "New meeting with Aaron 's boss tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Aaron \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with my team on saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "ok , create an event with david lax and his reports for tomorrow night",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" david lax \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" david lax \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "When the talk is over John 's team is invited for drinks .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" Talk \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I meeting with Abby and her Skip later today in Boston",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Boston \" ) ) :start ( DateTimeConstraint :constraint ( Late ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Put a meeting with my manager please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks . Immediately after the stand - up , I need to meet with Ron 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ron \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" stand-up \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add meeting with boss at 15 : 00 on Tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinuteMilitary :hours # ( Number 15 ) :minutes # ( Number 0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "No . Invite my team to a new event called # TeamMeetingEverybody",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" #TeamMeetingEverybody \" ) ) ) ) ) )"
    },
    {
        "question": "put meeting with ben 's manager at tomorrow 10 . 00 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ben \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an appointment with Emma 's boss at today evening 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Emma \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "SCHEDULE A meeting with Raymond and his manager tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Raymond \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Raymond \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event with Jake and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "i need an event with jennifer , her boss , elli and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jennifer \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jennifer \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" elli \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" elli \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a basketball game set up with Tim and his boss tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" basketball game \" ) ) ) ) ) )"
    },
    {
        "question": "I have an excursion with my team this Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" excursion \" ) ) ) ) ) )"
    },
    {
        "question": "I have brunch tomorrow at 11 with Juliette and her boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Juliette \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Juliette \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" brunch \" ) ) ) ) ) )"
    },
    {
        "question": "Hey make a meeting with Lax 's team but do not invite Kim .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lax \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "hello , could you set up a meeting with the boss first thing tomorrow at 8 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a check in with my boss today at 4 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( ?= ( NumberPM :number # ( Number 4 ) ) ) :date ( Today ) ) :subject ( ?= # ( String \" check in \" ) ) ) ) ) )"
    },
    {
        "question": "create work meeting with boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" work meeting \" ) ) ) ) ) )"
    },
    {
        "question": "please make meet with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" meet with my team \" ) ) ) ) ) )"
    },
    {
        "question": "Ok Make a meeting with Elli 's team and Abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add Bake a Cake with Elli , her supervisor , Jake and his manager please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Bake a Cake \" ) ) ) ) ) )"
    },
    {
        "question": "CREATE A PRESENTATION MEETING WITH THE MANAGER",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" PRESENTATION MEETING \" ) ) ) ) ) )"
    },
    {
        "question": "Meeting with my team tomorrow morning , do it .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Add a new event monday after lunch to meet with Landon 's boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Landon \" ) ) ) ) ) ) ) :start ( OnDateAfterTime :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( Lunch ) ) ) ) ) )"
    },
    {
        "question": "Mark off monday for a meeting with Sam and Tom . invite their supervisors too .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Abby , Jake and their respective teams .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need an event with my team on November 1",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 1 ) :month # ( Month \" NOVEMBER \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I desperately need to make a meeting with my supervisor for tomorrow at 2 pm !",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add meeting with Jenny 's boss Thursday at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jenny \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you set up an event called Gentlemen 's fun night for next friday and invite Sandro and his supervisor ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sandro \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sandro \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" Gentlemen's fun night \" ) ) ) ) ) )"
    },
    {
        "question": "Create a new meeting with Kim and her skip on Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to meet with Jake and his team tomorrow around brunch",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( TimeAround :time ( Brunch ) ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Invite my team to lunch and add Abby .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Ok , let 's set up lunch with Katie 's manager at 12 on saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Katie \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "i need to have all of jake 's team except jennifer at my staff meeting this friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jake \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jennifer \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" staff meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Thanks please book a room with John 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) :location ( roomRequest ) ) ) ) )"
    },
    {
        "question": "Add Dan Marton 's boss and his skip to the meeting on December 2 nd .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 2 ) :month # ( Month \" DECEMBER \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please note my meeting with my manager for the day after tomorrow at 10 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( adjustByPeriod ( Tomorrow ) ( toDays # ( Number 1 ) ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a docket meeting with Mitchell and his boss on the 14 th of next month .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mitchell \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mitchell \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 14 ) :month ( NextMonth ) ) ) ) :subject ( ?= # ( String \" docket meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Make a Turkey Day Party with Kims team and remove Abby from it",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kims \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Turkey Day Party \" ) ) ) ) ) )"
    },
    {
        "question": "Book a lunch for next wednesday with sarah and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to be with Abby and her manager tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "ok add dinner with sam 's maanager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" sam \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make me a visit with my team tomorrow earlier than 3",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( OnDateBeforeTime :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) :subject ( ?= # ( String \" visit \" ) ) ) ) ) )"
    },
    {
        "question": "Add a compare notes for my boss , alex , her boss and meg and her boss tomorrow after 10 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" alex \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" alex \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" meg \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" meg \" ) ) ) ) ) ) ) ) :start ( OnDateAfterTime :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) :subject ( ?= # ( String \" compare notes \" ) ) ) ) ) )"
    },
    {
        "question": "create drink night on tuesday with coworkers",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) :subject ( ?= # ( String \" drink night \" ) ) ) ) ) )"
    },
    {
        "question": "Set a meeting for after lunch tomorrow around 1 : 30 pm with the boss as well as Merriam Bryant and Thomas Jones to discuss our upcoming budget deadlines",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Merriam Bryant \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Thomas Jones \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" discuss our upcoming budget deadlines \" ) ) ) ) ) )"
    },
    {
        "question": "ok thanks . I need an event with my team tonight .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with Sarah and her supervisor next thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "create work meeting with boss at Pacific Place",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Pacific Place \" ) ) :subject ( ?= # ( String \" work meeting \" ) ) ) ) ) )"
    },
    {
        "question": "then schedule a meeting with Jake and his boss and David Lax and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please create a lunch date next Tuesday with Anna and her manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Anna \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Anna \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch date \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Kim 's reports",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Book a 45 minute Steak Lunch with my Manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :duration ( ?= ( toMinutes # ( Number 45 ) ) ) :subject ( ?= # ( String \" Steak Lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Can you set up an appointment to meet with Dan Schoffel and his reports ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to a convention on wednesday with bruce banner and his team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" bruce banner \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" bruce banner \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) :subject ( ?= # ( String \" convention \" ) ) ) ) ) )"
    },
    {
        "question": "Please book a meeting with Daniel 's manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Daniel \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make a meeting with David Lax 's reports ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Me and my team are going to have to meet on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm meeting with Ben and his manager on Saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ben \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ben \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with the whole team tomorrow at 3 : 00 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a picnic on sep 20 with John and his manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 20.0 ) :month # ( Month \" SEPTEMBER \" ) ) ) ) :subject ( ?= # ( String \" picnic \" ) ) ) ) ) )"
    },
    {
        "question": "Need to setup something tomorrow at noon with Jan and her skip .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jan \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jan \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "I would like to set up a meeting with David Lax and his team for Wednesday at 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with the manager Justin Bieber tomorrow sometime for 2 hours",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Justin Bieber \" ) ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with bo 's manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" bo \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a lunch with the team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a conference with James ' manager and James and Mary on Jan 16",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 16 ) :month # ( Month \" JANUARY \" ) ) ) ) :subject ( ?= # ( String \" conference \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with my reports",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a new meeting with my boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Let 's do a dinner with Carmen and her supervisor for tomorrow at 7 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carmen \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carmen \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I have to put aside some time for my team next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Can I set up a meeting for Monday with Rebecca 's manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rebecca \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you also add a follow up with Jake an dhis manager and Eli and hers ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Eli \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Eli \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" follow up \" ) ) ) ) ) )"
    },
    {
        "question": "I want to meet with LIlly 's manager for 30 minutes on July 22 nd .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" LIlly \" ) ) ) ) ) ) ) :duration ( ?= ( toMinutes # ( Number 30.0 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 22 ) :month # ( Month \" JULY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with the team of david crim",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" david crim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a Workshop Planning with Jennifer , her supervisor , Elli and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Workshop Planning \" ) ) ) ) ) )"
    },
    {
        "question": "Ok set up a team meeting with Jennifer Watts and her team for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer Watts \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer Watts \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Bill and his boss day after tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( adjustByPeriod ( Tomorrow ) ( toDays # ( Number 1 ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have lunch with my boss at 1 pm on Thursday but there is not an end time for that , it 's not a meeting .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "create drinks with boss on tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) :subject ( ?= # ( String \" drinks \" ) ) ) ) ) )"
    },
    {
        "question": "Make an event with Watts and her team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Watts \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Watts \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Matt and Mary and ensure you invite both their bosses",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matt \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matt \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with my boss for Monday of next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( DowOfWeekNew :dow # ( DayOfWeek \" MONDAY \" ) :week ( NextWeekList ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Cheryl 's manager today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cheryl \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "I am meeting Jane and her manager on Friday noon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "can you please add a meeting with the boss tomorrow at 2 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks now add meeting on the 2 nd with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need an appointment with Tony and his team tomorrow at 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tony \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tony \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Charles and his team tonight",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Charles \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Charles \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "I will be meeting with Abby and her boss tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Can you put a meeting with my team next week ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to go over the bills with my boss this morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Today ) ) :subject ( ?= # ( String \" go over the bills \" ) ) ) ) ) )"
    },
    {
        "question": "I 'll be meeting with the team on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Okay , then schedule a meeting with Jake and his boss for 2 pm tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I am going to be with Abby and her Skip tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a staff meeting with my boss on Friday at 8 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" staff meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Book a time to talk with Jill and my supervisor on Friday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jill \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) :subject ( ?= # ( String \" talk \" ) ) ) ) ) )"
    },
    {
        "question": "I 'd like for a quick talk with Frank 's manager to be scheduled for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventOnDate :date ( Tomorrow ) :event ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Frank \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" quick talk \" ) ) ) ) ) ) )"
    },
    {
        "question": "Find the appointment time on Friday with the my branch manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "put meet with my boos tomorrow morning 8 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put Abby Gonano 's team for a meeting",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby Gonano \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Ok , create a meeting with Jim and his manager please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need an event at 3 pm tomorrow with Abby and her Skip",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a lunch appointment with my boss today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) :subject ( ?= # ( String \" lunch appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule an appointment with my team for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Jake and his skip ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a meeting with Dan 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a meeting with david lax 's reports damon strater",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" david lax \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Abby Gonano and her team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby Gonano \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby Gonano \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a strategy meeting with Kim 's report on Thursday at 3 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" strategy meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Jesse and his skip this afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "schedule meeting with team on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm meeting with Bill and his manager tomorrow at 10 AM . Add that to my calandar , please .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need an appointment with Cheese 's boss at the office for tomorrow at 5 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cheese \" ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" the office \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add Smash Game Night with Elli , her manager , Kim and her surpervisor",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Smash Game Night \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with my manager for tomorrow please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "i need a meeting with lax , his boss , jennifer and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" lax \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" lax \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jennifer \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jennifer \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks . Please invite my manager to a meeting today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Put lunch with Jane 's boss in her office down for next Wednesday at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" her office \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Add dinner with my boss to my calendar for tonight",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make me a appointment with Robby , Rob and Ray and her manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Robby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Robby \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rob \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rob \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a new meeting for June 1 with Julie 's manager at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Julie \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 1 ) :month # ( Month \" JUNE \" ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "I 've got to put aside time for my team today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Make a Training Video event with my team but without Abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Training Video \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with my team tomorrow in Bellevue with a room",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" Bellevue \" ) ) ( roomRequest ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event with Abby and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Never mind that , arrange a meet up with John Stark and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John Stark \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John Stark \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Now schedule an ice cream party for my team tonight , but do n't include that jerk Dan Marton",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) :subject ( ?= # ( String \" ice cream party \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my manager on Friday afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a coffee date with Jake 's skip",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" coffee date \" ) ) ) ) ) )"
    },
    {
        "question": "I want to schedule a party with my team that is not on the weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( Constraint[Date] :dayOfWeek ( negate ( Weekend ) ) ) ) :subject ( ?= # ( String \" party \" ) ) ) ) ) )"
    },
    {
        "question": "My manager will be in the office for 4 days starting monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" the office \" ) ) :nonEmptyBase ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] ) :period ( toDays # ( Number 4 ) ) :startDate ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "make a rapid eating event with mirela and her supervisor at 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" mirela \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" mirela \" ) ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" rapid eating event \" ) ) ) ) ) )"
    },
    {
        "question": "Create a I 'm gon na quit soon meeting with my boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" I'm gonna quit soon meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting with Kim 's team for me ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting on Friday at noon with Robert , Amelia , and Frank with their bosses .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Robert \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Robert \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amelia \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Amelia \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Frank \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Frank \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "I need to have a meeting with my team on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "make me an event with abby and her manager next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with the team today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm meeting with Sally 's team when my interview is over .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sally \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" interview \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event with sam and his manager tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" sam \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" sam \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I will be with Jake and her manager tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Please make an appointment for tomorrow at 9 am with Steve and his boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Steve \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Steve \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a review meeting with Josh and his supervisor for Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Josh \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Josh \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" review meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Add to schedule a sales pitch lunch with John and his manager on Friday at 12 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" sales pitch lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Make golf with Jake and his Manager an event for next weekend please .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekend ) ) :subject ( ?= # ( String \" golf \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule rehearsal with the group on 15 at 8 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 15 ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" rehearsal \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a 9 am meeting with Simon 's manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Simon \" ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "create a meeting with David Crim 's team on Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add anna to a dinner meeting and also add her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" anna \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" anna \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Abby and his supervisor need to be here tomorrow at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please add a meeting with Jake and his boss and Kim and their boss for the 15 th also .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 15 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks . I also have a meeting on the 30 th that involves Elli , Fred and their supervisors .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fred \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fred \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event for dinner with co - worker between 7 - 9 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberPM :number # ( Number 7 ) ) ) :time ( NumberPM :number # ( Number 9 ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a dinner with Patricio and his supervisor",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Patricio \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Patricio \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "The final financial statements are processed and I need to speak to the plan managers . Would you scedule an in person meeting with both Doug and Jan and their immediate supervisors ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Doug \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Doug \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jan \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jan \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I will be with my Team for Marketing all of next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :nonEmptyBase ( EventAllDayForDateRange :dateRange ( NextWeekList ) :event ( Constraint[Event] :subject ( ?= # ( String \" Marketing \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up an appointment to see my team on Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a training session for tomorrow at 2 pm through the end of the day and invite my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" training session \" ) ) ) ) ) )"
    },
    {
        "question": "I have amanda and her boss coming in on Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" amanda \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" amanda \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Mark the calendar for lunch with Faith , Yvette and their bosses this Sunday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Faith \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Yvette \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Faith \" ) ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Yvette \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Great . After the lunch on Monday please set up a meeting with Dave 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dave \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" lunch \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make a meeting with Tony and his team ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tony \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tony \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event with mary and her team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" mary \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" mary \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "After the budget meeting I would like to see Alice and her team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alice \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alice \" ) ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" budget meeting \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put in lunch tomorrow at 12 pm with Gary 's boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Gary \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "please make a meeting with jesse and team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jesse \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jesse \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "i need an emergency meeting today at 2 pm with my manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" emergency meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Add Catfish Fish Fry to the schedule on Friday at 5 pm with Joy and her boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joy \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joy \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" Catfish Fish Fry \" ) ) ) ) ) )"
    },
    {
        "question": "Put on schedule meeting with team on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Abby and her Skip",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please add an event with Matt 's team after the meeting with my team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matt \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Robert and his boss this Friday at 6 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Robert \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Robert \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a movie party with my team , but do n't include Jesse .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" movie party \" ) ) ) ) ) )"
    },
    {
        "question": "I need to make a prep meeting with Tom and his boss and my boss tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" prep meeting \" ) ) ) ) ) )"
    },
    {
        "question": "fix a purchase time in this weekend with Jennifer 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeekend ) ) :subject ( ?= # ( String \" purchase time \" ) ) ) ) ) )"
    },
    {
        "question": "Yes , schedule me for lunch with my boss Friday at 1 p.m. and show me as busy during that time .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Hi , I need you to create an event for my team but do n't invite Jesse",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "After the budget meeting , I need to meet with Laura 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Laura \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" budget meeting \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a sales meeting with Carlos and his team tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carlos \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carlos \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" sales meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need a room . Jake 's team will be there",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) :location ( roomRequest ) ) ) ) )"
    },
    {
        "question": "I am having lunch with Allen 's manager at 12 tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Allen \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting next week with my boss and Joan .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joan \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Ryan and Ryan 's manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ryan \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ryan \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Bob 's team right after our regular staff meeting .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bob \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" regular staff meeting \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "That looks good , and can you schedule a meeting with Tony 's team after the meeting on the 30 th ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tony \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( nextDayOfMonth ( Today ) # ( Number 30.0 ) ) :event ( Constraint[Event] ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with my manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting with John 's team after breakfast .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) ) :start ( GreaterThanFromStructDateTime :dateTimeConstraint ( ?= ( NextTime :time ( Breakfast ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule lunch with Jennifer Watts and her team for tomorrow at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer Watts \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer Watts \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I have a Streamer Interview with Zack and his boss at 1 pm tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Zack \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Zack \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Streamer Interview \" ) ) ) ) ) )"
    },
    {
        "question": "Place a meeting with my team on my schedule tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "After the staff meeting , schedule a meeting with Allan 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Allan \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" staff meeting \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "After my drinks event I need to see Doug 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Doug \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" drinks \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Arrange the schedule for team meeting on friday with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a dinner with Dan Marton 's skip on Tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Create an event add Johnny , Mary , her Boss , James , and his boss to the meeting on Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Johnny \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Johnny \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting with Angel 's boss 's boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Angel \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Alright establish a time to talk with my team this afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with David Crim and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add lunch with Omar 's boss for 1 PM tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Omar \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Thanks , can you set up a time to meet with Kim and her Team on Friday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to set up a team meeting with Danny Phantom 's manager at 4 on the 1 st .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Danny Phantom \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 1 ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with Billy and his boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Billy \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Billy \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with my manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm meeting with Steven and his team on monday for lunch",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Steven \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Steven \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Thanks . Then put a dinner next month with Jesse Rosenfeld and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( FullMonthofMonth :month ( NextMonth ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Add my team to a event tomorrow at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with Jared 's manager asap",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jared \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want you to add a meeting I have with my boss Monday at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( ?= ( NumberPM :number # ( Number 1 ) ) ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Hi ! Can you create an event to meet with my manager for next Wednesday at 2 : 00 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "i need to set up an appointment with my team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a block of 45 minutes tomorrow and invite my manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :duration ( ?= ( toMinutes # ( Number 45 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "book an appointment with Carlos 's manager today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carlos \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event to meet with Joy 's manager on Monday at 10 : 30 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joy \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 10.0 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a dinner meeting with my team tomorrow at 7 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" dinner meeting \" ) ) ) ) ) )"
    },
    {
        "question": "put meeting with Elli and her team on Oct 10",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 10.0 ) :month # ( Month \" OCTOBER \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Book me a room at NERD for tomorrow with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" NERD \" ) ) ( roomRequest ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I 'd like to schedule a 30 minute meeting with my Manager tomorrow at 12 : 30 pm , and set the status as Busy .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :duration ( ?= ( toMinutes # ( Number 30.0 ) ) ) :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 12 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to set up time with the team next Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule lunchmeeting with Davis ' manager at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Davis \" ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( Noon ) ) ) :subject ( ?= # ( String \" lunchmeeting \" ) ) ) ) ) )"
    },
    {
        "question": "Can you set up a meeting with my team on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hi ! The team is getting together for an impromptu group birthday party in about 3 hours",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( adjustByPeriodDuration ( Now ) ( PeriodDuration :duration ( toHours # ( Number 3 ) ) ) ) ) :subject ( ?= # ( String \" impromptu group birthday party \" ) ) ) ) ) )"
    },
    {
        "question": "Make a dinner with Abby and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I also have a third meeting at 3 PM with Bill , Jack and their supervisor .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bill \" ) ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Meeting with Jim 's boss on wednesday at 3",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "can you please add a meeting with the boss tomorrow at 2 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Will you add meeting with the boss for Wednesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to see Abby and her boss tomorrow for a snack run",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" snack run \" ) ) ) ) ) )"
    },
    {
        "question": "Add a one on one with Kimmy 's boss tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kimmy \" ) ) ) ) ) ) ) :isOneOnOne ( ?= # ( Boolean true ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Add an event called presentation with Jamal and his supervisor for Friday at 11 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jamal \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jamal \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" presentation \" ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a football game with Jeff and his team tomorrow at 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jeff \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jeff \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" football game \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Kathy and Kathy 's manager tomorrow morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kathy \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kathy \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Hi , please invite Chris 's manager and Chris to my weekly trivia party",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chris \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chris \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" weekly trivia party \" ) ) ) ) ) )"
    },
    {
        "question": "Please add an appointment with Jack and his boss , and Mary and her boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Jessa and her Boss for tomorrow at 1 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jessa \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jessa \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you set up another lunhc with Jennifer Watts 's team ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer Watts \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" another lunhc \" ) ) ) ) ) )"
    },
    {
        "question": "After the staff meeting , I 'll meet with Laura 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Laura \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" staff meeting \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "So lets make a meeting with Jake and his manager and Elli with his manager for Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a meeting with the team for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Abby and Abby 's boss will be coming to the office on Friday around 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please create a meeting for myself , Sarah , and her manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I am going to see the HIT BROADWAY PLAY WICKED with Abby and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" HIT BROADWAY PLAY WICKED \" ) ) ) ) ) )"
    },
    {
        "question": "Pencil in a talk with James and his team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" talk \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with my team , obviously ca n't be on the weekend since we wo n't be at work .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( Constraint[Date] :dayOfWeek ( negate ( Weekend ) ) ) ) ) ) ) )"
    },
    {
        "question": "After the budget meeting , pencil in a meeting with Shawn 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Shawn \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" budget meeting \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add to calendar meeting with supervisor to go over goals on Friday at 10 : 00 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" go over goals \" ) ) ) ) ) )"
    },
    {
        "question": "I need to see Abby and her manager for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I need time with Toby and his team on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Toby \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Toby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a birthday event with my team but remove Abby and Jesse",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" birthday \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a video call with Tom and his supervisor Friday at 2 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tom \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" video call \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with Jennifer , Elli , Kim and her manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to go meet with Denise 's team right after that Thursday rally .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Denise \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" rally \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set an event on Feb 19 th at 2 PM with Mary , Susan , and their bosses .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Susan \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Susan \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 19 ) :month # ( Month \" FEBRUARY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I would like to meet with Abby and his immediate supervisor on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to set up a Jog in the Park with Sue and her manager for tomorrow at 4 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sue \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sue \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" Jog in the Park \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with my team on November 3 rd at 11 am as well .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 3 ) :month # ( Month \" NOVEMBER \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please add a meeting with Dan Schoffel 's Team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with my reports .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a Concert in the City with Josie and her supervisor at 10 pm on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Josie \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Josie \" ) ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" City \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" Concert \" ) ) ) ) ) )"
    },
    {
        "question": "make another event called staff meeting with my manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" staff meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule Save the World with Anduin and his manager tomorrow at 11 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Anduin \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Anduin \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" Save the World \" ) ) ) ) ) )"
    },
    {
        "question": "I want to make a meeting with my boss to discuss the project updates at 2 pm on Monday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" discuss the project updates \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting tomorrow with my boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "My meeting with Tim is at 5 : 30 tomorrow and his boss is going to be there too .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tim \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 5 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hi there ! Can you add a meeting in the conference room today at noon with Susie and her team for me ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Susie \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Susie \" ) ) ) ) ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" conference room \" ) ) ( roomRequest ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "After the dinner , schedule a movie date also on Friday night with Manny 's team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Manny \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" dinner \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Our team will need a conference room next week from Monday to Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( DowOfWeekNew :dow # ( DayOfWeek \" MONDAY \" ) :week ( NextWeekList ) ) :date2 ( nextDayOfWeek ( DowOfWeekNew :dow # ( DayOfWeek \" MONDAY \" ) :week ( NextWeekList ) ) # ( DayOfWeek \" THURSDAY \" ) ) ) :event ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( roomRequest ) ) ) ) ) )"
    },
    {
        "question": "I have a budget meeting with Karen and her manager tomorrow morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karen \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karen \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" budget meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I 'll be meeting with Cristine 's team right after my interview .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cristine \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" interview \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with my reports",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Ok , add a one - on - one with Liz 's boss please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Liz \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" one-on-one \" ) ) ) ) ) )"
    },
    {
        "question": "Make a breakfast appointment with my boss next Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) :subject ( ?= # ( String \" breakfast appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Ok then I need an event with abby and her manager in the summer instead !",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( SeasonSummer ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Ali and her boss on Friday at 9 : 30 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ali \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ali \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 9 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a Pool Cleaning scheduled with Joshua and his supervisor at 1 pm on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joshua \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joshua \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Pool Cleaning \" ) ) ) ) ) )"
    },
    {
        "question": "Create an appointment with Carlos 's manager for tomorrow at 3 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carlos \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please make a meeting David Lax 's reports on monday morning at 9 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make me a meeting with Elli , her manager , Kim , and her manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "When the party ends Jim 's team can come for pizza .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" party \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" pizza \" ) ) ) ) ) )"
    },
    {
        "question": "make a meeting with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Ben 's manager for Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ben \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "put meeting with alex and his team at Oct 10",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" alex \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" alex \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 10.0 ) :month # ( Month \" OCTOBER \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a round table with Bradley and his team for the afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bradley \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bradley \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) :subject ( ?= # ( String \" round table \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Dan Schoffel and all of his reports on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Eric 's manager Dan Schoffel to go over design plans on Friday at 4 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Eric \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" go over design plans \" ) ) ) ) ) )"
    },
    {
        "question": "On Monday at 5 pm , make a meeting with my boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Monica 's boss tomorrow at 8 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( RecipientFromRecipientConstraint :constraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Monica \" ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add Beach Day with Sora and his boss on July 29 th at 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sora \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sora \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 29 ) :month # ( Month \" JULY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" Beach Day \" ) ) ) ) ) )"
    },
    {
        "question": "I will be with my Team in Wichitaiiaiai for all of next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :nonEmptyBase ( EventAllDayForDateRange :dateRange ( NextWeekList ) :event ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Wichitaiiaiai \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Jake 's Manager 's boss next Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need an event with Abby and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Now create a luncheon with Abby and Abby 's team tomorrow at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" luncheon \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a lunch with Beth and her manager for Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Beth \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Beth \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Set up an appointment with the team for Nov 2 at 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 2 ) :month # ( Month \" NOVEMBER \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "set an event for meeting with Jim 's boss tomorrow at 11 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a party and invite everyone on Abby 's team but Crim",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Crim \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" party \" ) ) ) ) ) )"
    },
    {
        "question": "create jack and coke night with coworkers",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" jack and coke night \" ) ) ) ) ) )"
    },
    {
        "question": "Create an event with Roland and my supervisor on Wednesday at 4 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Roland \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "i need an early meeting with the boss next monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Early ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "As soon as the formal dinner is over Jacob 's team needs to come have talk with me .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jacob \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" formal dinner \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" talk \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Jim and his boss and Katie and her boss for next Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Katie \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Katie \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to make a meeting with my whole team to discuss new hires on Friday at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" discuss new hires \" ) ) ) ) ) )"
    },
    {
        "question": "Update my calendar to show a meeting with Frank and his supervisor , Wednesday at 1 : 00 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Frank \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Frank \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I wanna meet Lisa 's boss at today 7 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lisa \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 7 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Alex and his boss to discuss the next steps of the business plan for later this afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alex \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alex \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( LateAfternoon ) :date ( Today ) ) :subject ( ?= # ( String \" discuss the next steps of the business plan \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a conference meeting with Gloria and her boss on Tuesday morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Gloria \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Gloria \" ) ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) :subject ( ?= # ( String \" conference meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Book a meeting with stephs manager to talk about lewd bathroom behavior",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" steph \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" talk about lewd bathroom behavior \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with my team for this weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeekend ) ) ) ) ) )"
    },
    {
        "question": "Add a team kickball game with my team and Crim",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Crim \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" team kickball game \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Abby and her team for 9 : 30 AM on Tuesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 9 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please book a meeting for this Friday with Jake and his manager with Elli and his manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "put meeting with bob 's manager at aug 14",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" bob \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 14 ) :month # ( Month \" AUGUST \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a quick session with Jamie and his boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jamie \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jamie \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" quick session \" ) ) ) ) ) )"
    },
    {
        "question": "add a lunch with Kim Possible , her boss , Elli Parker and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli Parker \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli Parker \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Hey could make a meeting with Kim and her manager along with Jesse and her manager for next Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "FIX APPOINTMENT WITH LISA AND HER MANAGER",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" LISA \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" LISA \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add an meeting with Kim 's skip next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "ok now i need an appointment with chris and his manager",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" chris \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" chris \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to be with Kim and her boss tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Find 45 minutes on Monday for a Brainstorming Ideas Meeting with Susan and her supervisor .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Susan \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Susan \" ) ) ) ) ) ) ) ) :duration ( ?= ( toMinutes # ( Number 45 ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" Brainstorming Ideas Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Let 's get something to do with my team at Arbys",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Arbys \" ) ) ) ) ) )"
    },
    {
        "question": "Great , and after the marketing presentation please schedule a meeting with Roger 's Team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Roger \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" marketing presentation \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a team building event with my team for Next Wednesday at 5 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" team building \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule me to meet with my manager next Tuesday at 2 PM for my performance review .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" performance review \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a meeting with my boss tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Set up dinner with Carl and his boss Friday at 7 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carl \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carl \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Sandra 's manager today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sandra \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks . And I need to schedule Monday - Thursday next week with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :nonEmptyBase ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( DowOfWeekNew :dow # ( DayOfWeek \" MONDAY \" ) :week ( NextWeekList ) ) :date2 ( nextDayOfWeek ( DowOfWeekNew :dow # ( DayOfWeek \" MONDAY \" ) :week ( NextWeekList ) ) # ( DayOfWeek \" THURSDAY \" ) ) ) :event ( Constraint[Event] ) ) ) ) ) )"
    },
    {
        "question": "put meet with my boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a meeting with Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to see Crim 's team but not Abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Crim \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting in the afternoon on Monday with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Who is Kim 's Skip , and can you schedule a meeting with him next week ?",
        "target": "( do ( Yield :output ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with my team at NERD . We need a room",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" NERD \" ) ) ( roomRequest ) ) ) ) ) )"
    },
    {
        "question": "Make a 2 PM meeting with Josh and his manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Josh \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Josh \" ) ) ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an meeting on Monday 10 AM with the whole Team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting on Thursday with my team .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Do i have any time to meet with Jessica and her manager today ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jessica \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jessica \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Let 's schedule a meeting with Dan 's reports for Thursday afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule marketing Session with ron and ron 's team today at 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" ron \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" ron \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" marketing Session \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule the appointment with the boss for Monday at 2 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please make a meeting with Abby and her skip at 3 pm today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Jake 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to make an appointment with boss at 10 am next Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a coffee time Abby 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" coffee \" ) ) ) ) ) )"
    },
    {
        "question": "make an event with my team on friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to meet James , his supervisor Matt and his supervisor for coffee this week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matt \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matt \" ) ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeek ) ) :subject ( ?= # ( String \" coffee \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule another meeting for next week with my team , but do n't include Abby .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a meeting with kim , her boss , elli and her boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" elli \" ) ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" elli \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I will be with my team in Bellevue for the next 3 days . We need a room",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" Bellevue \" ) ) ( roomRequest ) ) :nonEmptyBase ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] ) :period ( toDays # ( Number 3 ) ) :startDate ( Today ) ) ) ) ) )"
    },
    {
        "question": "put meeting with manager gracy",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" gracy \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to setup a meeting with my whole team for Tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "create work conference with boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" work conference \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a with my boss on Friday at 2 : 30 to discuss quotas .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" discuss quotas \" ) ) ) ) ) )"
    },
    {
        "question": "add to my calendar a meeting with my team for next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Jesse Rosenfeld and his team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule an event with my team for tomorrow at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with Kim Possible and her team next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim Possible \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "i need a coffe break with my manager early on the 25 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Early ) :date ( nextDayOfMonth ( Today ) # ( Number 25 ) ) ) :subject ( ?= # ( String \" coffe break \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a new event with Anderson Daws and his team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Anderson Daws \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Anderson Daws \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Tuesday at 5 i have need an event with Mark and his boss",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mark \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mark \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting Thursday at noon with my supervisor .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting at NERD with my team . we need a room",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" NERD \" ) ) ( roomRequest ) ) ) ) ) )"
    },
    {
        "question": "make a date for my team for a meeting on Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting on Tuesday with my team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a lunch conference with David Lax 's direct reports this Sunday at 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Lax \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" lunch conference \" ) ) ) ) ) )"
    },
    {
        "question": "I 'll need to meet with my team on Monday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Please set meting with Nicole 's Boss tomorrow after pick up the kids",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Nicole \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" pick up the kids \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Hector 's manager today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Hector \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule meeting with Space Ghost 's boss , today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Space Ghost \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "I 'd like to meet with Brit 's team after my email meeting .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brit \" ) ) ) ) ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" email meeting \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to book a meeting with Carlos and his boss Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carlos \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carlos \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Jake and his manager are coming over for a dinner party on Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) :subject ( ?= # ( String \" dinner party \" ) ) ) ) ) )"
    },
    {
        "question": "Set up Dress Code Violation with Jessie and her manager on Monday at 9 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jessie \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jessie \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" Dress Code Violation \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make a meeting with Rory this afternoon with the manager ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rory \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rory \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "I need a year end review scheduled with my supervisor sometime next week in the morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( andConstraint ( Constraint[DateTime] :date ( NextWeekList ) ) ( Constraint[DateTime] :time ( Morning ) ) ) ) ) ) )"
    },
    {
        "question": "Can you set a meeting for my team for Friday afternoon ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule with my manager about a very important matter .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :subject ( ?= # ( String \" a very important matter \" ) ) ) ) ) )"
    },
    {
        "question": "add go out for drinks with Rory 's boss to my calendar",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rory \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Elli and her team tomorrow at the end of the work day .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( EndOfWorkDay ) ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting at two with the staff",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Kim 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Arrange a conference call with Joe and his supervisor in five minutes .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joe \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Joe \" ) ) ) ) ) ) ) ) :start ( ?= ( adjustByPeriodDuration ( Now ) ( PeriodDuration :duration ( toMinutes # ( Number 5 ) ) ) ) ) :subject ( ?= # ( String \" conference call \" ) ) ) ) ) )"
    },
    {
        "question": "create volleyball game on monday with coworkers",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" volleyball game \" ) ) ) ) ) )"
    },
    {
        "question": "Make a new event with Watts team and remove Jesse",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Watts \" ) ) ) ) ) ) ) ( AttendeeListExcludesRecipient :recipient ( ?= ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event with kim 's team",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" kim \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Dan Schoffel and his reports tomorrow at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindReports :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with the Manager on Thursday 10 AM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting with my manager tomorrow night ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Kim and her team for Monday at 2 pm . Wanna call it \" Farewell Party \" and should last about 3 hours .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 3 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" Farewell Party \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a call to my manager for today at 1 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" call \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Dan Marton and his skip",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put a luncheon down with Isla and her team Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Isla \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Isla \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" luncheon \" ) ) ) ) ) )"
    },
    {
        "question": "Set up Rodeo Outing with Samuel and his boss on August 1 st at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Samuel \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Samuel \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 1 ) :month # ( Month \" AUGUST \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" Rodeo Outing \" ) ) ) ) ) )"
    },
    {
        "question": "Is julie 's supervisior availible tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" julie \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "add have brunch with Tim 's boss tuesday morning at 8 o'clock to my calendar",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tim \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" brunch \" ) ) ) ) ) )"
    },
    {
        "question": "I want to make a meeting with Abby and his manager .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "make an appointment with my boss .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add a meeting with Jennifer and her team for Thursday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ( AttendeeListHasPeople :people ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Frank and his manager need to meet with me on Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Frank \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Frank \" ) ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Starting tomorrow put the next 3 days of me being at the convention",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( Tomorrow ) :date2 ( adjustByPeriod ( Tomorrow ) ( toDays # ( Number 3 ) ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" convention \" ) ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with johnson and gary next friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" johnson \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" gary \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I saw a late night movie with Emmy last night . Put that on the calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Emmy \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Yesterday ) ) :subject ( ?= # ( String \" late night movie \" ) ) ) ) ) )"
    },
    {
        "question": "Wait , I also have a doctor 's appointment tomorrow at 6 : 45 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 6 ) :minutes # ( Number 45 ) ) ) ) :subject ( ?= # ( String \" doctor's appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Put Family time from 1 to 4 pm on Sunday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Family time \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule vet appointment on April 12 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 12 ) :month # ( Month \" APRIL \" ) ) ) ) :subject ( ?= # ( String \" vet appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Can you book my spa appointment after my dentist appointment ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" dentist appointment \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" spa appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Can you set up an all day event from this Friday to next Friday called Vacation ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :date2 ( nextDayOfWeek ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) # ( DayOfWeek \" FRIDAY \" ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" Vacation \" ) ) ) ) ) ) )"
    },
    {
        "question": "Thank you ! Can we also set a Webinar for wednesday at 12 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" Webinar \" ) ) ) ) ) )"
    },
    {
        "question": "Create event called doggies 1 st bday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" doggies 1st bday \" ) ) ) ) ) )"
    },
    {
        "question": "Get a room in Cambridge at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( andConstraint ( ?= # ( LocationKeyphrase \" Cambridge \" ) ) ( roomRequest ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" Get a room in Cambridge \" ) ) ) ) ) )"
    },
    {
        "question": "I have to go through paperwork from 9 to 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberAM :number # ( Number 9 ) ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" go through paperwork \" ) ) ) ) ) )"
    },
    {
        "question": "Make me a new meeting tomorrow at 10 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to make an appointment at 5 pm called \" Dinner \" .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" Dinner \" ) ) ) ) ) )"
    },
    {
        "question": "make the meeting sync on Thursday with Barak Obama",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barak Obama \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make one for 9 am for breakfast",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" breakfast \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add that I had a Sales Meeting last Wednesday at 2 : 30 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( previousDayOfWeek ( Today ) # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Sales Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "make a meeting with Abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a tee time for 11 am sunday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" tee time \" ) ) ) ) ) )"
    },
    {
        "question": "Local presentation for the children tomorrow at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" Local presentation for the children \" ) ) ) ) ) )"
    },
    {
        "question": "Set up Disney Trip for 10 am on July 31 st at Disney 's Hollywood Studios .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Disney's Hollywood Studios \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 31 ) :month # ( Month \" JULY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" Disney Trip \" ) ) ) ) ) )"
    },
    {
        "question": "add Mohave Mental Health to my address book",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" Mohave Mental \" ) ) ) ) ) )"
    },
    {
        "question": "Now make Marketing meeting on Thursday at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" Marketing meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule sports meeting for 1 pm Friday with John .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" sports meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Thank you . Can you add in book club this saturday at 7 pm with Abby , Jesse , and Jake ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" book club \" ) ) ) ) ) )"
    },
    {
        "question": "I had a team exercise this morning with Jim , can you add that to my calendar",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Today ) ) :subject ( ?= # ( String \" team exercise \" ) ) ) ) ) )"
    },
    {
        "question": "Create an event in 2022 called RCRA Cert",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( FullYearofYear :year # ( Number 2022 ) ) ) :subject ( ?= # ( String \" RCRA Cert \" ) ) ) ) ) )"
    },
    {
        "question": "Who is Bobby 's manager ?",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bobby \" ) ) ) ) ) ) )"
    },
    {
        "question": "Ok , schedule a room for the tech meeting for 4 pm tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( roomRequest ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" tech meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to create an event for sales meeting at 11 am tomorrow for a couple hours",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours ( Acouple ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" sales meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting at 4 pm on saturday and invite Sarah .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add coffee with Sam for tomorrow at 11 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" coffee \" ) ) ) ) ) )"
    },
    {
        "question": "put meeting with johny james",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" johny james \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a planning meeting with Jesse , Sean , and Greta",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sean \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Greta \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" planning meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need 2 hours booked in NERD for monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" NERD \" ) ) ( roomRequest ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please make a lunch date with Karen ending at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karen \" ) ) ) ) ) ) :end ( Constraint[DateTime] :time ( ?= ( Noon ) ) ) :subject ( ?= # ( String \" lunch date \" ) ) ) ) ) )"
    },
    {
        "question": "I need performance review meeting after 1 pm Wednesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( ?> ( NumberPM :number # ( Number 1 ) ) ) :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) :subject ( ?= # ( String \" performance review \" ) ) ) ) ) )"
    },
    {
        "question": "MAKE A APPOINTMENT TOMORROW",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Book a doctors appointment next Friday at 2 : 00 PM please .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Great . Can you schedule a doctors appointment on the 8 th at 9 a.m.",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 8 ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Make an appointment 6 months after my dentist appointment and 20 minutes earlier .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( :date ( adjustByPeriodDuration ( :start ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" dentist appointment \" ) ) ) ) ) ) ) ( PeriodDuration :period ( toMonths # ( Number 6 ) ) ) ) ) :time ( :time ( PeriodDurationBeforeDateTime :dateTime ( :start ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" dentist appointment \" ) ) ) ) ) ) ) :periodDuration ( PeriodDuration :duration ( toMinutes # ( Number 20.0 ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put a one on one with Lisa for Friday at 4",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lisa \" ) ) ) ) ) ) :isOneOnOne ( ?= # ( Boolean true ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "create meeting with jeff",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jeff \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add dinner and drinks with Maria at 6 : 30 PM on Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Maria \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( HourMinutePm :hours # ( Number 6 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" dinner and drinks \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Josh for 5 pm at Starbucks .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Josh \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Starbucks \" ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put in a meeting Thursday at 4 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Saturday at 5 pm I have a dinner a birthday party that should go to 8 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" dinner a birthday party \" ) ) ) ) ) )"
    },
    {
        "question": "Add an event called \" New Meeting Time \" to today at 4 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" New Meeting Time \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to the mall tomorrow at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" going to the mall \" ) ) ) ) ) )"
    },
    {
        "question": "create basketball work game on monday at 2",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" basketball work game \" ) ) ) ) ) )"
    },
    {
        "question": "add an event for me on April 5 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 5 ) :month # ( Month \" APRIL \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put a meeting with Jack on my schedule for tomorrow at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can set meeting with john on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" john \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule morning run for tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" run \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule 3 pm tentative shareholders huddle",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :showAs ( ?= # ( ShowAsStatus \" Tentative \" ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" shareholders huddle \" ) ) ) ) ) )"
    },
    {
        "question": "Mark will be meeting with me this afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mark \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Update calendar for dads birthday Dec 23 rd",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 23 ) :month # ( Month \" DECEMBER \" ) ) ) ) :subject ( ?= # ( String \" dads birthday \" ) ) ) ) ) )"
    },
    {
        "question": "Can you put dinner one hour after the doctor appointment ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( adjustByPeriodDuration ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" doctor appointment \" ) ) ) ) ) ) ) ( PeriodDuration :duration ( toHours # ( Number 1 ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Set Up Romantic Meeting at 1 pm on July 31 st at The Empire State Building .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" The Empire State Building \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 31 ) :month # ( Month \" JULY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Romantic Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Just schedule shopping tomorrow at 5 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" shopping \" ) ) ) ) ) )"
    },
    {
        "question": "I need an appointment around the afternoon for an hour with katie .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" katie \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "i want to block out 2 hours to clean the house tomorrow morning please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" clean the house \" ) ) ) ) ) )"
    },
    {
        "question": "we had our company potluck last October 28 th at 6 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( previousMonthDay ( Today ) # ( Month \" OCTOBER \" ) # ( Number 28 ) ) :time ( NumberAM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" company potluck \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule Tennis at The Casa Cabana tomorrow from 1 to 4 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" The Casa Cabana \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Tennis \" ) ) ) ) ) )"
    },
    {
        "question": "I 'll be in court from 12 : 30 until the end of the day tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinutePm :hours # ( Number 12 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" court \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Anna today at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Anna \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "NYTHING ON MONDAY",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" NYTHING \" ) ) ) ) ) )"
    },
    {
        "question": "Create event for 2 o'clock today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I would like to create a new event .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] ) ) ) )"
    },
    {
        "question": "lunch with janice kang wednesday at 12",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" janice kang \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Add to my calendar a lunch with Sarah at 11 : 30 am tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinuteAm :hours # ( Number 11 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Create an event for me at Tuesday on the 9 pm please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make note of a lunch appointment with Page Ashworth on this coming Thursday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Page Ashworth \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Please show me as busy today from 2 to 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add Shop for Wedding Dresses as an all day event on the 14 th of September .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( MD :day # ( Number 14 ) :month # ( Month \" SEPTEMBER \" ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" Shop for Wedding \" ) ) ) ) ) ) )"
    },
    {
        "question": "Okay , yes , actually , can you please add another meeting with Alejandro between 1 and 5 pm on Monday the 15 th ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alejandro \" ) ) ) ) ) ) :start ( DateTimeAndConstraint :dateTime1 ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 15 ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :dateTime2 ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 15 ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add Dr appointment for Friday at 1 to 2 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Dr appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Please add a lunch meeting for 2 hours at 11 am Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "add shopping on grocery store tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" shopping on grocery store \" ) ) ) ) ) )"
    },
    {
        "question": "add work on calendar on monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" work \" ) ) ) ) ) )"
    },
    {
        "question": "Thank you , can you also please add \" Hand Therapy with Physical Therapist \" to Friday at 3 : 30 to 4 : 15 pm too ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 30.0 ) ) ) :time ( HourMinutePm :hours # ( Number 4 ) :minutes # ( Number 15 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Hand Therapy with Physical Therapist \" ) ) ) ) ) )"
    },
    {
        "question": "I like to set a time for my dentist appointment at 4 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting Friday with Karl boon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karl boon \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a doctor 's appointment this Friday at 10 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" doctor's appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I am going to do some reading thursday night from 8 to 10 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) :time ( NumberPM :number # ( Number 10.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" reading \" ) ) ) ) ) )"
    },
    {
        "question": "create movie day with Abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) :subject ( ?= # ( String \" movie day \" ) ) ) ) ) )"
    },
    {
        "question": "I have a job interview Monday at 10 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" job interview \" ) ) ) ) ) )"
    },
    {
        "question": "On Friday , make a 2 hour meeting at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put something in my calendar after 4 on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( ?> ( NumberPM :number # ( Number 4 ) ) ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting with Abby to my calendar for tomorrow to 2 - 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Last week i had a meeting with the ceo jim sterling , could you add that please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jim sterling \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( LastWeekNew ) ) ) ) ) )"
    },
    {
        "question": "Thursday of next week , I want to reserve a room at the library . 3 PM to 6 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( DowOfWeekNew :dow # ( DayOfWeek \" THURSDAY \" ) :week ( NextWeekList ) ) :time ( NumberPM :number # ( Number 3 ) ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :location ( andConstraint ( ?= # ( LocationKeyphrase \" the library \" ) ) ( roomRequest ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( DowOfWeekNew :dow # ( DayOfWeek \" THURSDAY \" ) :week ( NextWeekList ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" reserve a room \" ) ) ) ) ) )"
    },
    {
        "question": "Please put Yoga with Kate from Friday to Sunday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :date2 ( nextDayOfWeek ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) # ( DayOfWeek \" SUNDAY \" ) ) ) :event ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kate \" ) ) ) ) ) ) :subject ( ?= # ( String \" Yoga \" ) ) ) ) ) ) )"
    },
    {
        "question": "Block off two hours on Saturday for a Sales Meeting with Cathy T , Alex J , and Shaun P starting at 2 : 30 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cathy T \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alex J \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Shaun P \" ) ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Sales Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Please add my May 1 , 2019 doctor 's appointment at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MDY :day # ( Number 1 ) :month # ( Month \" MAY \" ) :year # ( Number 2019 ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" doctor's appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I have to do some furniture shopping .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" furniture shopping \" ) ) ) ) ) )"
    },
    {
        "question": "Find an hour tomorrow evening to plan a dog walk .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( DateTimeConstraint :constraint ( Evening ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" dog walk \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with bob between 1 - 5 for 45 minutes on friday",
        "target": "( do ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" bob \" ) ) ) ) ) ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 45 ) ) ) :start ( DateTimeConstraint :constraint ( TimeToTime :time1 ( NumberPM :number # ( Number 1 ) ) :time2 ( NumberPM :number # ( Number 5 ) ) ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'd like to make a new appointment on March 15 th called Secret Party at 8 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 15 ) :month # ( Month \" MARCH \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" Secret Party \" ) ) ) ) ) )"
    },
    {
        "question": "I also need a \" Meeting \" for next Monday at 12 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "My clothes will be cleaned for 3 days starting on December 14",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" clothes will be cleaned \" ) ) ) :period ( toDays # ( Number 3 ) ) :startDate ( MD :day # ( Number 14 ) :month # ( Month \" DECEMBER \" ) ) ) ) ) )"
    },
    {
        "question": "Okay , and put down that there is a concert on Saturday at 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" concert \" ) ) ) ) ) )"
    },
    {
        "question": "add meeting in my calendar at 2",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add a workout sometime early in the day friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Early ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) :subject ( ?= # ( String \" workout \" ) ) ) ) ) )"
    },
    {
        "question": "Set a meeting on Monday 08 : 00 PM for medical next year .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" medical \" ) ) ) ) ) )"
    },
    {
        "question": "can you set a meeting from 10 -11 am tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Jack on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need an event for wednesday at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please set a meeting with Sam on Monday , April 22 , 2019 from 1 pm to 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( MDY :day # ( Number 22 ) :month # ( Month \" APRIL \" ) :year # ( Number 2019 ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MDY :day # ( Number 22 ) :month # ( Month \" APRIL \" ) :year # ( Number 2019 ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a appointment for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a one hour gym time for Friday at 3 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" gym time \" ) ) ) ) ) )"
    },
    {
        "question": "arrange a bachelor party",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" bachelor party \" ) ) ) ) ) )"
    },
    {
        "question": "schedule giggle time with Lamy",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lamy \" ) ) ) ) ) ) :subject ( ?= # ( String \" giggle time \" ) ) ) ) ) )"
    },
    {
        "question": "add birthday party for Damon Ellery on may 12 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Damon Ellery \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 12 ) :month # ( Month \" MAY \" ) ) ) ) :subject ( ?= # ( String \" birthday party \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Janice Kang for Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janice Kang \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make an appointment on Tuesday at 8 am called \" Emails \" ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" Emails \" ) ) ) ) ) )"
    },
    {
        "question": "I need a dinner meeting tonight after 5",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( OnDateAfterTime :date ( Today ) :time ( NumberPM :number # ( Number 5 ) ) ) :subject ( ?= # ( String \" dinner meeting \" ) ) ) ) ) )"
    },
    {
        "question": "now i need a new conference room for this saturday in Berkeley",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( andConstraint ( ?= # ( LocationKeyphrase \" Berkeley \" ) ) ( roomRequest ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a store visit between 10 am and 3 pm Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" store visit \" ) ) ) ) ) )"
    },
    {
        "question": "make an event johns birthday next wednesday 8 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" johns birthday \" ) ) ) ) ) )"
    },
    {
        "question": "i want to meet with alex",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" alex \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "i need dry cleaner before 5 pm Tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( ?< ( NumberPM :number # ( Number 5 ) ) ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" dry cleaner \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a Party to start in a few hours .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( adjustByPeriodDuration ( Now ) ( PeriodDuration :duration ( toHours ( Afew ) ) ) ) ) :subject ( ?= # ( String \" Party \" ) ) ) ) ) )"
    },
    {
        "question": "mark me as out of office for the remainder of the day",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( Today ) :event ( Constraint[Event] :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule me some R&R around the end of the workday friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( AroundDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( EndOfWorkDay ) ) ) ) ) ) )"
    },
    {
        "question": "Making a new meeting with emily in a week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" emily \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( adjustByPeriod ( Today ) ( toWeeks # ( Number 1 ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'd like you to set up a night out for me sometime not on the weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( Constraint[Date] :dayOfWeek ( negate ( Weekend ) ) ) ) :subject ( ?= # ( String \" night out \" ) ) ) ) ) )"
    },
    {
        "question": "schedule my meeting on sep 15 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 15 ) :month # ( Month \" SEPTEMBER \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an appointment with my coworker John on Tuesday at 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" John \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule Jennie 's Play Date for Tuesday at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" Jennie's Play Date \" ) ) ) ) ) )"
    },
    {
        "question": "create comedy night on wednesday at 3",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" comedy night \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with john , gary and wilson next wednesday 10 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" john \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" gary \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" wilson \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you get me the earliest doctors appointment possible for tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Early ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Make a fishing trip starting tomorrow that will last 4 days",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" fishing trip \" ) ) ) :period ( toDays # ( Number 4 ) ) :startDate ( Tomorrow ) ) ) ) )"
    },
    {
        "question": "Add to my calendar that I have brunch with Zarnak on Sunday at 1 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Zarnak \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" brunch \" ) ) ) ) ) )"
    },
    {
        "question": "I have a lunch tomorrow at 1",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a date with Ashley Friday at 8 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ashley \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" date \" ) ) ) ) ) )"
    },
    {
        "question": "Create event out of office from 1 pm to 430 pm Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( HourMinutePm :hours # ( Number 4 ) :minutes # ( Number 30.0 ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Who are my reports",
        "target": "( Yield :output ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) )"
    },
    {
        "question": "I have a sales meeting with Cornelio Friday at 8 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cornelio \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" sales meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Add a reminder for next Tuesday for lunch with Sally",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sally \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting scheduled on Tuesday morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you set up a meeting in the afternoon with Carlson instead ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carlson \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Alright set up a meeting with Chris , Eggs , and my other friend Kyu for tomorrow at 8 for breakfast",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chris \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Eggs \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kyu \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" breakfast \" ) ) ) ) ) )"
    },
    {
        "question": "please set shopping for dinner at 4 pm today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" shopping for dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I also have dinner with Chris tomorrow at 6 pm for an hour",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chris \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Let 's put a schedule for nothing to the afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :time ( Afternoon ) ) :subject ( ?= # ( String \" nothing \" ) ) ) ) ) )"
    },
    {
        "question": "Great , thanks , and can you also add that I need to drop the car off for an oil change Friday after 4 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( OnDateAfterTime :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) :subject ( ?= # ( String \" drop the car off for an oil change \" ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting on monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'd like to schedule a doctor appointment for noon next Tuesday at the Houston Medical Center .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Houston Medical Center \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" doctor appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a new one for the 10 th at 2 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 10.0 ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add a meeting with Jake for Friday from 2 pm through end of day ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a 6 pm Yoga Session on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" Yoga Session \" ) ) ) ) ) )"
    },
    {
        "question": "Add a one hour lunch with Rachael to Thursday at 1 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rachael \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Show As out of the office today from 2 to 4 p.m.",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" out of the office \" ) ) ) ) ) )"
    },
    {
        "question": "Can you put dinner at Red Robin for 8 on Friday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Red Robin \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add a football game event for sunday as well ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) :subject ( ?= # ( String \" football game \" ) ) ) ) ) )"
    },
    {
        "question": "Hello please create an event for a work conference in October from the 3 rd through the 8 th .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( MD :day # ( Number 3 ) :month # ( Month \" OCTOBER \" ) ) :date2 ( nextDayOfMonth ( MD :day # ( Number 3 ) :month # ( Month \" OCTOBER \" ) ) # ( Number 8 ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" work conference \" ) ) ) ) ) ) )"
    },
    {
        "question": "create football game on monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" football game \" ) ) ) ) ) )"
    },
    {
        "question": "create football game on tuesday at 8",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" football game \" ) ) ) ) ) )"
    },
    {
        "question": "i need to go shopping tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" go shopping \" ) ) ) ) ) )"
    },
    {
        "question": "Ok can you schedule a new Movie event on aug 27 around 10 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 27 ) :month # ( Month \" AUGUST \" ) ) :time ( NumberPM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" Movie \" ) ) ) ) ) )"
    },
    {
        "question": "Can you please schedule \" House - sitting for the Joneses \" from January 10 to January 18 ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( Constraint[DateTime] :date ( ?= ( nextMonthDay ( MD :day # ( Number 10.0 ) :month # ( Month \" JANUARY \" ) ) # ( Month \" JANUARY \" ) # ( Number 18 ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 10.0 ) :month # ( Month \" JANUARY \" ) ) ) ) :subject ( ?= # ( String \" House-sitting for the Joneses \" ) ) ) ) ) )"
    },
    {
        "question": "Make a appointment for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I 'm working elsewhere , at Starbucks , on Monday from 9 am to 5 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Starbucks \" ) ) :showAs ( ?= # ( ShowAsStatus \" WorkingElsewhere \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "please set an appointment for Wednesday for 1 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create trip with Sam on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can arrange a meeting with Paige on Tomorrow 6 : 00 AM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paige \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Well , then , can you put on my schedule a that I need to pick up Peter from Sacramento Airport at 2 pm on Thursday , March 7 th , 2019 ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Sacramento Airport \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MDY :day # ( Number 7 ) :month # ( Month \" MARCH \" ) :year # ( Number 2019 ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" pick up Peter \" ) ) ) ) ) )"
    },
    {
        "question": "Well I had a meeting with Greg last monday at 15 h",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Greg \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( previousDayOfWeek ( Today ) # ( DayOfWeek \" MONDAY \" ) ) :time ( HourMilitary :hours # ( Number 15 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please schedule an appointment with Barack Obama on Tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "create the new schedule for meeting with parker",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" parker \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "create meeting after the last event on friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( :end ( FindLastEvent :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :event ( Constraint[Event] ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add a meeting with Sam for tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule \" Day off \" for all day on Friday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" Day off \" ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule performance review for Thursday at 1 : 30 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" performance review \" ) ) ) ) ) )"
    },
    {
        "question": "iam meeting with smith on tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" smith \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Make a appointment for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule the lunch from 10 - 11 ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add Party on Saturday from 9 pm to midnight ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 9 ) ) ) :time ( Midnight ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" Party \" ) ) ) ) ) )"
    },
    {
        "question": "I want you to put an appointment in my calendar with the dentist for tomorrow at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" dentist \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule me a hair apointment for next wee",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( NextWeekList ) ) :subject ( ?= # ( String \" hair apointment \" ) ) ) ) ) )"
    },
    {
        "question": "Set a reminder for orthodontist appointment on the 15 th at 8 : 30 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MDY :day # ( Number 15 ) :month # ( Month \" APRIL \" ) :year # ( Number 2019 ) ) :time ( HourMinuteAm :hours # ( Number 8 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" orthodontist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I got ta meet Mason at the club tonight",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mason \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" the club \" ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Barack Obama",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add birthday party to tomorrow 's schedule , from 6 : 00 PM to 10 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) :time ( NumberPM :number # ( Number 10.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" birthday party \" ) ) ) ) ) )"
    },
    {
        "question": "Ice cream at 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" Ice cream \" ) ) ) ) ) )"
    },
    {
        "question": "I have my pc build starting in the afternoon on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) :subject ( ?= # ( String \" pc build \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule moped ride near the beach the first weekend of April .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( NumberWeekOfMonth :month # ( Month \" APRIL \" ) :number # ( Number 1 ) ) ) :subject ( ?= # ( String \" moped ride near the beach \" ) ) ) ) ) )"
    },
    {
        "question": "Hmm ok . Could you make me an event at brunch tomorrow in Seattle ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Seattle \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Brunch ) ) ) ) ) ) )"
    },
    {
        "question": "work Monday at 8 am ending at 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" work \" ) ) ) ) ) )"
    },
    {
        "question": "Who are my reports ?",
        "target": "( Yield :output ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) )"
    },
    {
        "question": "Add a meeting with Jane for next Thursday at 1 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jane \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "ok , please set a lunch with Barack Obama this Friday at 11",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule Adopt a Donkey for Sunday at 3 pm with Kelsey .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kelsey \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" Adopt a Donkey \" ) ) ) ) ) )"
    },
    {
        "question": "Make a appointment for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "ok make metting",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" metting \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add a date in my calendar please ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" date \" ) ) ) ) ) )"
    },
    {
        "question": "Put shopping with Martha on Tuesday at 6 : 00 for ninety minutes .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Martha \" ) ) ) ) ) ) :duration ( ?= ( toMinutes # ( Number 90.0 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" shopping \" ) ) ) ) ) )"
    },
    {
        "question": "Make an event for sunday morning at 3 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule meeting with donors at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" donors \" ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "create doctors appointment for sunday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a Coffee break with Emily for today at 5 : 30 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Emily \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinutePm :hours # ( Number 5 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Coffee break \" ) ) ) ) ) )"
    },
    {
        "question": "I need to get a yoga session with Klara on the calendar for Monday at 10 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Klara \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" yoga session \" ) ) ) ) ) )"
    },
    {
        "question": "I need to add a lunch on Tuesday at 12 : 30 with Barack Obama .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinutePm :hours # ( Number 12 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Add learning how to make vegan egg rolls with Sam an hour after work until 2 hours before dance practice .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) :end ( ?= ( PeriodDurationBeforeDateTime :dateTime ( :start ( FindNumNextEvent :constraint ( Constraint[Event] :subject ( ?~= # ( String \" dance practice \" ) ) ) :number # ( Number 1 ) ) ) :periodDuration ( PeriodDuration :duration ( toHours # ( Number 2 ) ) ) ) ) :start ( ?= ( adjustByPeriodDuration ( :end ( FindNumNextEvent :constraint ( Constraint[Event] :subject ( ?~= # ( String \" work \" ) ) ) :number # ( Number 1 ) ) ) ( PeriodDuration :duration ( toHours # ( Number 1 ) ) ) ) ) :subject ( ?= # ( String \" learning how to make vegan egg rolls \" ) ) ) ) ) )"
    },
    {
        "question": "Put down \" Jake 's 50 th Birthday Party \" on the 23 rd .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 23 ) ) ) ) :subject ( ?= # ( String \" Jake's 50th Birthday Party \" ) ) ) ) ) )"
    },
    {
        "question": "Mark that I 'll be in Grand Marais all of next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( NextWeekList ) :event ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Grand Marais \" ) ) ) ) ) ) )"
    },
    {
        "question": "lets set an event called get ready for sleep at 20 h15 later",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( ?= ( HourMinuteMilitary :hours # ( Number 20.0 ) :minutes # ( Number 15 ) ) ) :date ( Today ) ) :subject ( ?= # ( String \" get ready for sleep \" ) ) ) ) ) )"
    },
    {
        "question": "Create an event",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] ) ) ) )"
    },
    {
        "question": "Block off three hours starting at 11 am on the 15 th with Kylie and Jennifer to discuss the new cosmetics line at Walmart .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kylie \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 3 ) ) ) :location ( ?= # ( LocationKeyphrase \" Walmart \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 15 ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" discuss the new cosmetics line \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a parent / teacher conference for this week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ThisWeek ) ) :subject ( ?= # ( String \" parent/teacher conference \" ) ) ) ) ) )"
    },
    {
        "question": "can you arrange with 8 : 00 AM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a lunch meeting with Paige on April 18",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paige \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 18 ) :month # ( Month \" APRIL \" ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Also had game night with the family ; Grandma Lilly , Uncle Mike , Aunt Sissy , and Pat",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lilly \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mike \" ) ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sissy \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Pat \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" game night with the family \" ) ) ) ) ) )"
    },
    {
        "question": "Thanks . Please schedule a dentist appointment for Friday at 10 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Yes , can you schedule a working lunch at the office for tomorrow at 1 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" the office \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" working lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Please add Lunch with barack obama on Wednesday at 12 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" barack obama \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" Lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Next strawberry picking season , set up an appointment for saturday to go pick strawberries",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" go pick strawberries \" ) ) ) ) ) )"
    },
    {
        "question": "Please add the innaugaration of Barack Obama on Jan 21 , 2020",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MDY :day # ( Number 21 ) :month # ( Month \" JANUARY \" ) :year # ( Number 2020.0 ) ) ) ) :subject ( ?= # ( String \" innaugaration of Barack Obama \" ) ) ) ) ) )"
    },
    {
        "question": "Add roller skating practice to my calendar on Tuesday at 7 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" roller skating practice \" ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting with Frank tomorrow at noon . Please add it to the calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Frank \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "Hi , I need to schedule a piano lesson from 2 to 4 pm tomorrow please .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" piano lesson \" ) ) ) ) ) )"
    },
    {
        "question": "Get me a room at NERD for next Friday to discuss remote workers .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( andConstraint ( ?= # ( LocationKeyphrase \" NERD \" ) ) ( roomRequest ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" discuss remote workers \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule for warp core maintenance on March 5 at 8 : 15 am , it 'll take about 8 hours .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 8 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 5 ) :month # ( Month \" MARCH \" ) ) :time ( HourMinuteAm :hours # ( Number 8 ) :minutes # ( Number 15 ) ) ) ) :subject ( ?= # ( String \" warp core maintenance \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to have reading time from 9 pm to midnight .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberPM :number # ( Number 9 ) ) ) :time ( Midnight ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" reading time \" ) ) ) ) ) )"
    },
    {
        "question": "Hi , can you create an event for 2 PM today ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make me an appointment at WEstbrook health services as soon as possible ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" WEstbrook health services \" ) ) ) ) ) )"
    },
    {
        "question": "Can you create a lunch event for tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting for the evening of the 24 th .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Evening ) :date ( nextDayOfMonth ( Today ) # ( Number 24 ) ) ) ) ) ) )"
    },
    {
        "question": "Well I guess that works , create Nap time at 4 pm August 18",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 18 ) :month # ( Month \" AUGUST \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" Nap time \" ) ) ) ) ) )"
    },
    {
        "question": "Please book disc golf on Saturday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) :subject ( ?= # ( String \" disc golf \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make an event for Friday at 6.=",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make me an event for April 1 2021 ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MDY :day # ( Number 1 ) :month # ( Month \" APRIL \" ) :year # ( Number 2021 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Meeting with Abby Gonano , Dan Marton , and Jesse Rosenfeld",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby Gonano \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Marton \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse Rosenfeld \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event title Pizza Party for July 22 nd .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 22 ) :month # ( Month \" JULY \" ) ) ) ) :subject ( ?= # ( String \" Pizza Party \" ) ) ) ) ) )"
    },
    {
        "question": "hi can you please make sure that jerry and fiona that we have a meeting on tuesday at ten am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jerry \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" fiona \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a shopping day with Abby for tomorrow at 7 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" shopping day \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm visiting China in May",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( FullMonthofMonth :month # ( Month \" MAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule Brett 's Birthday dinner for Sunday night",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Night ) :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) :subject ( ?= # ( String \" Brett's Birthday dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Dan Pan for tomorrow at 5 pm to 6 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Pan \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Saturday I an going to sit around and read from 10 am to 5 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" sit around and read \" ) ) ) ) ) )"
    },
    {
        "question": "Make another event for me on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventOnDate :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :event ( Constraint[Event] ) ) ) ) )"
    },
    {
        "question": "I have a meeting at 5 pm that I need to add to the calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add yoga on the 12 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( nextDayOfMonth ( Today ) # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" yoga \" ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting at 1 pm tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create Gaming Session on Sunday at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Gaming Session \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting late afternoon tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( LateAfternoon ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Create a another meeting in the afternoon on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) :subject ( ?= # ( String \" meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Create a doctors appointment for me on tuesday at 1130 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 11 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a dentist appointment Monday at 11 AM . It will take 2 hours .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Who is Damons skip",
        "target": "( Yield :output ( FindManager :recipient ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Damons \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to schedule an event to my calendar",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] ) ) ) )"
    },
    {
        "question": "I need a hair cut on Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) :subject ( ?= # ( String \" hair cut \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a lunch with paige Ashworth and Cher Roydon monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" paige Ashworth \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cher Roydon \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Book a meeting with Maurice this Monday at 9 am at the park",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Maurice \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" park \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "create a meeting with Matt and Barb for Friday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matt \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barb \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event all day with Abby",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) :isAllDay ( ?= # ( Boolean true ) ) ) ) ) )"
    },
    {
        "question": "Set up meeting with Donald Trump for 2 hours on Sunday , January 10 , 2050 at 5 : 00 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Donald Trump \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MDY :day # ( Number 10.0 ) :month # ( Month \" JANUARY \" ) :year # ( Number 2050.0 ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add coffee with Sam for tomorrow at 6 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" coffee \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule dinner in the evening after groceries",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Evening ) :date ( :date ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" groceries \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "make an event that starts in winter",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( SeasonWinter ) ) ) ) ) )"
    },
    {
        "question": "Can you make me a meeting around 10 am tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( TimeAround :time ( NumberAM :number # ( Number 10.0 ) ) ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting on Thursday at 8 : 30 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 8 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a sprint meeting with Shiryl , Leo , Matt , and Patrick",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Shiryl \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Leo \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Matt \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Patrick \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" Sprint Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make an event for Monday at 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "put meeting with fakir on monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" fakir \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create \" Zoo \" tomorrow , we will be picking up Peter , Chris , Stewie and Meg .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Peter \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Chris \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Stewie \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Meg \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" Zoo \" ) ) ) ) ) )"
    },
    {
        "question": "Show my status as Busy for all of Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :event ( Constraint[Event] :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you please schedule a meeting with Ross at 6 : 00 pm please ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ross \" ) ) ) ) ) ) :start ( Constraint[DateTime] :time ( ?= ( NumberPM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to go to the mall tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" go to the mall \" ) ) ) ) ) )"
    },
    {
        "question": "ok schedule breakfast at 10 : 40 am then",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventOnDateTime :dateTime ( NextTime :time ( HourMinuteAm :hours # ( Number 10.0 ) :minutes # ( Number 40.0 ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" breakfast \" ) ) ) ) ) ) )"
    },
    {
        "question": "schedule a lunch tomorrow with barack obama",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" barack obama \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I need to create an event for tomorrow at 5 pm that says fortnite trio scrims",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" fortnite trio scrims \" ) ) ) ) ) )"
    },
    {
        "question": "Add Roller Skating with Sonya , Trevor , and Simon for Saturday at 11 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sonya \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Trevor \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Simon \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" Roller Skating \" ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting on aug 27",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 27 ) :month # ( Month \" AUGUST \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] ) ) ) )"
    },
    {
        "question": "Set a meeting with Jerry friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jerry \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "create work meeting on tuesday at 2",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" work meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Block off two hours for a hike in central park at 9 : 00 am tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :location ( ?= # ( LocationKeyphrase \" central park \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" hike \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting for tomorrow then ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a camping trip to the Grand Canyon at 7 am on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Grand Canyon \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" camping trip \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add a lunch yesterday at 2 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Yesterday ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Do me a favor and book a conference call with Sally and James next Thursday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sally \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) :subject ( ?= # ( String \" conference call \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a meeting with Wade on Monday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Wade \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Am I free for a game of baseball at 4 pm on Saturday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" game of baseball \" ) ) ) ) ) )"
    },
    {
        "question": "set up a meeting with Emily Wilson",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Emily Wilson \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event for Monday at 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "please note the event hot air balloon ride at 11 AM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" hot air balloon ride \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Paul and Jake next Monday early in the AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paul \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need you to find me three hours for a nap .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 3 ) ) ) :subject ( ?= # ( String \" nap \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to the beach with Paul today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paul \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) :subject ( ?= # ( String \" beach \" ) ) ) ) ) )"
    },
    {
        "question": "I would like to block off 3 hours tomorrow at 7 : 30 pm for a basketball game at the American Airlines Center .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 3 ) ) ) :location ( ?= # ( LocationKeyphrase \" American Airlines Center \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( HourMinutePm :hours # ( Number 7 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" basketball game \" ) ) ) ) ) )"
    },
    {
        "question": "make me an event for 3 pm tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make event \" Meeting with Mark \" next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( NextWeekList ) ) :subject ( ?= # ( String \" Meeting with Mark \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add a call to the caterer on Thursday morning at 10 am to my calendar ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" call to the caterer \" ) ) ) ) ) )"
    },
    {
        "question": "i am ready to meet",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] ) ) ) )"
    },
    {
        "question": "i wanted a 15 minute meeting anytime between 3 to 5 pm , and any of those is fine with me",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 15 ) ) ) :start ( DateTimeAndConstraint :dateTime1 ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) :dateTime2 ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberPM :number # ( Number 3 ) ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "please schedule a emergency appointments today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) :subject ( ?= # ( String \" emergency appointments \" ) ) ) ) ) )"
    },
    {
        "question": "I would like to schedule an appointment for next Thursday at 1 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "create running day on monday at 3",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" running day \" ) ) ) ) ) )"
    },
    {
        "question": "Yugioh is at 5 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" Yugioh \" ) ) ) ) ) )"
    },
    {
        "question": "make an appointment with Jerri Skinner at today 6 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jerri Skinner \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add house work for 1 hour after yard work .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" yard work \" ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" house work \" ) ) ) ) ) )"
    },
    {
        "question": "make an event for throwing bananas at DK",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" throwing bananas at DK \" ) ) ) ) ) )"
    },
    {
        "question": "Put a meeting with Beth on my schedule for tomorrow at 7 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Beth \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 7 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Okay , now add a dentist appointment for March 3 rd at 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 3 ) :month # ( Month \" MARCH \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Great ! Can you book Suit Shopping for today at 4 : 15 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinutePm :hours # ( Number 4 ) :minutes # ( Number 15 ) ) ) ) :subject ( ?= # ( String \" Suit Shopping \" ) ) ) ) ) )"
    },
    {
        "question": "Plrase schedule a physical therapy appointment for me on Monday at 1 pm , not 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" physical therapy appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I need you to create meeting with Jeff on Thursday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jeff \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Who are my reports",
        "target": "( Yield :output ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) )"
    },
    {
        "question": "Can you put me down for a meeting that ends at the end of the work day",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( Constraint[DateTime] :time ( ?= ( EndOfWorkDay ) ) ) ) ) ) )"
    },
    {
        "question": "Create a lunch meeting at the Baskin Robbins after my meeting at 11 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Baskin Robbins \" ) ) :start ( ?= ( NextTime :time ( HourMinuteAm :hours # ( Number 11 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule volunteer time for the dog rescue this Sunday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) :subject ( ?= # ( String \" volunteer time for the dog rescue \" ) ) ) ) ) )"
    },
    {
        "question": "make an event for Sunday shoe shopping",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) :subject ( ?= # ( String \" shoe shopping \" ) ) ) ) ) )"
    },
    {
        "question": "can you arrange with 10 . 00 Am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need a hiking trip in the mountains January 1 for 3 days .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" mountains \" ) ) :nonEmptyBase ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" hiking trip \" ) ) ) :period ( toDays # ( Number 3 ) ) :startDate ( MD :day # ( Number 1 ) :month # ( Month \" JANUARY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Does Dan Schoffel report to anyone ?",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dan Schoffel \" ) ) ) ) ) ) )"
    },
    {
        "question": "Hello , I want to plan a road trip for all of next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( NextWeekList ) :event ( Constraint[Event] :subject ( ?= # ( String \" road trip \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you please schedule me an event at end of work day today ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( EndOfWorkDay ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a hair appointment tomorrow at 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" hair appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Add a two hour team meeting to my calendar on Monday starting at 9 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Create a one - hour event on Thursday starting at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "Pick up the book at 6 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" pick up the book \" ) ) ) ) ) )"
    },
    {
        "question": "lets do april 8 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 8 ) :month # ( Month \" APRIL \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "create basketball game on monday at 8",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" basketball game \" ) ) ) ) ) )"
    },
    {
        "question": "Make an appointment for 2 hours from now",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( adjustByPeriodDuration ( Now ) ( PeriodDuration :duration ( toHours # ( Number 2 ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Could you add skiing with Ed , Edd , and Eddy to my calendar for November 19 th ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ed \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Edd \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Eddy \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 19 ) :month # ( Month \" NOVEMBER \" ) ) ) ) :subject ( ?= # ( String \" skiing \" ) ) ) ) ) )"
    },
    {
        "question": "Can you set a time to play basketball with Kyle , Darian and James next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kyle \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Darian \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" James \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) :subject ( ?= # ( String \" play basketball \" ) ) ) ) ) )"
    },
    {
        "question": "Set a date for all of next week for my vacation .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( NextWeekList ) :event ( Constraint[Event] :subject ( ?= # ( String \" vacation \" ) ) ) ) ) ) )"
    },
    {
        "question": "Add a four hour meeting at 8 am called Group meeting .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 4 ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" Group meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Can you mark me as flyfishing with Jeremy on Saturday at 6 am ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jeremy \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" flyfishing \" ) ) ) ) ) )"
    },
    {
        "question": "Make a dinner appointment with Jim at 5 pm two weeks from today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( adjustByPeriod ( Today ) ( toWeeks # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" dinner appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Now make an event called beach on the 7 th at brunch",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 7 ) ) :time ( Brunch ) ) ) :subject ( ?= # ( String \" beach \" ) ) ) ) ) )"
    },
    {
        "question": "I have a lunch date with Rex t 12 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rex \" ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" lunch date \" ) ) ) ) ) )"
    },
    {
        "question": "I need to invite bryan to the Oakland Party next saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" bryan \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" Oakland Party \" ) ) ) ) ) )"
    },
    {
        "question": "ok please put on my calender that I have a date saturday at 7 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" date \" ) ) ) ) ) )"
    },
    {
        "question": "Need to see who Jake 's boss is .",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) )"
    },
    {
        "question": "I 'd like to make a date with Kate tonight at 5 PM for the Roxbury",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kate \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Roxbury \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" date \" ) ) ) ) ) )"
    },
    {
        "question": "Meet with Mat today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mat \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Block off 2 hours for studying at University of Maryland library tomorrow at 7 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :location ( ?= # ( LocationKeyphrase \" University of Maryland library \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" studying \" ) ) ) ) ) )"
    },
    {
        "question": "Please add Grace 's First Communion on Sunday at 1 : 00 pm to 2 : 00 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Grace's First Communion \" ) ) ) ) ) )"
    },
    {
        "question": "mountain hike at 8 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :time ( ?= ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" mountain hike \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule lunch with my uncle Obama next Monday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Obama \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a Brunch with Kayla and Charlie .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kayla \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Charlie \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" Brunch \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting on Friday called Lunch .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" Lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Put a meeting with Pete Za on Friday at 8",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Pete Za \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Team Morale Meeting at Bowser Haus on Friday from 5 : 30 pm to 8 : 30 pm . Invite Toad , Daisy , and Rosalina to it",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Toad \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Daisy \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rosalina \" ) ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 5 ) :minutes # ( Number 30.0 ) ) ) :time ( HourMinutePm :hours # ( Number 8 ) :minutes # ( Number 30.0 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Bowser Haus \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 5 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Team Morale Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Make an all day event tomorrow for Kelsey 's birthday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( Tomorrow ) :event ( Constraint[Event] :subject ( ?= # ( String \" Kelsey's birthday \" ) ) ) ) ) ) )"
    },
    {
        "question": "Please add an event named \" dinner \" for tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I need to go to the Elf Kingdom to offer a peace treaty . It is going to be on Sunday at 2 pm to 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" go to the Elf Kingdom to offer a peace treaty \" ) ) ) ) ) )"
    },
    {
        "question": "Add an appointment after lunch with Jack for Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) :start ( OnDateAfterTime :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Lunch ) ) ) ) ) )"
    },
    {
        "question": "make a new event for next thursday at 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "singing competition saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" singing competition \" ) ) ) ) ) )"
    },
    {
        "question": "I need a meeting with Kim but first need to know who is on her team ?",
        "target": "( Yield :output ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) )"
    },
    {
        "question": "Add quick bite with Jennie on Friday from 6 : 30 to 7 : 00 pm on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennie \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 6 ) :minutes # ( Number 30.0 ) ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 6 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" quick bite \" ) ) ) ) ) )"
    },
    {
        "question": "sunday funday at jeffs at 10",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" jeffs \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" funday \" ) ) ) ) ) )"
    },
    {
        "question": "3 pm Coffee Break today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" Coffee Break \" ) ) ) ) ) )"
    },
    {
        "question": "Make a lunch meeting with Robert on Tuesday at Maddison 's .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Robert \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Maddison's \" ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Could you make sure that my meeting with Jen is on the calendar for next Monday at 8 : 00 AM ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jen \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please give me a meeting tomorrow that ends at the end of the day .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( EndOfWorkDay ) ) ) ) ) ) )"
    },
    {
        "question": "Friday is the Magic the Gathering convention at that 's from 6 to 8 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" Magic the Gathering convention \" ) ) ) ) ) )"
    },
    {
        "question": "Dinner meeting at Michelle 's 7 pm tonight .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Michelle's \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" Dinner meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add a meeting at corporate to my schedule on Tuesday Jan 29 th from 3 pm to 4 pm and put me down for out of the office ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( MD :day # ( Number 29 ) :month # ( Month \" JANUARY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" corporate \" ) ) :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 29 ) :month # ( Month \" JANUARY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks , and can you add planning session at 9 am on monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" planning session \" ) ) ) ) ) )"
    },
    {
        "question": "Can you set aside 3 days at the beginning of November for my pilgrimage ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" pilgrimage \" ) ) ) :period ( toDays # ( Number 3 ) ) :startDate ( MD :day # ( Number 3 ) :month # ( Month \" NOVEMBER \" ) ) ) ) ) )"
    },
    {
        "question": "Make an appointment with Todd for Monday at 1 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Todd \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make appointment at 3 : 30 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make me an event early in the day for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( EarlyTimeRange :timeRange ( Morning ) ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Okay , I need you to add a bookkeeping meeting with Allison for a half hour after my HR meeting tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Allison \" ) ) ) ) ) ) :start ( ?= ( adjustByPeriodDuration ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( Tomorrow ) :event ( Constraint[Event] :subject ( ?= # ( String \" HR meeting \" ) ) ) ) ) ) ) ) ( PeriodDuration :duration ( toHours # ( Number 0.5 ) ) ) ) ) :subject ( ?= # ( String \" bookkeeping meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a Staff Meeting after my last Client Presentation on the 4 th .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( :end ( FindLastEvent :constraint ( EventOnDate :date ( nextDayOfMonth ( Today ) # ( Number 4 ) ) :event ( Constraint[Event] :subject ( ?~= # ( String \" Client Presentation \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" Staff Meeting \" ) ) ) ) ) )"
    },
    {
        "question": "MJy rent is due on the 11 th of May.",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 11 ) :month # ( Month \" MAY \" ) ) ) ) :subject ( ?= # ( String \" MJy rent is due \" ) ) ) ) ) )"
    },
    {
        "question": "Meet Barack Obama tomorrow at 10 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a \" Doctor 's Appointment \" at 4 pm this Thursday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" Doctor's Appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule gym time at 6 pm this evening for 1 hour .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" gym time \" ) ) ) ) ) )"
    },
    {
        "question": "i also have a meeting at 8 am Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "All right , I need to add dog groomer at 5 pm today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" dog groomer \" ) ) ) ) ) )"
    },
    {
        "question": "can you put a meet with Homie on tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Homie \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a trip to England for 10 days starting on December 1 st .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" trip to England \" ) ) ) :period ( toDays # ( Number 10.0 ) ) :startDate ( MD :day # ( Number 1 ) :month # ( Month \" DECEMBER \" ) ) ) ) ) )"
    },
    {
        "question": "Create an appointment with steve from 1 pm to 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" steve \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberPM :number # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Who reports to me then ?",
        "target": "( Yield :output ( FindReports :recipient ( toRecipient ( CurrentUser ) ) ) )"
    },
    {
        "question": "Now I need you add a meet and greet with Silvia on Saturday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Silvia \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" meet and greet \" ) ) ) ) ) )"
    },
    {
        "question": "I have a hair appointment for all day Sunday , please confirm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" hair appointment \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make a lunch meeting at 12 : 30 ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( HourMinutePm :hours # ( Number 12 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Set me up for a hair cut Friday 8 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" hair cut \" ) ) ) ) ) )"
    },
    {
        "question": "put meeting with regija and rick",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" regija \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" rick \" ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create an event for Monday at 2 : 30 as Vet",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Vet \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a swimming party for the summer .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( SeasonSummer ) ) :subject ( ?= # ( String \" swimming party \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add # Grocery Shopping to my Calendar ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" #Grocery Shopping \" ) ) ) ) ) )"
    },
    {
        "question": "Create time to go shopping on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( Constraint[Date] ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" shopping \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule this weekend , July 27 - 29 as Trip to Bar Harbour .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( Constraint[DateTime] :date ( ?= ( nextMonthDay ( MD :day # ( Number 27 ) :month # ( Month \" JULY \" ) ) # ( Month \" JULY \" ) # ( Number 29 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Trip to Bar Harbour \" ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 27 ) :month # ( Month \" JULY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I will be at JJs diner tomorrow morning at 8 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" JJs diner \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I 'd like to do a one on one work interview with Paige Ashworth from 2 - 3 pm on Tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paige Ashworth \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" work interview \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm having the Smash Shots Tournament next week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( NextWeekList ) ) :subject ( ?= # ( String \" Smash Shots Tournament \" ) ) ) ) ) )"
    },
    {
        "question": "make a outing trip this weekend josh and amma",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" josh \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" amma \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ThisWeekend ) ) :subject ( ?= # ( String \" outing trip \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a doctor appointment for next tuesday at 8 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" doctor appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a soccer match on Wednesday afternoon at 3 PM at Hellyer Park",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Hellyer Park \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" soccer match \" ) ) ) ) ) )"
    },
    {
        "question": "Set up a rafting event for 4 hours tomorrow at 7 am on the Rio Grande",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 4 ) ) ) :location ( ?= # ( LocationKeyphrase \" Rio Grande \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" rafting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a dinner with Kim on Saturday night .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Can you also schedule a meeting with Kate and Alex at 3 : 30 pm on Thursday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kate \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alex \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Thanks , add go to lunch to my schedule today at 11 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" go to lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I';d like to make an appointment for Monday at 8 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Lets add Wash Clothes Thursday afternoon at 4 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" Wash Clothes \" ) ) ) ) ) )"
    },
    {
        "question": "Make me an event on Friday called go to Q",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" go to Q \" ) ) ) ) ) )"
    },
    {
        "question": "I need to set a meeting at 10 am in conference room B.",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" conference room B \" ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 10.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need to set up a lunch appointment on Saturday !",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Make the meeting 4",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "And who 's on David Crim 's team ?",
        "target": "( Yield :output ( FindTeamOf :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" David Crim \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting with Tina tomorrow at 3 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tina \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a meeting in two weeks .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( adjustByPeriod ( Today ) ( toWeeks # ( Number 2 ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "set time to order tv tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" order tv \" ) ) ) ) ) )"
    },
    {
        "question": "Please add an event \" Camping \" with abby please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" abby \" ) ) ) ) ) ) :subject ( ?= # ( String \" Camping \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule dinner late this evening .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( LateTimeRange :timeRange ( Evening ) ) :date ( Today ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "create event at 13 30",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( HourMinuteMilitary :hours # ( Number 13 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "schedule a meeting with Jim and Sarah tonight to discuss employee reviews",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) :subject ( ?= # ( String \" discuss employee reviews \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule my coffee break early on the 12 th",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Early ) :date ( nextDayOfMonth ( Today ) # ( Number 12 ) ) ) :subject ( ?= # ( String \" coffee break \" ) ) ) ) ) )"
    },
    {
        "question": "Lemme get an Event for early in the day on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Early ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Add lunch next monday with my mom at noon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "create poker night on monday at 9 until 12",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 9 ) ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" poker night \" ) ) ) ) ) )"
    },
    {
        "question": "Does Louis and Ursla have the same manager ?",
        "target": "( Yield :output ( == ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Louis \" ) ) ) ) ) ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ursla \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a reminder for dentist appointment tomorrow at 8 in the morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Make a appointment for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "And I will like to go to Ocean Buffet after Fishing tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( EventOnDate :date ( Tomorrow ) :event ( Constraint[Event] :subject ( ?~= # ( String \" Fishing \" ) ) ) ) ) ) ) ) ) :subject ( ?= # ( String \" Ocean Buffet \" ) ) ) ) ) )"
    },
    {
        "question": "Set up an appointment with Doctor Freedman at 47 Doctor 's Park for Tuesday 2 pm .",
        "target": "( do ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Doctor Freedman \" ) ) ) ) ) ) ( Constraint[Event] ) # ( Path \" attendees \" ) ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" 47 Doctor's Park \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need you to create a new event subject \" Play Smash online this Saturday \" and schedule it for 8 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" Play Smash online this Saturday \" ) ) ) ) ) )"
    },
    {
        "question": "On sunday add 2 hours to clean closets at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" clean closets \" ) ) ) ) ) )"
    },
    {
        "question": "set up a new calendar event with location set for home",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" home \" ) ) ) ) ) )"
    },
    {
        "question": "Create a meeting with Dwight at Chili 's at 4 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Dwight \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Chili's \" ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please note that I have the triathlon all next weekend .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( NextWeekend ) :event ( Constraint[Event] :subject ( ?= # ( String \" triathlon \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule me an event at brunch Friday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Brunch ) ) ) ) ) ) )"
    },
    {
        "question": "Please make a week long event the week of the 26 th of this month labeled \" Vegas \"",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" Vegas \" ) ) ) :period ( toWeeks # ( Number 1 ) ) :startDate ( MD :day # ( Number 26 ) :month ( :month ( Today ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule discussion over dinner today at 7 pm and invite Jess please .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jess \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" discussion over dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add that I have a meeting with Mike tomorrow at 3 : 00 p.m. in his office ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mike \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" his office \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have to review the notes of the meeting at 1 pm tomorrow as well .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" review the notes of the meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I would like to schedule a dentist appointment for next Thursday at 1 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Please make a work business trip to Kansas lasting 5 days on the 10 th .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" work business trip to Kansas \" ) ) ) :period ( toDays # ( Number 5 ) ) :startDate ( nextDayOfMonth ( Today ) # ( Number 10.0 ) ) ) ) ) )"
    },
    {
        "question": "Please create a coffee break for 9 : 45 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( HourMinuteAm :hours # ( Number 9 ) :minutes # ( Number 45 ) ) ) ) :subject ( ?= # ( String \" coffee break \" ) ) ) ) ) )"
    },
    {
        "question": "Create an event with the name of \" Mark \" on Friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) :subject ( ?= # ( String \" Mark \" ) ) ) ) ) )"
    },
    {
        "question": "Add meet Mary and Lucas at the mall at 4 : 00 PM today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Mary \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Lucas \" ) ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" mall \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "please add dinner to my calendar on saturday at 7 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Jackie between 7 and 9 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jackie \" ) ) ) ) ) ) :start ( DateTimeAndConstraint :dateTime1 ( NextTime :time ( NumberPM :number # ( Number 7 ) ) ) :dateTime2 ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberPM :number # ( Number 7 ) ) ) :time ( NumberPM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make me an event called Mickey on Dec 5 at 6 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 5 ) :month # ( Month \" DECEMBER \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" Mickey \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make an event for Monday at 6 pm for dinner",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I need you to add a meeting to my calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] ) ) ) )"
    },
    {
        "question": "Can you set an event for \" meeting with Sam \" at 8 am on Friday morning ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" meeting with Sam \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Martha for Friday at 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Martha \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a meeting for 1300 hours today",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinuteMilitary :hours # ( Number 13 ) :minutes # ( Number 0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a schedule tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Make a football game watch party Sunday at 3 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" football game watch party \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting called Jan on February 14 th at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 14 ) :month # ( Month \" FEBRUARY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Jan \" ) ) ) ) ) )"
    },
    {
        "question": "I need you to put Bake Off on my schedule for early tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Early ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" Bake Off \" ) ) ) ) ) )"
    },
    {
        "question": "also put me out all day on the 28 th of October .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( MD :day # ( Number 28 ) :month # ( Month \" OCTOBER \" ) ) :event ( Constraint[Event] :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) ) ) ) ) )"
    },
    {
        "question": "Okay , can you please add a meeting with Cort on Monday at 2 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Cort \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Great . Now add print out copies of Covent to my schedule on Saturday at 1 : 30 pm . I 'll probably just end up doing it at the Office Depot on Carrolton .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" the Office Depot on Carrolton \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" print out copies of Covent \" ) ) ) ) ) )"
    },
    {
        "question": "Ballet practice this week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ThisWeek ) ) :subject ( ?= # ( String \" Ballet practice \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm looking to add a event to my calendar for next Wednesday that I will need to take my cat to the vet .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) :subject ( ?= # ( String \" take my cat to the vet \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm going on a date tonight at 9 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" date \" ) ) ) ) ) )"
    },
    {
        "question": "I need to put a friend lunch on my schedule at 11 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" friend lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Add an event after my paintball match",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" paintball match \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "set an appointment with john at 8 pm tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" john \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "My meeting last Thursday at 2 : 30 PM was with Tim",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tim \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( previousDayOfWeek ( Today ) # ( DayOfWeek \" THURSDAY \" ) ) :time ( HourMinutePm :hours # ( Number 2 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set me as away from office all day for video games",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :nonEmptyBase ( EventAllDayOnDate :date ( Today ) :event ( Constraint[Event] :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) ) ) :subject ( ?= # ( String \" video games \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add a doctor appointment at noon tomorrow ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) :subject ( ?= # ( String \" doctor appointment \" ) ) ) ) ) )"
    },
    {
        "question": "what about can you put go see flowers tomorrow at 2 pm ? I want to pick just the right bouqet so that will take me at least 2 hours because i m picky",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" go see flowers \" ) ) ) ) ) )"
    },
    {
        "question": "Make an all day fishing trip on tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" fishing trip \" ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a Family Gathering for tomorrow at brunch please .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Brunch ) ) ) :subject ( ?= # ( String \" Family Gathering \" ) ) ) ) ) )"
    },
    {
        "question": "I need to write a movie blog tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" write a movie blog \" ) ) ) ) ) )"
    },
    {
        "question": "create a time at 3 . 45 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 45 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a new appointment with Bob tonight at 7 PM for an hour .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bob \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 7 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add the Soccer Practice I had last Friday at 3 : 45 pm to my calendar .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( previousDayOfWeek ( Today ) # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 3 ) :minutes # ( Number 45 ) ) ) ) :subject ( ?= # ( String \" Soccer Practice \" ) ) ) ) ) )"
    },
    {
        "question": "Create Staff Lunch after meeting with Jen but before 6 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeAndConstraint :dateTime1 ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipientConstraint :recipientConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jen \" ) ) ) ) ) ) ) ) :dateTime2 ( TimeAfterDateTime :dateTime ( :end ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipientConstraint :recipientConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jen \" ) ) ) ) ) ) ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" Staff Lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Add the hiking trip to my calendar to be from Monday through Wednesday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :date2 ( nextDayOfWeek ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) # ( DayOfWeek \" WEDNESDAY \" ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" hiking trip \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you set up an appointment with Dr. Kristen Clifford Wednesday at 3 : 00 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kristen Clifford \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put on my calendar that I had a meeting with Rachel last Tuesday at 4 : 15 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rachel \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( previousDayOfWeek ( Today ) # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinutePm :hours # ( Number 4 ) :minutes # ( Number 15 ) ) ) ) ) ) ) )"
    },
    {
        "question": "make a appointment for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I need to pick up a dog next spring",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( SeasonSpring ) ) :subject ( ?= # ( String \" pick up a dog \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule golf for Saturday from 9 AM until 2 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" golf \" ) ) ) ) ) )"
    },
    {
        "question": "Hi , I need to meet with Alex tomorrow afternoon for an hour .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alex \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Tomorrow ) ) ) ) ) )"
    },
    {
        "question": "Set an appointment for my Super Smash Tournaments for this Saturday at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" Super Smash Tournaments \" ) ) ) ) ) )"
    },
    {
        "question": "put mom 's birthday party on the calendar for tomorrow at 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" mom's birthday party \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a meeting with the Jack tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jack \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "schedule grandma 's 100 th birthday party for March 8 2020 at 8 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MDY :day # ( Number 8 ) :month # ( Month \" MARCH \" ) :year # ( Number 2020.0 ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" grandma's 100th birthday party \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a Star Viewing past 8 but before midnight tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeAndConstraint :dateTime1 ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 8 ) ) ) :dateTime2 ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 8 ) ) ) :time ( Midnight ) ) ) :subject ( ?= # ( String \" Star Viewing \" ) ) ) ) ) )"
    },
    {
        "question": "Add a team meeting for Wednesday at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm going to be in Pittsburgh next week for a conference starting on Monday and lasting three days .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Pittsburgh \" ) ) :subject ( ?= # ( String \" conference \" ) ) ) :period ( toDays # ( Number 3 ) ) :startDate ( DowOfWeekNew :dow # ( DayOfWeek \" MONDAY \" ) :week ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "make the meeting sync on Friday with Jerry Skinner",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jerry Skinner \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting with Kristen Clifford for Thursday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kristen Clifford \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to create an appointment with Jerri Skinner",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jerri Skinner \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you mark down my Road Trip with Angela this Fall ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Angela \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( SeasonFall ) ) :subject ( ?= # ( String \" Road Trip \" ) ) ) ) ) )"
    },
    {
        "question": "Please add an all day swim competition for next Saturday with Jim starting at 10 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" all day swim competition \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule dinner with Susie for Carrabas at 7 : 00 PM Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Susie \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Add dog grooming appointment on the 18 th at 4",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 18 ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" dog grooming appointment \" ) ) ) ) ) )"
    },
    {
        "question": "set up evaluation meeting with Karl Boon for Tuesday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karl Boon \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) :subject ( ?= # ( String \" evaluation meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I 'll be off work for 3 days from tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" off work \" ) ) ) :period ( toDays # ( Number 3 ) ) :startDate ( Tomorrow ) ) ) ) )"
    },
    {
        "question": "Add a trip to Canada with Michelle , Patti and Stephanie .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Michelle \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Patti \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Stephanie \" ) ) ) ) ) ) ) :subject ( ?= # ( String \" trip to Canada \" ) ) ) ) ) )"
    },
    {
        "question": "I need a late afternoon meeting to be added on the schedule for Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( LateAfternoon ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "can you make me an event next week that is nt a weekend ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( andConstraint ( Constraint[DateTime] :date ( Constraint[Date] :dayOfWeek ( negate ( Weekend ) ) ) ) ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) ) )"
    },
    {
        "question": "Let 's make a maybe lunch with dave for saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" dave \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" maybe lunch \" ) ) ) ) ) )"
    },
    {
        "question": "I need to add a meeting at 4 pm today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create Buy Birthday Gift for tomorrow at 1 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Buy Birthday Gift \" ) ) ) ) ) )"
    },
    {
        "question": "make a meeting in an hour",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( adjustByPeriodDuration ( Now ) ( PeriodDuration :duration ( toHours # ( Number 1 ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule sports meet in ' 23",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( FullYearofYear :year # ( Number 22 ) ) ) :subject ( ?= # ( String \" sports meet \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make a new appointment in the Blue Conference Room in July ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Blue Conference Room \" ) ) :start ( Constraint[DateTime] :date ( FullMonthofMonth :month # ( Month \" JULY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule me a meeting with Fiona Mason and Karl Boon tomorrow from 2 pm - 4 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Fiona Mason \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Karl Boon \" ) ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a dentist appointment for Friday afternoon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "i also have team meeting this Thursday at 2 pm for an hour",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Can You update my Calendar to add that tomorrow there is a meeting at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you setup a meeting with karl next Tuesday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" karl \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "I need Breakfast set to 0630 next friday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinuteMilitary :hours # ( Number 6 ) :minutes # ( Number 30.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create 20 minutes jogging time tonight",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 20.0 ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) :subject ( ?= # ( String \" jogging time \" ) ) ) ) ) )"
    },
    {
        "question": "Ok , I have a test on Monday from 3 - 6 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" test \" ) ) ) ) ) )"
    },
    {
        "question": "I 'm going Apple Bobbing tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" Apple Bobbing \" ) ) ) ) ) )"
    },
    {
        "question": "hi , help me set a meeting tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "set up a meeting with cornelio sunday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" cornelio \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make a new event for monday at 5 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put shopping at 5 pm on the schedule .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" shopping \" ) ) ) ) ) )"
    },
    {
        "question": "make an appointment thursday morning with alex",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" alex \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "can you put start the day tomorrow at 8 am and then my morning routine should only be 30 minutes tomorrow since i m not wearing makeup",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 30.0 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" start the day \" ) ) ) ) ) )"
    },
    {
        "question": "Please add an event with Paige Ashworth for May 5 th , 2020",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paige Ashworth \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MDY :day # ( Number 5 ) :month # ( Month \" MAY \" ) :year # ( Number 2020.0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Great . can you schedule dinner with Tina tonight ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Tina \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Now make me an event called Ultimate Friendlies , and have it anytime not on the weekend because i m busy on the weekend",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( Constraint[Date] :dayOfWeek ( negate ( Weekend ) ) ) ) :subject ( ?= # ( String \" Ultimate Friendlies \" ) ) ) ) ) )"
    },
    {
        "question": "Can you set one up for me for Friday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set my status as out of the office while I go lay siege on Portland tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Portland \" ) ) :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" go lay siege \" ) ) ) ) ) )"
    },
    {
        "question": "schedule a staff meeting on Monday morning for 45 minutes after 9 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 45 ) ) ) :start ( DateTimeConstraint :constraint ( ?= ( NumberAM :number # ( Number 9 ) ) ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) :subject ( ?= # ( String \" staff meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I need to add the dogs vet appointment to my schedule for Friday at 10 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" dogs vet appointment \" ) ) ) ) ) )"
    },
    {
        "question": "set an appointment for 5",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I want to go to lunch tomorrow at Burger Shot",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Burger Shot \" ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "create 1 more event on the 30 of aug titled Sleep Talk",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 30.0 ) :month # ( Month \" AUGUST \" ) ) ) ) :subject ( ?= # ( String \" Sleep Talk \" ) ) ) ) ) )"
    },
    {
        "question": "hi , i need to book a dental appointment tomorrow afternoon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Afternoon ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" dental appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Make an event for Tuesday at 9 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add an appointment for me at 5",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule snowboarding for Saturday at 3 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" snowboarding \" ) ) ) ) ) )"
    },
    {
        "question": "If it 's possible , can you create a morning appointment ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :time ( Morning ) ) ) ) ) )"
    },
    {
        "question": "schedule a vacation in the summer time",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( SeasonSummer ) ) :subject ( ?= # ( String \" vacation \" ) ) ) ) ) )"
    },
    {
        "question": "Who is Sally 's manager ?",
        "target": "( Yield :output ( FindManager :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sally \" ) ) ) ) ) ) )"
    },
    {
        "question": "could you schedule a dentist appointment for me in one week ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( adjustByPeriod ( Today ) ( toWeeks # ( Number 1 ) ) ) ) ) :subject ( ?= # ( String \" dentist appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Create a breakfast meeting with Abby , Jesse , and Parker on Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Parker \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" breakfast meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Hey make an event named \" REEEEEEEEE \"",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" REEEEEEEEE \" ) ) ) ) ) )"
    },
    {
        "question": "set upa a doctors appt on Dec 3 at 7 : 50 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 3 ) :month # ( Month \" DECEMBER \" ) ) :time ( HourMinuteAm :hours # ( Number 7 ) :minutes # ( Number 50.0 ) ) ) ) :subject ( ?= # ( String \" doctors appt \" ) ) ) ) ) )"
    },
    {
        "question": "Add to calendar meeting at outback steakhouse on Friday at 12 : 00 to 1 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" outback steakhouse \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting with her on July 7 th . Can you add that ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 7 ) :month # ( Month \" JULY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "create a meeting at 5 pm with Grace",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Grace \" ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create luncheon at city centre before 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" city centre \" ) ) :start ( OnDateBeforeTime :date ( Execute :intension ( refer ( extensionConstraint ( Constraint[Date] ) ) ) ) :time ( NumberPM :number # ( Number 2 ) ) ) :subject ( ?= # ( String \" luncheon \" ) ) ) ) ) )"
    },
    {
        "question": "Add an event on March 5 th at 6 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 5 ) :month # ( Month \" MARCH \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set a doctor appointment for Monday at 9 : 00 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" doctor appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Add to the schedule a dress appointment with the bridal shop on Friday at 5 pm to get fitted for my bridesmaids dress for my sisters wedding .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" dress appointment with the bridal shop \" ) ) ) ) ) )"
    },
    {
        "question": "I need a doctors appointment made for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" doctors appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I had a football game with Brent last Friday at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brent \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( previousDayOfWeek ( Today ) # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" football game \" ) ) ) ) ) )"
    },
    {
        "question": "Add meeting for Tuesday of next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( DowOfWeekNew :dow # ( DayOfWeek \" TUESDAY \" ) :week ( NextWeekList ) ) ) ) ) ) ) )"
    },
    {
        "question": "Set up Tea Time with Alice on Sunday at 11 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alice \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" Tea Time \" ) ) ) ) ) )"
    },
    {
        "question": "put dinner with ben",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" ben \" ) ) ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Find 15 minutes for Deep Breathing on Monday after 1 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 15 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" Deep Breathing \" ) ) ) ) ) )"
    },
    {
        "question": "Book bike ride at 4 pm today .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" bike ride \" ) ) ) ) ) )"
    },
    {
        "question": "My run on sunday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) ) ) :subject ( ?= # ( String \" run \" ) ) ) ) ) )"
    },
    {
        "question": "Put a meeting on my calendar tomorrow to go buy a coat",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" go buy a coat \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting called Updates at 4 pm on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" Updates \" ) ) ) ) ) )"
    },
    {
        "question": "Add walk the dogs at 1 : 30 PM to my schedule",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" walk the dogs \" ) ) ) ) ) )"
    },
    {
        "question": "I had a luncheon last Tuesday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( previousDayOfWeek ( Today ) # ( DayOfWeek \" TUESDAY \" ) ) ) ) :subject ( ?= # ( String \" luncheon \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a meeting with Damien next week .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Damien \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Meeting today at 4 pm , I need you to put it on the schedule .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a meeting with Leslie tomorrow at 11 : 00 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Leslie \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 11 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add \" Hamptons trip \" to friday through sunday of this week",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayForDateRange :dateRange ( DateAndConstraint :date1 ( DowOfWeekNew :dow # ( DayOfWeek \" FRIDAY \" ) :week ( ThisWeek ) ) :date2 ( nextDayOfWeek ( DowOfWeekNew :dow # ( DayOfWeek \" FRIDAY \" ) :week ( ThisWeek ) ) # ( DayOfWeek \" SUNDAY \" ) ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" Hamptons trip \" ) ) ) ) ) ) )"
    },
    {
        "question": "add vaction for the week of july 4",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( WeekOfDateNew :date ( MD :day # ( Number 4 ) :month # ( Month \" JULY \" ) ) ) ) :subject ( ?= # ( String \" vacation \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a co - worker sync",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" co-worker sync \" ) ) ) ) ) )"
    },
    {
        "question": "Create brunch sales war meeting with Jeff at 11 : 00 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jeff \" ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 11 ) ) ) ) :subject ( ?= # ( String \" brunch sales war meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I want meet my close friend at 3 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( NextTime :time ( NumberAM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" meet my close friend \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make a meeting Tuesday at 3 : 00 PM ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Ok - well get the staff meeting scheduled for Friday at 3 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" staff meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Add return calls at 4 on tuesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" return calls \" ) ) ) ) ) )"
    },
    {
        "question": "I want to make a meeting called Update with Jim at noon on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jim \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" Update \" ) ) ) ) ) )"
    },
    {
        "question": "I need to book 2 hours tomorrow for a Golf Tournament at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" Golf Tournament \" ) ) ) ) ) )"
    },
    {
        "question": "Please set up a meeting with Alexa next wednesday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Alexa \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "May you add Rex Poling to my calender",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Rex Poling \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Also add a hair appointment on Tuesday the 19 th from 2 : 00 to 3 : 00 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 19 ) ) :time ( NumberPM :number # ( Number 2 ) ) ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 19 ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" hair appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Plan a dinner date on the 17 th from 5 to 8 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 17 ) ) :time ( NumberPM :number # ( Number 5 ) ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 17 ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" dinner date \" ) ) ) ) ) )"
    },
    {
        "question": "I arrange a party for my kid birthday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :subject ( ?= # ( String \" party for my kid birthday \" ) ) ) ) ) )"
    },
    {
        "question": "Get a meeting in a room at the NERD for me please",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( andConstraint ( ?= # ( LocationKeyphrase \" NERD \" ) ) ( roomRequest ) ) ) ) ) )"
    },
    {
        "question": "Create a budget meeting for tomorrow 8 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" budget meeting \" ) ) ) ) ) )"
    },
    {
        "question": "put big race on my schedule saturday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) ) :subject ( ?= # ( String \" big race \" ) ) ) ) ) )"
    },
    {
        "question": "Add a meeting for Monday between 9 - 12",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add a fall bbq to the calendar ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( SeasonFall ) ) :subject ( ?= # ( String \" bbq \" ) ) ) ) ) )"
    },
    {
        "question": "I need to schedule a appointment with Barack Obama on Thursday at 4 : 00 pm to go over the budget .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" go over the budget \" ) ) ) ) ) )"
    },
    {
        "question": "Oh ... Okay . Could you also add to my calendar that I have a meeting on april 10 th at 9 am ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 10.0 ) :month # ( Month \" APRIL \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule an event with Janice and Jerri on April 20",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Janice \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jerri \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 20.0 ) :month # ( Month \" APRIL \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Put a budget meeting with Beth , Richard , and Beverly on Tuesday at 1 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Beth \" ) ) ) ) ) ) ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Richard \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Beverly \" ) ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" budget meeting \" ) ) ) ) ) )"
    },
    {
        "question": "put the dinner with jimmy at 9 . 00 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jimmy \" ) ) ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a doctor 's appointment on Tuesday at 8 : 30 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( HourMinutePm :hours # ( Number 8 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" doctor's appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Can you add a meeting to today 's schedule ? At 3 pm with Sarah ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sarah \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add Pope meeting for tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" Pope meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Make an appointment in Portland Oregon at 5 pm on January 31 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Portland Oregon \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 31 ) :month # ( Month \" JANUARY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can I add an event for March 31 st",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( MD :day # ( Number 31 ) :month # ( Month \" MARCH \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "Make an event for tuesday at 6 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Who is the boss for this account ?",
        "target": "( Yield :output ( FindManager :recipient ( toRecipient ( CurrentUser ) ) ) )"
    },
    {
        "question": "On March 15 th , add an event called anniversary dinner at 6 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( MD :day # ( Number 15 ) :month # ( Month \" MARCH \" ) ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" anniversary dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Add my date with Sam too .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) :subject ( ?= # ( String \" date \" ) ) ) ) ) )"
    },
    {
        "question": "Add a pool party with myself and Barack Obama to my calendar for tomorrow at 9 : 00 AM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" pool party \" ) ) ) ) ) )"
    },
    {
        "question": "Is there an opening next week for the meeting with Eric ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Eric \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) ) ) ) )"
    },
    {
        "question": "Add a sales presentation with Abby , Kim , and Jake tomorrow at 3 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 3 ) ) ) ) :subject ( ?= # ( String \" sales presentation \" ) ) ) ) ) )"
    },
    {
        "question": "Please set up a meeting with Abby for Friday at 1 pm through the end of the day",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( EndOfWorkDay ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can I set up a dinner date tomorrow at the Chili 's off of highway 75 at 6 : 00 pm ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Chili's off of highway 75 \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 6 ) ) ) ) :subject ( ?= # ( String \" dinner date \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule time for a haircut early next Monday",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Early ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) :subject ( ?= # ( String \" haircut \" ) ) ) ) ) )"
    },
    {
        "question": "Can you find 3 hours of free time next week to schedule a planning meeting ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 3 ) ) ) :start ( Constraint[DateTime] :date ( NextWeekList ) ) :subject ( ?= # ( String \" planning meeting \" ) ) ) ) ) )"
    },
    {
        "question": "An appointment with Barack Obama ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you add a staff meeting to the calendar on Tuesday of next week late in the morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( LateMorning ) :date ( DowOfWeekNew :dow # ( DayOfWeek \" TUESDAY \" ) :week ( NextWeekList ) ) ) :subject ( ?= # ( String \" staff meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Put a doctor appointment on my calendar for the 14 th at 2 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 14 ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" doctor appointment \" ) ) ) ) ) )"
    },
    {
        "question": "put a appointment with shaun tomorrow 8 . 00 to 8 . 30 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" shaun \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) :time ( HourMinuteAm :hours # ( Number 8 ) :minutes # ( Number 30.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberAM :number # ( Number 8 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add brainstorming meeting to the calendar for next Monday morning .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) :subject ( ?= # ( String \" brainstorming meeting \" ) ) ) ) ) )"
    },
    {
        "question": "add Party for 2020",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( Today ) ) ) :subject ( ?= # ( String \" Party for 2020 \" ) ) ) ) ) )"
    },
    {
        "question": "make an event for tuesday at 4 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Paige Ashworth will need to be added to the appointment book for Tuesday next week at 8 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Paige Ashworth \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( DowOfWeekNew :dow # ( DayOfWeek \" TUESDAY \" ) :week ( NextWeekList ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" appointment book \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a Hawaii work trip for 5 days starting 10 / 31 / 19 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayStartingDateForPeriod :event ( Constraint[Event] :subject ( ?= # ( String \" Hawaii work trip \" ) ) ) :period ( toDays # ( Number 5 ) ) :startDate ( MD :day # ( Number 31 ) :month ( toMonth # ( Number 10.0 ) ) ) ) ) ) )"
    },
    {
        "question": "Cool , now schedule a meeting tomorrow at 2 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Actually there 's a mushroom seminar that started an hour ago , and will end in an hour",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( adjustByPeriodDuration ( Now ) ( PeriodDuration :duration ( toHours # ( Number 1 ) ) ) ) ) :start ( ?= ( PeriodDurationBeforeDateTime :dateTime ( Now ) :periodDuration ( PeriodDuration :duration ( toHours # ( Number 1 ) ) ) ) ) :subject ( ?= # ( String \" mushroom seminar \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting with Sam for Friday evening",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Sam \" ) ) ) ) ) ) :start ( DateTimeConstraint :constraint ( Evening ) :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) ) ) ) ) )"
    },
    {
        "question": "Make me an event on friday at the end of the day until 8 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( EndOfWorkDay ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( EndOfWorkDay ) ) ) ) ) ) )"
    },
    {
        "question": "Let 's set up a coaching appointment for Monday at 7 : 45 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( HourMinuteAm :hours # ( Number 7 ) :minutes # ( Number 45 ) ) ) ) :subject ( ?= # ( String \" coaching appointment \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a sales call with Carlos Friday at noon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Carlos \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( Noon ) ) ) :subject ( ?= # ( String \" Sales Call \" ) ) ) ) ) )"
    },
    {
        "question": "Make me something to do tomorrow with Abby , Jesse , Kim , and Jake",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "Please add Grand opening of Dusty 's Dairy Barn on Monday at 5 : 00 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" Grand opening of Dusty's Dairy Barn \" ) ) ) ) ) )"
    },
    {
        "question": "Make me an all day event for tomorrow with Abby and Jake",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) :nonEmptyBase ( EventAllDayOnDate :date ( Tomorrow ) :event ( Constraint[Event] ) ) ) ) ) )"
    },
    {
        "question": "Add lunch date with Bob for 2 pm tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Bob \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" lunch date \" ) ) ) ) ) )"
    },
    {
        "question": "create a new event today at 1400",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( HourMinuteMilitary :hours # ( Number 14 ) :minutes # ( Number 0 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Create a Client Presentation at 4 : 30 pm next Wednesday , and set my status to Busy .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :showAs ( ?= # ( ShowAsStatus \" Busy \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( HourMinutePm :hours # ( Number 4 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" Client Presentation \" ) ) ) ) ) )"
    },
    {
        "question": "And on the 1 st add an all day shopping trip",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( nextDayOfMonth ( Today ) # ( Number 1 ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" shopping trip \" ) ) ) ) ) ) )"
    },
    {
        "question": "Add dinner with Annie at Jax in Glendale to tomorrow 's calendar from 7 PM to 9 PM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Annie \" ) ) ) ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 7 ) ) ) :time ( NumberPM :number # ( Number 9 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Jax in Glendale \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 7 ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "I need to meet with Ana and Michael tomorrow at noon",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Ana \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Michael \" ) ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) ) ) ) )"
    },
    {
        "question": "Make a 2 hour team meeting on Friday at 12 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" team meeting \" ) ) ) ) ) )"
    },
    {
        "question": "I have to add lunch to my calendar tomorrow for 45 minutes starting at noon at \" Burger King \"",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 45 ) ) ) :location ( ?= # ( LocationKeyphrase \" Burger King \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( Noon ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "create baseball game on saturday at 12 until 5",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" baseball game \" ) ) ) ) ) )"
    },
    {
        "question": "schedule 2 hours of volunteering saturday morning",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 2 ) ) ) :start ( DateTimeConstraint :constraint ( Morning ) :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) ) :subject ( ?= # ( String \" volunteering \" ) ) ) ) ) )"
    },
    {
        "question": "I need a family meeting tonight at a starbucks in Nashville",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" starbucks in Nashville \" ) ) :start ( DateTimeConstraint :constraint ( Night ) :date ( Today ) ) :subject ( ?= # ( String \" family meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule a one hour phone conference with Angela at 4 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Angela \" ) ) ) ) ) ) :duration ( ?= ( toHours # ( Number 1 ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 4 ) ) ) ) :subject ( ?= # ( String \" phone conference \" ) ) ) ) ) )"
    },
    {
        "question": "add meeting for tuesday at 2 : 00 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Block off 30 minutes on Wednesday from 1 to 130 pm to go to the salon .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toMinutes # ( Number 30.0 ) ) ) :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( HourMinutePm :hours # ( Number 1 ) :minutes # ( Number 30.0 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" WEDNESDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" go to the salon \" ) ) ) ) ) )"
    },
    {
        "question": "I took a summer vacation last Monday at 1 pm",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( previousDayOfWeek ( Today ) # ( DayOfWeek \" MONDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" summer vacation \" ) ) ) ) ) )"
    },
    {
        "question": "Add dinner between 5 and 10 for tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( DateTimeConstraint :constraint ( TimeToTime :time1 ( NumberPM :number # ( Number 5 ) ) :time2 ( NumberPM :number # ( Number 10.0 ) ) ) :date ( Tomorrow ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "Add breakfast at Vicky 's Place on Sunday at 10 am",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Vicky's Place \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SUNDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" breakfast \" ) ) ) ) ) )"
    },
    {
        "question": "create work conference on friday at 9",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) :subject ( ?= # ( String \" work conference \" ) ) ) ) ) )"
    },
    {
        "question": "Can you create an event at 2 pm tomorrow",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 2 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Also schedule toy story 3 all day starting September 21 .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( EventAllDayOnDate :date ( MD :day # ( Number 21 ) :month # ( Month \" SEPTEMBER \" ) ) :event ( Constraint[Event] :subject ( ?= # ( String \" toy story 3 \" ) ) ) ) ) ) )"
    },
    {
        "question": "Set up a visit the Alamo for four hours on Saturday starting at 10 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :duration ( ?= ( toHours # ( Number 4 ) ) ) :location ( ?= # ( LocationKeyphrase \" the Alamo \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" visit \" ) ) ) ) ) )"
    },
    {
        "question": "Can you make an event for next Tuesday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" TUESDAY \" ) ) ) ) ) ) ) )"
    },
    {
        "question": "can you create an event for dinner next monday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" dinner \" ) ) ) ) ) )"
    },
    {
        "question": "add a lunch with Jerry Skinner tomorrow at 12 PM",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jerry Skinner \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Make a movie night with Robert",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Robert \" ) ) ) ) ) ) :subject ( ?= # ( String \" movie night \" ) ) ) ) ) )"
    },
    {
        "question": "Yes , please book a haircut appointment at hairlines for 2 pm also .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" hairlines \" ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 2 ) ) ) ) :subject ( ?= # ( String \" haircut appointment \" ) ) ) ) ) )"
    },
    {
        "question": "I finally scheduled a haircut at Studio 121 on the 21 st at 10 am and I need to be marked out of the office . I ca n't believe how hard it was to get an appointment .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" Studio 121 \" ) ) :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 21 ) ) :time ( NumberAM :number # ( Number 10.0 ) ) ) ) :subject ( ?= # ( String \" haircut \" ) ) ) ) ) )"
    },
    {
        "question": "Put lunch from 12 PM to 1 PM please .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( NextTime :time ( NumberPM :number # ( Number 12 ) ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :start ( ?= ( NextTime :time ( NumberPM :number # ( Number 12 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Can you schedule a meeting for today at 3 : 00 p.m. ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 3 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Please add lunch with Barack Obama at 12 : 30 pm on Friday .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Barack Obama \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" FRIDAY \" ) ) :time ( HourMinutePm :hours # ( Number 12 ) :minutes # ( Number 30.0 ) ) ) ) :subject ( ?= # ( String \" lunch \" ) ) ) ) ) )"
    },
    {
        "question": "Make a meeting tomorrow with Brenda .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Brenda \" ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I need to see Abby , Jake , and Jesse tomorrow for some beers",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Abby \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jesse \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) :subject ( ?= # ( String \" beers \" ) ) ) ) ) )"
    },
    {
        "question": "make an appointment with alex at today 5 pm",
        "target": "( do ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" alex \" ) ) ) ) ) ( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( Today ) :time ( NumberPM :number # ( Number 5 ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Can you make a lunch meeting for next monday ?",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( Constraint[DateTime] :date ( ?= ( NextDOW :dow # ( DayOfWeek \" MONDAY \" ) ) ) ) :subject ( ?= # ( String \" lunch meeting \" ) ) ) ) ) )"
    },
    {
        "question": "make a meet with jane tomorrow 1 p.m.",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" jane \" ) ) ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 1 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Add meeting at work on the 17 th at 9 am .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :location ( ?= # ( LocationKeyphrase \" work \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( nextDayOfMonth ( Today ) # ( Number 17 ) ) :time ( NumberAM :number # ( Number 9 ) ) ) ) ) ) ) )"
    },
    {
        "question": "Hi ! we have lots of games coming up this week and weekend for the play - off . We have a game with Blanchet tomorrow at 5 pm at our home . Please add that event which should be end by 8 pm . Mark me as out of office also .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) :time ( NumberPM :number # ( Number 8 ) ) ) ) :location ( ?= # ( LocationKeyphrase \" our home \" ) ) :showAs ( ?= # ( ShowAsStatus \" OutOfOffice \" ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( Tomorrow ) :time ( NumberPM :number # ( Number 5 ) ) ) ) :subject ( ?= # ( String \" game with Blanchet \" ) ) ) ) ) )"
    },
    {
        "question": "Please schedule a meeting with Kim , Elli , Jennifer , and Jake for tomorrow .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( andConstraint ( andConstraint ( andConstraint ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Kim \" ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Elli \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jennifer \" ) ) ) ) ) ) ) ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Jake \" ) ) ) ) ) ) ) :start ( Constraint[DateTime] :date ( ?= ( Tomorrow ) ) ) ) ) ) )"
    },
    {
        "question": "I have a meeting before my workshop",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( :start ( singleton ( :results ( FindEventWrapperWithDefaults :constraint ( Constraint[Event] :subject ( ?~= # ( String \" workshop \" ) ) ) ) ) ) ) ) ) ) ) )"
    },
    {
        "question": "Schedule a staff meeting on Thursday at 8 : 00 AM .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" THURSDAY \" ) ) :time ( NumberAM :number # ( Number 8 ) ) ) ) :subject ( ?= # ( String \" staff meeting \" ) ) ) ) ) )"
    },
    {
        "question": "Saturday I have family time from 1 to 4 pm .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :end ( ?= ( TimeAfterDateTime :dateTime ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) :time ( NumberPM :number # ( Number 4 ) ) ) ) :start ( ?= ( DateAtTimeWithDefaults :date ( NextDOW :dow # ( DayOfWeek \" SATURDAY \" ) ) :time ( NumberPM :number # ( Number 1 ) ) ) ) :subject ( ?= # ( String \" family time \" ) ) ) ) ) )"
    },
    {
        "question": "Schedule meet Blake at Welsh Park this weekend .",
        "target": "( Yield :output ( CreateCommitEventWrapper :event ( CreatePreflightEventWrapper :constraint ( Constraint[Event] :attendees ( AttendeeListHasRecipient :recipient ( Execute :intension ( refer ( extensionConstraint ( RecipientWithNameLike :constraint ( Constraint[Recipient] ) :name # ( PersonName \" Blake \" ) ) ) ) ) ) :location ( ?= # ( LocationKeyphrase \" Welsh Park \" ) ) :start ( Constraint[DateTime] :date ( ThisWeekend ) ) ) ) ) )"
    }
]